{"version":3,"file":null,"sources":["../src/js/utility.js","../src/js/data/RibbonBaseData.js","../src/js/data/RibbonTabData.js","../src/js/data/RibbonAppTabData.js","../src/js/data/RibbonTitlebarData.js","../src/js/RibbonBase.jsx","../src/js/RibbonTitlebar.jsx","../src/js/RibbonItem.jsx","../src/js/RibbonTooltip.jsx","../src/js/data/RibbonTooltipData.js","../src/js/RibbonButton.jsx","../src/js/RibbonPushButton.jsx","../src/js/RibbonToggleButton.jsx","../src/js/data/RibbonItemData.js","../src/js/data/RibbonButtonData.js","../src/js/data/RibbonPushButtonData.js","../src/js/data/RibbonToggleButtonData.js","../src/js/RibbonGroup.jsx","../src/js/RibbonRadioButtonGroup.jsx","../src/js/data/RibbonGroupData.js","../src/js/data/RibbonRadioButtonGroupData.js","../src/js/RibbonPanel.jsx","../src/js/data/RibbonPanelData.js","../src/js/RibbonTab.jsx","../src/js/Ribbon.jsx","../src/js/RibbonTask.js","../src/js/RibbonTaskManager.js","../src/js/RibbonTaskExecuter.js","../src/js/RibbonCtrl.jsx","../src/js/data/index.js","../src/js/index.js"],"sourcesContent":["/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\n/**\n * Create new RFC4122 v4 GUID based on timeStamp.\n * @return {string}\t- New guid\n */\nexport const newGUID = () => {\n\tvar d = new Date().getTime();\n\n\tvar guid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(\n\t\t/[xy]/g,\n\t\t( c ) => {\n\t\t\tvar r = ( d + Math.random() * 16 ) % 16 | 0;\n\t\t\td = Math.floor( d / 16 );\n\t\t\treturn ( c == 'x' ? r : ( r & 0x3 | 0x8 ) ).toString( 16 );\n\t\t});\n\n\treturn guid;\n};\n\n/**\n * Check input is GUID.\n * @param {string} - Target guid.\n * @return {bool} -\tIf the input is a GUID, then return true.\n */\nexport const isGUID = ( guid ) => {\n\t//const pattern = /^[0-9a-f]{4}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{4}$/i;\n\tconst pattern = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n\treturn pattern.test( guid );\n};\n\n/**\n * Find proper (first) item suited with input condition in an array.\n * @param {array} items -\tArray of searching target.\n * @param {func} predicate - Predicate function for describe which item is goingo to return.\n * @return {object} - Target item.\n */\nexport const findItem = ( items = [], predicate ) => {\n\tpredicate = ( predicate instanceof Function ) ? predicate : ( item ) => { return true };\n\n\tfor( let i = 0; i < items.length; i++ ) {\n\t\tlet item = items[i];\n\t\tif( predicate( item ) ) return item;\n\t}\n};\n\n/**\n * Create namespace.\n * @param {string} s - namespace (e.g. 'RiibonUI.Ribbon').\n * @return {Object} - Namespace,\n */\t\nexport const namespace = ( s ) => {\n\tvar ns = typeof window !== 'undefined' && window !== null ? window : self;\n\n\tvar parts = s.split( '.' );\n\tfor( var i = 0; i < parts.length; i++ ) {\n\t\tns[ parts[i] ] = ns[ parts[i] ] || {};\n\t\tns = ns[ parts[i] ];\n\t}\n\n\treturn ns;\n};\n\nconst utility = {\n\tnewGUID,\n\tisGUID,\n\tfindItem,\n\tnamespace\n};\n\nexport default utility;\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport { newGUID } from '../utility';\n\nconst Id = Symbol( 'id' );\nconst Name = Symbol( 'name' );\nconst DisplayName = Symbol( 'displayName' );\nconst Enabled = Symbol( 'enabled' );\nconst Hidden = Symbol( 'hidden' );\n\n/**\n * RibbonBaseData\n * @class\n */\nexport default class RibbonBaseData {\n\t/**\n\t * RibbonBaseData constructor\n\t * @param {string} name - The name of this instance used by the internal mechanism.\n\t * @param {string} displayName - The name of this instance shown on the user interface, might be a localized string.\n\t */\n\tconstructor( name, displayName ) {\n\t\tif( typeof name !== 'string' ) throw 'name is required.';\n\n\t\tthis[Id] = newGUID();\n\t\tthis[Name] = name;\n\t\tthis[DisplayName] = ( typeof name !== 'string' ) ? name : displayName;\n\t\tthis[Enabled] = true;\n\t\tthis[Hidden] = false;\n\t}\n\n\t/**\n\t * Instance uuid used by the internal mechanism.\n\t * @return {string} - The UUID.\n\t */\n\tget id() {\n\t\treturn this[Id];\n\t}\n\n\t/**\n\t * Instance name used by the internal mechanism.\n\t * @return {string} - Instance name.\n\t */\n\tget name() {\n\t\treturn this[Name];\n\t}\n\n\t/**\n\t * Instance name shown on the user interface, might be a localized string.\n\t * @return {string} - Instance name.\n\t */\n\tget displayName() {\n\t\treturn this[DisplayName];\n\t}\n\n\t/**\n\t * Instance name shown on the user interface, might be a localized string.\n\t * @param {string} [name] - Instance name.\n\t */\n\tset displayName( name ) {\n\t\tif( typeof name !== 'string' ) throw 'Input type should be a string.';\n\n\t\tthis[DisplayName] = name;\n\t}\n\n\t/**\n\t * Instance edis/en-able status.\n\t * @return {bool} - If false, make instance be disabled.\n\t */\n\tget enabled() {\n\t\treturn this[Enabled];\n\t}\n\n\t/**\n\t * Instance edis/en-able status.\n\t * @return {bool} [enabled = true] - If false, make instance be disabled.\n\t */\n\tset enabled( enabled = true ) {\n\t\tthis[Enabled] = ( enabled === true );\n\t}\n\n\t/**\n\t * Instance is hidden or not.\n\t * @return {bool} - If false, instance is going to disppear on the UI.\n\t */\n\tget hidden() {\n\t\treturn this[Hidden];\n\t}\n\n\t/**\n\t * Instance edis/en-able status.\n\t * @return {bool} [hidden = false] - If false, instance is going to disppear on the UI.\n\t */\n\tset hidden( hidden = false ) {\n\t\tthis[Hidden] = ( hidden === true );\n\t}\n}\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport RibbonBaseData from './RibbonBaseData';\n\nconst\tActived = Symbol( 'actived' );\nconst Panels = Symbol( 'panels' );\n\n/**\n * RibbonTabData\n * @extends RibbonBaseData\n * @class\n */\nexport default class RibbonTabData extends RibbonBaseData {\n\t/**\n\t * RibbonTabData constructor\n\t * @param {string} name - The name of this instance used by the internal mechanism.\n\t * @param {string} displayName - The name of this instance shown on the user interface, might be a localized string.\n\t */\n\tconstructor( name, displayName ) {\n\t\tsuper( name, displayName );\n\n\t\tthis[Actived] = false;\n\t\tthis[Panels] = [];\n\t}\n\n\t/**\n\t * Tab type.\n\t * @return {string} - Tab type for identification.\n\t */\n\tget type() {\n\t\treturn 'ui-ribbon-tab-normal';\n\t}\n\n\t/**\n\t * Tab actived state.\n\t * @return {bool} - If true, it repsents tab is selected currently.\n\t */\n\tget actived() {\n\t\treturn this[Actived]\n\t}\n\t\n\t/**\n\t * Tab actived state.\n\t * @return {bool} [actived = false] - If true, it repsents tab is selected currently.\n\t */\n\tset actived( actived = false ) {\n\t\tthis[Actived] = ( actived === true );\n\t}\n\n\t/**\n\t * Tab's children panels\n\t * @return {RibbonPanelData[]} - Ribbon panel data.\n\t */\n\tget panels() {\n\t\treturn this[Panels];\n\t}\n\n\t/**\n\t * Tab's children panels\n\t * @param {RibbonPanelData[]} [panels = []] - Ribbon panel data.\n\t */\n\tset panels( panels = [] ) {\n\t\tthis[Panels] = panels;\n\t}\n}\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport RibbonTabData from './RibbonTabData';\n\n/**\n * RibbonAppTabData\n * @class\n */\nexport default class RibbonAppTabData extends RibbonTabData {\n\t/**\n\t * RibbonAppTabData constructor\n\t * @param {string} [displayName = 'File'] - The name of this instance shown on the user interface, might be a localized string.\n\t */\n\tconstructor( displayName = 'File' ) {\n\t\tsuper( 'AppTab', displayName );\n\t}\n\n\t/**\n\t * Tab type.\n\t * @return {string} - Tab type for identification.\n\t * @override\n\t */\n\tget type() {\n\t\treturn 'ui-ribbon-tab-application';\n\t}\n}\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport RibbonBaseData from './RibbonBaseData';\n\n/**\n * RibbonTitlebarData\n * @class\n */\nexport default class RibbonTitlebarData extends RibbonBaseData {\n\t/**\n\t * RibbonTitlebarData constructor\n\t * @param {string} title - The name of this instance shown on the user interface, might be a localized string.\n\t */\n\tconstructor( title ) {\n\t\tif( typeof title !== 'string' ) title = 'Ribbon UI';\n\n\t\tsuper( 'AppTitlebar', title );\n\t}\n\n\t/**\n\t * App title.\n\t * @return {string}\n\t */\n\tget title() {\n\t\treturn this.displayName;\n\t}\n\n\t/**\n\t * App title\n\t * @param {string} title\n\t */\n\tset title( title ) {\n\t\tthis.displayName = title;\n\t}\n}\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport React from 'react';\nimport { newGUID } from './utility';\n\n/**\n * RibbonBase\n * @extends React.Component\n * @class\n */\nexport default class RibbonBase extends React.Component {\n\t/**\n\t * RibbonBase constructor\n\t * @param {object} props - React component properties\n\t */\n\tconstructor( props ) {\n\t\tsuper( props );\n\n\t\tlet displayName = ( typeof props.displayName === 'string' ) ? props.displayName : name;\n\t\tlet enabled = ( props.enabled == false ) ? false : true;\n\t\tlet hidden = ( props.hidden === true )\n\n\t\tthis.state = {\n\t\t\tdisplayName,\n\t\t\tenabled,\n\t\t\thidden\n\t\t};\n\t}\n\n\t/**\n\t * Instance id for internal identification and HTML id attribute.\n\t * @return {string} - The UUID.\n\t */\n\tget id() {\n\t\treturn this.props.id;\n\t}\n\n\t/**\n\t * Instance name for internal identification.\n\t * @return {string} - Instance name.\n\t */\n\tget name() {\n\t\treturn this.props.name;\n\t}\n\n\t/**\n\t * Instance name shown on the user interface, might be a localized string.\n\t * @return {string} - Instance name.\n\t */\n\tget displayName() {\n\t\treturn this.state.displayName;\n\t}\n\n\t/**\n\t * Instance name shown on the user interface, might be a localized string.\n\t * @param {string} - Instance name.\n\t */\n\tset displayName( name ) {\n\t\tif( typeof name !== 'string' ) throw 'Input type should be a string.';\n\n\t\tconst prop = { displayName: name };\n\t\tconst onStateChange = this.props.onStateChange;\n\t\tonStateChange && onStateChange( this.id, prop );\n\n\t\tthis.setState( prop );\n\t}\n\n\t/**\n\t * Instance edis/en-able status.\n\t * @return {bool} - If false, make instance be disabled.\n\t */\n\tget enabled() {\n\t\treturn this.state.enabled;\n\t}\n\t\n\t/**\n\t * Instance edis/en-able status.\n\t * @param {bool} [enabled = true] - If false, make instance be disabled.\n\t */\n\tset enabled( enabled = true ) {\n\t\tif( this.hidden ) return;\n\n\t\tconst isEnabled = ( enabled === true );\n\n\t\tconst prop = { enabled: isEnabled };\n\t\tconst onStateChange = this.props.onStateChange;\n\t\tonStateChange && onStateChange( this.id, prop );\n\n\t\tthis.setState( prop );\n\t}\n\n\t/**\n\t * Instance is hidden or not.\n\t * @return {bool} - If false, instance is going to disppear on the UI.\n\t */\n\tget hidden() {\n\t\treturn this.state.hidden;\n\t}\n\t\n\t/**\n\t * Instance is hidden or not.\n\t * @return {bool} [hidden = false]- If false, instance is going to disppear on the UI.\n\t */\n\tset hidden( hidden = false ) {\n\t\tconst isHidden = ( hidden === true );\n\t\tconst isEnabled = !isHidden;\n\n\t\tconst prop = { hidden: isHidden, enabled: isEnabled };\n\t\tconst onStateChange = this.props.onStateChange;\n\t\tonStateChange && onStateChange( this.id, prop );\n\n\t\tthis.setState( prop );\n\t}\n}\n\nRibbonBase.propTypes = {\n\tid: React.PropTypes.string.isRequired,\n\tname: React.PropTypes.string.isRequired,\n\tdisplayName: React.PropTypes.string,\n\tenabled: React.PropTypes.bool,\n\thidden: React.PropTypes.bool,\n\tonStateChange: React.PropTypes.func\n};\n\nRibbonBase.defaultProps = {\n\tid: newGUID(),\n\tenabled: true,\n\thidden: false\n};\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport React from 'react';\nimport ClassNames from 'classnames';\nimport RibbonBase from './RibbonBase';\n\n/**\n * RibbonTitlebar\n * @class\n */\nexport default class RibbonTitlebar extends RibbonBase {\n\t/**\n\t * RibbonTitlebar constructor\n\t * @param {object} props - React component properties\n\t */\n\tconstructor( props ) {\n\t\tsuper( props );\n\t}\n\n\t/**\n\t * Ribbon main title\n\t * @return {string} - Ribbon title\n\t */\n\tget title() {\n\t\treturn this.displayName;\n\t}\n\n\t/**\n\t * Ribbon main title\n\t * @param {string} title - Ribbon title\n\t */\n\tset title( title ) {\n\t\tif( typeof title !== 'string' ) throw 'Input type should be a string.';\n\n\t\tthis.displayName = title;\n\t}\n\n\t/**\n\t * Toggle titlebar be displayed or hiden.\n\t */\n\ttoggleDisplay() {\n\t\tthis.hidden = ( !this.hidden );\n\t}\n\n\trender() {\n\t\tconst dynCSS = ClassNames({\n\t\t\t'ui-ribbon-invisible': this.hidden\n\t\t});\n\n\t\treturn (\n\t\t\t<div className={ \"ui-ribbon-title \" + dynCSS }>\n\t\t\t\t<span>{ this.title }</span>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nRibbonTitlebar.propTypes = {\n\tonStateChange: React.PropTypes.func\n};\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport React from 'react';\nimport ClassNames from 'classnames';\nimport RibbonBase from './RibbonBase';\nimport { newGUID } from './utility';\n\n/**\n * RibbonItem\n * @extends RibbonBase\n * @class\n */\nexport default class RibbonItem extends RibbonBase {\n\t/**\n\t * RibbonItem constructor\n\t * @param {object} props - React component properties\n\t */\n\tconstructor( props ) {\n\t\tsuper( props );\n\t\t\n\t\tlet actived = ( props.actived === true );\n\n\t\tthis.state = Object.assign( this.state, { actived } );\n\t}\n\n\t/**\n\t * Item type.\n\t * @return {string} - Item type for identification.\n\t */\n\tget type() {\n\t\treturn this.props.type;\n\t}\n\t\n\t/**\n\t * Item actived state.\n\t * @return {bool} - If true, it repsents item is actived currently.\n\t */\n\tget actived() {\n\t\treturn this.state.actived;\n\t}\n\n\t/**\n\t * Item actived state.\n\t * @return {bool} [actived = false] - If true, it repsents item is actived currently.\n\t */\n\tset actived( actived = false ) {\n\t\tconst isActived = ( actived === true );\n\t\tconst prop = { actived: isActived };\n\n\t\tconst onStateChange = this.props.onStateChange;\n\t\tonStateChange && onStateChange( this.id, prop );\n\n\t\tthis.setState( prop );\n\t}\n}\n\nRibbonItem.propTypes = {\n\tid: React.PropTypes.string.isRequired,\n\ttype: React.PropTypes.string.isRequired,\n\tactived: React.PropTypes.bool,\n\tonStateChange: React.PropTypes.func\n};\n\nRibbonItem.defaultProps = {\n\tid: newGUID(),\n\ttype: 'ui-ribbon-panel-item',\n\tactived: false\n};\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport React from 'react';\nimport ClassNames from 'classnames';\nimport RibbonBase from './RibbonBase';\n\n/**\n * RibbonTooltip\n * @class\n */\nexport default class RibbonTooltip extends RibbonBase {\n\t/**\n\t * RibbonTooltip constructor\n\t * @param {object} props - React component properties\n\t */\n\tconstructor( props ) {\n\t\tsuper( props );\n\n\t\tthis.state = Object.assign( this.state,\n\t\t\t{\n\t\t\t\tcontent: props.content\n\t\t\t});\n\t}\n\n\t/**\n\t * Tooltip title.\n\t * @return {string} - Ribbon tooltip title.\n\t */\n\tget title() {\n\t\treturn this.displayName;\n\t}\n\n\t/**\n\t * Tooltip title.\n\t * @return {string} title - Ribbon tooltip title.\n\t */\n\tset title( title ) {\n\t\tif( typeof title !== 'string' ) throw 'Input type should be a string.';\n\n\t\tthis.displayName = title;\n\t}\n\n\t/**\n\t * Tooltip content.\n\t * @return {string} - Tooltip content.\n\t */\n\tget content() {\n\t\treturn this.state.content;\n\t}\n\n\t/**\n\t * Tooltip content.\n\t * @return {string} - Tooltip content.\n\t */\n\tset content( content = '' ) {\n\t\tif( typeof content !== 'string' ) throw 'Input content should be a string.';\n\n\t\tconst prop = { content };\n\t\tconst onStateChange = this.props.onStateChange;\n\t\tonStateChange && onStateChange( this.id, prop );\n\n\t\tthis.setState( prop );\n\t}\n\t\n\t/**\n\t * Instance is hidden or not.\n\t * @return {bool} - If false, instance is going to disppear on the UI.\n\t * @override\n\t */\n\tget hidden() {\n\t\treturn this.state.hidden;\n\t}\n\t\n\t/**\n\t * Instance is hidden or not.\n\t * @return {bool} [hidden = false]- If false, instance is going to disppear on the UI.\n\t * @override\n\t */\n\tset hidden( hidden = false ) {\n\t\tconst isHidden = ( hidden === true );\n\n\t\tconst prop = { hidden: isHidden };\n\t\tconst onStateChange = this.props.onStateChange;\n\t\tonStateChange && onStateChange( this.id, prop );\n\n\t\tthis.setState( prop );\n\t}\n\n\t/**\n\t * Make this tooltip appear.\n\t */\n\tshow() {\n\t\tthis.hidden = false;\n\t}\n\n\t/**\n\t * Make this tooltip disappear.\n\t */\n\thide() {\n\t\tthis.hidden = true;\n\t}\n\n\trender() {\n\t\tconst dynCSS = ClassNames({\n\t\t\t'ui-ribbon-tooltip-visible': ( this.hidden === false )\n\t\t});\n\n\t\tconst createTitle = () => {\n\t\t\tif( this.title )\n\t\t\t\treturn ( <strong>{ this.title }</strong> );\n\t\t};\n\n\t\tconst createContent = () => {\n\t\t\tif( this.content )\n\t\t\t\treturn ( <p>{ this.content }</p> );\n\t\t};\n\n\t\treturn (\n\t\t\t<div id={ this.id } className={ \"ui-ribbon-tooltip \" + dynCSS }>\n\t\t\t\t{ createTitle() }\n\t\t\t\t{ createContent() }\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nRibbonTooltip.propTypes = {\n\tcontent: React.PropTypes.string,\n\tonStateChange: React.PropTypes.func\n};\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport RibbonBaseData from './RibbonBaseData';\nimport { newGUID } from '../utility';\n\nconst Content = Symbol( 'content' );\n\n/**\n * RibbonTooltipData\n * @extends RibbonBaseData\n * @class\n */\nexport default class RibbonTooltipData extends RibbonBaseData {\n\t/**\n\t * RibbonTooltipData constructor\n\t * @param {string} name - The name of this instance used by the internal mechanism.\n\t * @param {string} displayName - The name of this instance shown on the user interface, might be a localized string.\n\t */\n\tconstructor( title, content ) {\n\t\tif( typeof title !== 'string' ) throw 'Tooltip title cannot be empty.';\n\n\t\tsuper( 'RibbonTooltip', title );\n\n\t\tthis[Content] = ( typeof content !== 'string' ) ? undefined : content;\n\t\tthis.hidden = true;\n\t}\n\t\n\t/**\n\t * App title.\n\t * @return {string}\n\t */\n\tget title() {\n\t\treturn this.displayName;\n\t}\n\n\t/**\n\t * App title\n\t * @param {string} title\n\t */\n\tset title( title ) {\n\t\tthis.displayName = title;\n\t}\n\n\t/**\n\t * Tooltip content.\n\t * @return {string} - Tooltip content.\n\t */\n\tget content() {\n\t\treturn this[Content];\n\t}\n\n\t/**\n\t * Tooltip content.\n\t * @return {string} - Tooltip content.\n\t */\n\tset content( content ) {\n\t\tif( typeof content !== 'string' ) throw 'Input content should be a type of string.';\n\n\t\tthis[Content] = content;\n\t}\n}\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport React from 'react';\nimport ClassNames from 'classnames';\nimport RibbonItem from './RibbonItem';\nimport RibbonTooltip from './RibbonTooltip';\nimport RibbonTooltipData from './data/RibbonTooltipData';\nimport { newGUID } from './utility';\n\n/**\n * RibbonButton\n * @extends RibbonItem\n * @class\n */\nexport default class RibbonButton extends RibbonItem {\n\t/**\n\t * RibbonButton constructor\n\t * @param {object} props - React component properties\n\t */\n\tconstructor( props ) {\n\t\tsuper( props );\n\n\t\tlet icon = props.icon;\n\t\tlet tooltip = props.tooltip;\n\t\tlet toggleable = ( props.toggleable === true );\n\t\tlet clickHandler = props.clickHandler;\n\n\t\tthis.state = Object.assign( this.state,\n\t\t\t{\n\t\t\t\ticon,\n\t\t\t\ttooltip,\n\t\t\t\ttoggleable,\n\t\t\t\tclickHandler\n\t\t\t});\n\n\t\tthis.handleClick = this.handleClick.bind( this );\n\t\tthis.handleMouseOver = this.handleMouseOver.bind( this );\n\t\tthis.handleMouseOut = this.handleMouseOut.bind( this );\n\t}\n\n\t/**\n\t * Button role.\n\t * @return {string}\n\t */\n\tget role() {\n\t\treturn this.props.role;\n\t}\n\n\t/**\n\t * Button icon.\n\t * @return {string} - Button icon path.\n\t */\n\tget icon() {\n\t\treturn this.state.icon;\n\t}\n\t\n\t/**\n\t * Button icon.\n\t * @return {string} icon - Button icon path.\n\t */\n\tset icon( icon ) {\n\t\tif( typeof icon !== 'string' ) throw 'Input type should be a string.';\n\n\t\tconst prop = { icon };\n\t\tconst onStateChange = this.props.onStateChange;\n\t\tonStateChange && onStateChange( this.id, prop );\n\n\t\tthis.setState( prop );\n\t}\n\n\t/**\n\t * Button toggleable state.\n\t * @return {bool} - If true, it repsents button is toggled currently.\n\t */\n\tget toggleable() {\n\t\treturn this.state.toggleable;\n\t}\n\n\t/**\n\t * Button toggleable state.\n\t * @return {bool} [toggleable = false] - If true, it repsents button is toggled currently.\n\t */\n\tset toggleable( toggleable = false ) {\n\t\tconst isToggleable = ( toggleable === true );\n\n\t\tconst prop = { toggleable: isToggleable };\n\t\tconst onStateChange = this.props.onStateChange;\n\t\tonStateChange && onStateChange( this.id, prop );\n\n\t\tthis.setState( prop );\n\t}\n\n\t/**\n\t * Button click eveent handler.\n\t * @return {Function} - Click eveent handler.\n\t */\n\tget clickHandler() {\n\t\treturn this.state.clickHandler;\n\t}\n\n\t/**\n\t * Button click eveent handler.\n\t * @param {Function} handler - Click eveent handler.\n\t */\n\tset clickHandler( handler ) {\n\t\tif( !(handler instanceof Function) )\n\t\t\tthrow 'Input clicking handler is invalid.';\n\n\t\tconst prop = { clickHandler: handler };\n\t\tconst onStateChange = this.props.onStateChange;\n\t\tonStateChange && onStateChange( this.id, prop );\n\n\t\tthis.setState( prop );\n\t}\n\n\t/**\n\t * Button tooltip comopent.\n\t * @return {RibbonTooltip} - Rendered RibbonTooltip component.\n\t */\n\tget tooltip() {\n\t\treturn this.refs.tooltip;\n\t}\n\n\tset tooltip( tooltip ) {\n\t\tif( !(tooltip instanceof RibbonTooltipData) )\n\t\t\tthrow '[RibbonButton] Input tooltip data is invalid.';\n\n\t\tconst prop = { tooltip };\n\t\tconst onStateChange = this.props.onStateChange;\n\t\tonStateChange && onStateChange( this.id, prop );\n\n\t\tthis.setState( prop );\n\t}\n\n\t/**\n\t * Create tooltip\n\t * @return {RibbonTooltip} - RibbonTooltip instance (not rendered).\n\t */\n\tcreateTooltip() {\n\t\tconst scope = this;\n\t\tconst data = this.state.tooltip;\n\t\tif( !data ) return;\n\n\t\tif( !(data instanceof RibbonTooltipData) && data )\n\t\t\treturn console.log( '%c[RibbonButton] Input tooltip data is invalid.', 'color:red;' );\n\n\t\tconst updateTooltip = ( id, data ) => {\n\t\t\tlet tooltip = scope.state.tooltip;\n\n\t\t\tif( tooltip.id !== id ) return;\n\n\t\t\tObject.assign( tooltip, data );\n\n\t\t\tconst prop = { tooltip };\n\t\t\tconst onStateChange = scope.props.onStateChange;\n\t\t\tonStateChange && onStateChange( scope.id, prop );\n\n\t\t\tscope.setState( prop );\n\t\t};\n\n\t\treturn (\n\t\t\t<RibbonTooltip\n\t\t\t\tkey={ data.id }\n\t\t\t\tid={ data.id }\n\t\t\t\tname={ data.name }\n\t\t\t\tdisplayName={ data.title }\n\t\t\t\tcontent={ data.content }\n\t\t\t\tenabled={ data.enabled }\n\t\t\t\thidden={ data.hidden }\n\t\t\t\tonStateChange={ updateTooltip }\n\t\t\t\tref=\"tooltip\" />\n\t\t);\n\t}\n\n\t/**\n\t * Button clicking event handler.\n\t */\n\thandleClick( event ) {\n\t\tif( !this.enabled ) return;\n\n\t\tconst clickHandler = this.props.clickHandler;\n\t\tclickHandler && clickHandler( event );\n\t}\n\n\t/**\n\t * Button hovering over event handler.\n\t */\n\thandleMouseOver() {\n\t\tconst tooltip = this.tooltip;\n\t\ttooltip && tooltip.show();\n\t}\n\n\t/**\n\t * Button hovering out event handler.\n\t */\n\thandleMouseOut() {\n\t\tconst tooltip = this.tooltip;\n\t\ttooltip && tooltip.hide();\n\t}\n\n\trender() {\n\t\tconst outerDynCSS = ClassNames({\n\t\t\t'ui-ribbon-disabled': ( this.enabled === false ),\n\t\t\t'ui-ribbon-invisible': this.hidden\n\t\t});\n\n\t\tconst innerDynCSS = ClassNames({\n\t\t\t'ui-ribbon-active': this.actived\n\t\t});\n\n\t\tconst formatLegend = ( legend ) => {\n\t\t\tconst texts = legend.split( '\\\\n' );\n\t\t\tlet result = <span>{ legend }</span>;\n\n\t\t\tif( texts.length > 1 ) {\n\t\t\t\tresult = texts.map(( txt ) => {\n\t\t\t\t\t\treturn ( \n\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t{ txt }\n\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t}\n\t\t\treturn result;\n\t\t};\n\n\t\treturn (\n\t\t\t<a\n\t\t\t\tkey={ this.id }\n\t\t\t\tid={ this.id }\n\t\t\t\tclassName={ outerDynCSS }\n\t\t\t\tonClick={ this.handleClick }\n\t\t\t\tonMouseOver={ this.handleMouseOver }\n\t\t\t\tonMouseOut={ this.handleMouseOut } >\n\n\t\t\t\t<div\n\t\t\t\t\trole={ this.role }\n\t\t\t\t\tclassName={ \"ui-ribbon-button \" + this.type + \" ui-ribbon-relative ui-ribbon-inline ui-ribbon-center \" + innerDynCSS } >\n\n\t\t\t\t\t<img src={ this.icon } />\n\t\t\t\t\t<div className=\"ui-ribbon-button-legend\">\n\t\t\t\t\t\t{ formatLegend( this.displayName ) }\n\t\t\t\t\t</div>\n\t\t\t\t\t{ this.createTooltip() }\n\t\t\t\t</div>\n\t\t\t</a>\n\t\t);\n\t}\n}\n\nRibbonButton.propTypes = {\n\tid: React.PropTypes.string.isRequired,\n\trole: React.PropTypes.string.isRequired,\n\ttype: React.PropTypes.string.isRequired,\n\ticon: React.PropTypes.string,\n\ttooltip: React.PropTypes.instanceOf( RibbonTooltipData ),\n\ttoggleable: React.PropTypes.bool,\n\tclickHandler: React.PropTypes.func,\n\tonStateChange: React.PropTypes.func\n};\n\nRibbonButton.defaultProps = {\n\tid: newGUID(),\n\trole: 'ui-ribbon-button',\n\ttype: 'ui-ribbon-button',\n\ticon: '',\n\ttoggleable: false\n};\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport React from 'react';\nimport ClassNames from 'classnames';\nimport RibbonButton from './RibbonButton';\n\n/**\n * RibbonPushButton\n * @class\n */\nexport default class RibbonPushButton extends RibbonButton {\n\t/**\n\t * RibbonPushButton constructor\n\t * @param {object} props - React component properties\n\t */\n\tconstructor( props ) {\n\t\tsuper( props );\n\t}\n\n\trender() {\n\t\tconst dynCSS = ClassNames({\n\t\t\t'ui-ribbon-disabled': ( this.enabled === false ),\n\t\t\t'ui-ribbon-invisible': this.hidden\n\t\t});\n\n\t\treturn (\n\t\t\t<div className={ \"ui-ribbon-button-group ui-ribbon-inline \" + dynCSS }>\n\t\t\t\t{ super.render() }\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nRibbonPushButton.propTypes = {\n\ttype: React.PropTypes.string.isRequired,\n\tonStateChange: React.PropTypes.func\n};\n\nRibbonPushButton.defaultProps = {\n\ttype: 'ui-ribbon-button-big'\n};\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport React from 'react';\nimport ClassNames from 'classnames';\nimport RibbonPushButton from './RibbonPushButton';\n\n/**\n * RibbonToggleButton\n * @class\n */\nexport default class RibbonToggleButton extends RibbonPushButton {\n\t/**\n\t * RibbonToggleButton constructor\n\t * @param {object} props - React component properties\n\t */\n\tconstructor( props ) {\n\t\tsuper( props );\n\n\t\tthis.handleClick = this.handleClick.bind( this );\n\t}\n\n\t/**\n\t * Button clicking event handler.\n\t * @override\n\t */\n\thandleClick( event ) {\n\t\tif( !this.enabled ) return;\n\n\t\tif( this.toggleable ) {\n\t\t\tconst isActived = !this.actived;\n\n\t\t\tconst prop = { actived: isActived };\n\t\t\tconst onStateChange = this.props.onStateChange;\n\t\t\tonStateChange && onStateChange( this.id, prop );\n\n\t\t\tthis.setState( prop );\n\n\t\t\t// For de/activating button by changing button's actived property.\n\t\t\tconst onGroupCurrentChange = this.props.onGroupCurrentChange;\n\t\t\tonGroupCurrentChange && onGroupCurrentChange();\n\t\t}\n\n\t\tconst clickHandler = this.props.clickHandler;\n\t\tclickHandler && clickHandler( event );\n\t}\n}\n\nRibbonToggleButton.propTypes = {\n\ttype: React.PropTypes.string.isRequired,\n\trole: React.PropTypes.string.isRequired,\n\tonGroupCurrentChange: React.PropTypes.func,\n\tonStateChange: React.PropTypes.func\n};\n\nRibbonToggleButton.defaultProps = {\n\trole: 'ui-ribbon-button-toggle',\n\ttype: 'ui-ribbon-button-big'\n};\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport RibbonBaseData from './RibbonBaseData';\n\nconst\tActived = Symbol( 'actived' );\n\n/**\n * RibbonItemData\n * @extends RibbonBaseData\n * @class\n */\nexport default class RibbonItemData extends RibbonBaseData {\n\t/**\n\t * RibbonItemData constructor\n\t * @param {string} name - The name of this instance used by the internal mechanism.\n\t * @param {string} displayName - The name of this instance shown on the user interface, might be a localized string.\n\t */\n\tconstructor( name, displayName ) {\n\t\tsuper( name, displayName );\n\n\t\tthis[Actived] = false;\n\t}\n\n\t/**\n\t * Item type.\n\t * @return {string} - Item type for identification.\n\t */\n\tget type() {\n\t\treturn 'ui-ribbon-panel-item';\n\t}\n\n\t/**\n\t * Item actived state.\n\t * @return {bool} - If true, it repsents item is actived currently.\n\t */\n\tget actived() {\n\t\treturn this[Actived]\n\t}\n\n\t/**\n\t * Item actived state.\n\t * @return {bool} [actived = false] - If true, it repsents item is actived currently.\n\t */\n\tset actived( actived = false ) {\n\t\tthis[Actived] = ( actived === true );\n\t}\n}\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport RibbonItemData from './RibbonItemData';\nimport RibbonTooltipData from './RibbonTooltipData';\n\nconst\tIcon = Symbol( 'icon' );\nconst Tooltip = Symbol( 'tooltip' );\nconst Toggleable = Symbol( 'toggleable' );\nconst ClickHandler = Symbol( 'clickHandler' );\n\n/**\n * RibbonButtonData\n * @extends RibbonItemData\n * @class\n */\nexport default class RibbonButtonData extends RibbonItemData {\n\t/**\n\t * RibbonButtonData constructor\n\t * @param {string} name - The name of this instance used by the internal mechanism.\n\t * @param {string} displayName - The name of this instance shown on the user interface, might be a localized string.\n\t */\n\tconstructor( name, displayName ) {\n\t\tsuper( name, displayName );\n\n\t\tthis[Icon] = '';\n\t\tthis[Tooltip] = undefined;\n\t\tthis[Toggleable] = false;\n\t\tthis[ClickHandler] = undefined;\n\t}\n\n\t/**\n\t * Button role.\n\t * @return {string}\n\t * @override\n\t */\n\tget role() {\n\t\treturn 'ui-ribbon-button';\n\t}\n\n\t/**\n\t * Button icon path.\n\t * @return {string} - Button icon full path or relative path.\n\t */\n\tget icon() {\n\t\treturn this[Icon];\n\t}\n\n\t/**\n\t * Button icon path.\n\t * @param {string} icon - Button icon full path or relative path.\n\t */\n\tset icon( icon ) {\n\t\tif( typeof icon !== 'string' ) throw 'Input type should be a string.';\n\n\t\tthis[Icon] = icon;\n\t}\n\n\t/**\n\t * Button tooltip data.\n\t * @return {RibbonTooltipData} - Ribbon button tooltip data.\n\t */\n\tget tooltip() {\n\t\treturn this[Tooltip];\n\t}\n\n\t/**\n\t * Button tooltip data.\n\t * @param {RibbonTooltipData} tooltip - Ribbon button tooltip data.\n\t */\n\tset tooltip( tooltip ) {\n\t\tif( !(tooltip instanceof RibbonTooltipData) )\n\t\t\tthrow 'Input data is not a type of RibbonTooltipData.';\n\n\t\tthis[Tooltip] = tooltip;\n\t}\n\n\t/**\n\t * Button toggleable state.\n\t * @return {bool} - If true, it repsents button is toggled currently.\n\t */\n\tget toggleable() {\n\t\treturn this[Toggleable];\n\t}\n\n\t/**\n\t * Button toggleable state.\n\t * @return {bool} [toggleable = false] - If true, it repsents button is toggled currently.\n\t */\n\tset toggleable( toggleable = false ) {\n\t\tthis[Toggleable] = ( toggleable === true );\n\t}\n\n\t/**\n\t * Button\tclick eveent handler.\n\t * @return {Function} - Click eveent handler.\n\t */\n\tget clickHandler() {\n\t\treturn this[ClickHandler];\n\t}\n\n\t/**\n\t * Button\tclick eveent handler.\n\t * @param {Function} handler - Click eveent handler.\n\t */\n\tset clickHandler( handler ) {\n\t\tif( !(handler instanceof Function) )\n\t\t\tthrow 'Input clicking handler is invalid.';\n\n\t\tthis[ClickHandler] = handler;\n\t}\n}\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport RibbonButtonData from './RibbonButtonData';\n\n/**\n * RibbonPushButtonData\n * @extends RibbonButtonData\n * @class\n */\nexport default class RibbonPushButtonData extends RibbonButtonData {\n\t/**\n\t * RibbonPushButtonData constructor\n\t * @param {string} name - The name of this instance used by the internal mechanism.\n\t * @param {string} displayName - The name of this instance shown on the user interface, might be a localized string.\n\t */\n\tconstructor( name, displayName ) {\n\t\tsuper( name, displayName );\n\t}\n\n\t/**\n\t * Button type.\n\t * @return {string} -\tButton type for identification.\n\t * @override\n\t */\n\tget type() {\n\t\treturn 'ui-ribbon-button-big';\n\t}\n}\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport RibbonPushButtonData from './RibbonPushButtonData';\n\n/**\n * RibbonToggleButtonData\n * @extends RibbonPushButtonData\n * @class\n */\nexport default class RibbonToggleButtonData extends RibbonPushButtonData {\n\t/**\n\t * RibbonToggleButtonData constructor\n\t * @param {string} name - The name of this instance used by the internal mechanism.\n\t * @param {string} displayName - The name of this instance shown on the user interface, might be a localized string.\n\t */\n\tconstructor( name, displayName ) {\n\t\tsuper( name, displayName );\n\t}\n\n\t/**\n\t * Button role.\n\t * @return {string}\n\t * @override\n\t */\n\tget role() {\n\t\treturn 'ui-ribbon-button-toggle';\n\t}\n\n\t/**\n\t * Button toggleable state.\n\t * @return {bool} - If true, it repsents button is toggled currently.\n\t * @override\n\t */\n\tget toggleable() {\n\t\treturn true;\n\t}\n}\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport React from 'react';\nimport ClassNames from 'classnames';\nimport RibbonItem from './RibbonItem';\nimport RibbonButton from './RibbonButton';\nimport RibbonPushButton from './RibbonPushButton';\nimport RibbonToggleButton from './RibbonToggleButton';\nimport RibbonItemData from './data/RibbonItemData';\nimport RibbonButtonData from './data/RibbonButtonData';\nimport RibbonPushButtonData from './data/RibbonPushButtonData';\nimport RibbonToggleButtonData from './data/RibbonToggleButtonData';\nimport { newGUID } from './utility';\n\nconst Items = Symbol( 'items' );\n\n/**\n * RibbonGroup\n * @extends RibbonItem\n * @class\n */\nexport default class RibbonGroup extends RibbonItem {\n\t/**\n\t * RibbonGroup constructor\n\t * @param {object} props - React component properties\n\t */\n\tconstructor( props ) {\n\t\tsuper( props );\n\n\t\tthis.state = Object.assign( this.state,\n\t\t\t{\n\t\t\t\titems: [].concat( props.items )\n\t\t\t});\n\n\t\tthis[Items] = [];\n\t}\n\n\t/**\n\t * Panel's children items\n\t * @return {[RibbonButtonData]} - Ribbon item data.\n\t */\n\tget items() {\n\t\treturn this[Items];\n\t}\n\n\t/**\n\t * Instance edis/en-able status.\n\t * @return {bool} - If false, make instance be disabled.\n\t */\n\tget enabled() {\n\t\treturn super.enabled;\n\t}\n\n\t/**\n\t * Instance edis/en-able status.\n\t * @param {bool} [enabled = true] - If false, make instance be disabled.\n\t */\n\tset enabled( enabled = true ) {\n\t\tif( this.hidden ) return;\n\n\t\tconst isEnabled = ( enabled === true );\n\t\tsuper.enabled = isEnabled;\n\n\t\t// Cascaded applying changes\n\t\tthis.items.map( ( item ) => {\n\t\t\titem.enabled = isEnabled;\n\t\t});\n\t}\n\n\t/**\n\t * Instance is hidden or not.\n\t * @return {bool} - If false, instance is going to disppear on the UI.\n\t */\n\tget hidden() {\n\t\treturn super.hidden;\n\t}\n\n\t/**\n\t * Instance is hidden or not.\n\t * @return {bool} [hidden = false]- If false, instance is going to disppear on the UI.\n\t */\n\tset hidden( hidden = false ) {\n\t\tconst isHidden = ( hidden === true );\n\t\tsuper.hidden = isHidden;\n\n\t\t// Cascaded applying changes\n\t\tthis.items.map( ( item ) => {\n\t\t\titem.hidden = isHidden;\n\t\t});\n\t}\n\n\t/**\n\t * Add new RibbonButton by given data.\n\t * @param {RibbonButtonData} itemData - Ribbon button data for creating new item in the RibbonGroup.\n\t * @return {RibbonButton} - Rendered RibbonButton component.\n\t */\n\taddItem( itemData ) {\n\t\tconst idx = this.items.findIndex( ( item ) => ( item.id == itemData.id || item.name === itemData.name ) );\n\t\tif( !(itemData instanceof RibbonButtonData) || idx !== -1 )\n\t\t\treturn console.log( '%c[RibbonGroup] Input itemData is invalid or duplicate.', 'color:red;' );\n\n\t\tconst items = this.state.items.concat( itemData );\n\n\t\tconst prop = { items };\n\t\tconst onStateChange = this.props.onStateChange;\n\t\tonStateChange && onStateChange( this.id, prop );\n\n\t\tthis.setState( prop );\n\n\t\treturn this.items[ this.items.length -1 ];\n\t}\n\n\tcomponentWillUpdate( nextProps, nextState ) {\n\t\tthis[Items].length = 0;\n\t}\n\n\trender() {\n\t\tconst scope = this;\n\t\tconst items = this.state.items;\n\n\t\tconst updateItem = ( id, data ) => {\n\t\t\tlet items = scope.state.items;\n\t\t\tconst item = items.find( ( item ) => item.id === id );\n\t\t\tif( !item ) return;\n\n\t\t\tObject.assign( item, data );\n\n\t\t\tconst prop = { items };\n\t\t\tconst onStateChange = scope.props.onStateChange;\n\t\t\tonStateChange && onStateChange( scope.id, prop );\n\n\t\t\tscope.setState( prop );\n\t\t};\n\n\t\tconst createItem = ( item ) => {\n\t\t\tlet result;\n\t\t\tswitch( item.type ) {\n\t\t\t\tcase 'ui-ribbon-button-big':\n\t\t\t\t\tconst RibbonPushButtonLike = ( item.role === 'ui-ribbon-button-toggle' ) ? RibbonToggleButton : RibbonPushButton;\n\t\t\t\t\tresult = (\n\t\t\t\t\t\t<RibbonPushButtonLike\n\t\t\t\t\t\t\tkey={ item.id }\n\t\t\t\t\t\t\tid={ item.id }\n\t\t\t\t\t\t\tname={ item.name }\n\t\t\t\t\t\t\tdisplayName={ item.displayName }\n\t\t\t\t\t\t\tenabled={ item.enabled }\n\t\t\t\t\t\t\thidden={ item.hidden }\n\t\t\t\t\t\t\ttype={ item.type }\n\t\t\t\t\t\t\tactived={ item.actived }\n\t\t\t\t\t\t\ticon={ item.icon }\n\t\t\t\t\t\t\ttooltip={ item.tooltip }\n\t\t\t\t\t\t\ttoggleable={ item.toggleable }\n\t\t\t\t\t\t\tclickHandler={ item.clickHandler }\n\t\t\t\t\t\t\tonStateChange={ updateItem }\n\t\t\t\t\t\t\tref={ ( c ) => { if( c ) scope.items.push( c ) } } />\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\treturn result;\n\t\t};\n\n\t\tconst dynCSS = ClassNames({\n\t\t\t'ui-ribbon-disabled': ( this.enabled === false ),\n\t\t\t'ui-ribbon-invisible': this.hidden\n\t\t});\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\tkey={ this.id }\n\t\t\t\tid={ this.id }\n\t\t\t\tclassName={ \"ui-ribbon-group ui-ribbon-inline \" + dynCSS }>\n\n\t\t\t\t{ items.map( createItem ) }\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nRibbonGroup.propTypes = {\n\tid: React.PropTypes.string.isRequired,\n\titems: React.PropTypes.arrayOf( React.PropTypes.instanceOf( RibbonButtonData ) ),\n\tonStateChange: React.PropTypes.func\n};\n\nRibbonGroup.defaultProps = {\n\tid: newGUID(),\n\titems: []\n};\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport React from 'react';\nimport ClassNames from 'classnames';\nimport RibbonGroup from './RibbonGroup';\nimport RibbonToggleButton from './RibbonToggleButton';\nimport RibbonToggleButtonData from './data/RibbonToggleButtonData';\nimport { newGUID } from './utility';\n\nconst Current = Symbol( 'current' );\nconst Default = Symbol( 'default' );\n\n/**\n * RibbonRadioButtonGroup\n * @extends RibbonGroup\n * @class\n */\nexport default class RibbonRadioButtonGroup extends RibbonGroup {\n\t/**\n\t * RibbonRadioButtonGroup constructor\n\t * @param {object} props - React component properties\n\t */\n\tconstructor( props ) {\n\t\tsuper( props );\n\n\t\tthis[Current] = undefined;\n\t\tthis[Default] = undefined;\n\t}\n\n\t/**\n\t * Current actived RibbonToggleButton.\n\t * @return {string} - RibbonToggleButton id.\n\t */\n\tget current() {\n\t\treturn this[Current];\n\t}\n\n\t/**\n\t * Current actived RibbonToggleButton.\n\t * @param {string} id - RibbonToggleButton id.\n\t */\n\tset current( id ) {\n\t\tconst current = this.items.find( ( item ) => item.id === id && item.enabled );\n\t\tif( !current ) throw '[RibbonRadioButtonGroup] Input id not exists or disabled.'\n\n\t\tcurrent.actived = true;\n\t\tthis[Current] = id;\n\n\t\tif( !this.default )\n\t\t\tthis.default = id;\n\n\t\tthis.items.map( ( item ) => {\n\t\t\tif( item.id !== id ) item.actived = false;\n\t\t});\n\t}\n\n\t/**\n\t * Default actived RibbonToggleButton.\n\t * @return {string} - RibbonToggleButton id.\n\t */\n\tget default() {\n\t\treturn this[Default];\n\t}\n\n\t/**\n\t * Default actived RibbonToggleButton.\n\t * @param {string} - RibbonToggleButton id.\n\t */\n\tset default( id ) {\n\t\tconst item = this.items.find( ( item ) => item.id === id && item.enabled );\n\t\tif( !item ) throw '[RibbonRadioButtonGroup] Input id not exists or disabled.'\n\n\t\tthis[Default] = id;\n\n\t\tif( !this.current )\n\t\t\tthis.current = id;\n\t}\n\n\t/**\n\t * Reset current item to the default.\n\t */\n\tresetCurrent() {\n\t\tthis.current = this.default;\n\t}\n\n\t/**\n\t * Add new RibbonToggleButton by given data.\n\t * @param {RibbonToggleButtonData} itemData - Ribbon button data for creating new item in the RibbonRadioButtonGroup.\n\t * @return {RibbonToggleButton} - Rendered RibbonToggleButton component.\n\t * @override\n\t */\n\taddItem( itemData ) {\n\t\tif( !(itemData instanceof RibbonToggleButtonData) )\n\t\t\treturn console.log( '%c[RibbonGroup] Input itemData is invalid or duplicate.', 'color:red;' );\n\n\t\tconst item = super.addItem( itemData );\n\n\t\tif( !this.default )\n\t\t\tthis.default = item.id;\n\n\t\treturn item;\n\t}\n\t\n\trender() {\n\t\tconst scope = this;\n\t\tconst items = this.state.items;\n\n\t\tconst updateCurrentItem = ( id ) => {\n\t\t\tif( typeof id !== 'string' ) return;\n\n\t\t\tscope.current = id;\n\t\t};\n\n\t\tconst updateItem = ( id, data ) => {\n\t\t\tlet items = scope.state.items;\n\t\t\tconst item = items.find( ( item ) => item.id === id );\n\t\t\tif( !item ) return;\n\n\t\t\tObject.assign( item, data );\n\n\t\t\tconst prop = { items };\n\t\t\tconst onStateChange = scope.props.onStateChange;\n\t\t\tonStateChange && onStateChange( scope.id, prop );\n\n\t\t\tscope.setState( prop );\n\t\t};\n\n\t\tconst createItem = ( item ) => {\n\t\t\treturn (\n\t\t\t\t<RibbonToggleButton\n\t\t\t\t\tkey={ item.id }\n\t\t\t\t\tid={ item.id }\n\t\t\t\t\tname={ item.name }\n\t\t\t\t\tdisplayName={ item.displayName }\n\t\t\t\t\tenabled={ item.enabled }\n\t\t\t\t\thidden={ item.hidden }\n\t\t\t\t\ttype={ item.type }\n\t\t\t\t\tactived={ item.actived }\n\t\t\t\t\ticon={ item.icon }\n\t\t\t\t\ttooltip={ item.tooltip }\n\t\t\t\t\ttoggleable={ item.toggleable }\n\t\t\t\t\tclickHandler={ item.clickHandler }\n\t\t\t\t\tonGroupCurrentChange={ () => { updateCurrentItem( item.id ) } }\n\t\t\t\t\tonStateChange={ updateItem }\n\t\t\t\t\tref={ ( c ) => { if( c ) scope.items.push( c ) } } />\n\t\t\t);\n\t\t};\n\n\t\tconst dynCSS = ClassNames({\n\t\t\t'ui-ribbon-disabled': ( this.enabled === false ),\n\t\t\t'ui-ribbon-invisible': this.hidden\n\t\t});\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\tkey={ this.id }\n\t\t\t\tid={ this.id }\n\t\t\t\tclassName={ \"ui-ribbon-group ui-ribbon-inline \" + dynCSS }>\n\n\t\t\t\t{ items.map( createItem ) }\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nRibbonGroup.propTypes = {\n\tid: React.PropTypes.string.isRequired,\n\titems: React.PropTypes.arrayOf( React.PropTypes.instanceOf( RibbonToggleButtonData ) ),\n\tonStateChange: React.PropTypes.func\n};\n\nRibbonGroup.defaultProps = {\n\tid: newGUID(),\n\titems: []\n};\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport RibbonItemData from './RibbonItemData';\n\nconst Items = Symbol( 'items' );\n\n/**\n * RibbonGroupData\n * @extends RibbonItemData\n * @class\n */\nexport default class RibbonGroupData extends RibbonItemData {\n\t/**\n\t * RibbonGroupData constructor\n\t * @param {string} name - The name of this instance used by the internal mechanism.\n\t * @param {string} displayName - The name of this instance shown on the user interface, might be a localized string.\n\t */\n\tconstructor( name, displayName ) {\n\t\tsuper( name, displayName );\n\n\t\tthis[Items] = [];\n\t}\n\t\n\t/**\n\t * Button type.\n\t * @return {string} -\tButton type for identification.\n\t * @override\n\t */\n\tget type() {\n\t\treturn 'ui-ribbon-group';\n\t}\n\t\n\t/**\n\t * Panel's children items.\n\t * @return {RibbonItemData[]} - Ribbon item data.\n\t */\n\tget items() {\n\t\treturn this[Items];\n\t}\n\n\t/**\n\t * Panel's children items.\n\t * @return {RibbonItemData[]} [items = []]- Ribbon item data.\n\t */\n\tset items( items = [] ) {\n\t\tthis[Items] = items;\n\t}\n}\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport RibbonGroupData from './RibbonGroupData';\n\n/**\n * RibbonRadioButtonGroupData\n * @extends RibbonGroupData\n * @class\n */\nexport default class RibbonRadioButtonGroupData extends RibbonGroupData {\n\t/**\n\t * RibbonRadioButtonGroupData constructor\n\t * @param {string} name - The name of this instance used by the internal mechanism.\n\t * @param {string} displayName - The name of this instance shown on the user interface, might be a localized string.\n\t */\n\tconstructor( name, displayName ) {\n\t\tsuper( name, displayName );\n\t}\n\t\n\t/**\n\t * Button type.\n\t * @return {string} -\tButton type for identification.\n\t * @override\n\t */\n\tget type() {\n\t\treturn 'ui-ribbon-radio-group';\n\t}\n}\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport React from 'react';\nimport ClassNames from 'classnames';\nimport RibbonBase from './RibbonBase';\nimport RibbonItem from './RibbonItem';\nimport RibbonButton from './RibbonButton';\nimport RibbonPushButton from './RibbonPushButton';\nimport RibbonToggleButton from './RibbonToggleButton';\nimport RibbonGroup from './RibbonGroup';\nimport RibbonRadioButtonGroup from './RibbonRadioButtonGroup';\nimport RibbonItemData from './data/RibbonItemData';\nimport RibbonButtonData from './data/RibbonButtonData';\nimport RibbonPushButtonData from './data/RibbonPushButtonData';\nimport RibbonToggleButtonData from './data/RibbonToggleButtonData';\nimport RibbonGroupData from './data/RibbonGroupData';\nimport RibbonRadioButtonGroupData from './data/RibbonRadioButtonGroupData';\nimport { newGUID } from './utility';\n\nconst Items = Symbol( 'items' );\n\n/**\n * RibbonPanel\n * @extends RibbonBase\n * @class\n */\nexport default class RibbonPanel extends RibbonBase {\n\t/**\n\t * RibbonPanel constructor\n\t * @param {object} props - React component properties\n\t */\n\tconstructor( props ) {\n\t\tsuper( props );\n\n\t\tthis.state = Object.assign( this.state,\n\t\t\t{\n\t\t\t\titems: [].concat( props.items )\n\t\t\t});\n\n\t\tthis[Items] = [];\n\t}\n\n\t/**\n\t * Panel has seperator or not.\n\t * @return {bool} - If true, panel will be seperated with other panels by a panel seperator.\n\t */\n\tget seperator() {\n\t\treturn this.props.seperator;\n\t}\n\n\t/**\n\t * Panel's children items\n\t * @return {[RibbonItemData]} - Ribbon item data.\n\t */\n\tget items() {\n\t\treturn this[Items];\n\t}\n\n\t/**\n\t * Instance edis/en-able status.\n\t * @return {bool} - If false, make instance be disabled.\n\t */\n\tget enabled() {\n\t\treturn super.enabled;\n\t}\n\n\t/**\n\t * Instance edis/en-able status.\n\t * @param {bool} [enabled = true] - If false, make instance be disabled.\n\t */\n\tset enabled( enabled = true ) {\n\t\tif( this.hidden ) return;\n\n\t\tconst isEnabled = ( enabled === true );\n\t\tsuper.enabled = isEnabled;\n\n\t\t// Cascaded applying changes\n\t\tthis.items.map( ( item ) => {\n\t\t\titem.enabled = isEnabled;\n\t\t});\n\t}\n\n\t/**\n\t * Instance is hidden or not.\n\t * @return {bool} - If false, instance is going to disppear on the UI.\n\t */\n\tget hidden() {\n\t\treturn super.hidden;\n\t}\n\n\t/**\n\t * Instance is hidden or not.\n\t * @return {bool} [hidden = false]- If false, instance is going to disppear on the UI.\n\t */\n\tset hidden( hidden = false ) {\n\t\tconst isHidden = ( hidden === true );\n\t\tsuper.hidden = isHidden;\n\n\t\t// Cascaded applying changes\n\t\tthis.items.map( ( item ) => {\n\t\t\titem.hidden = isHidden;\n\t\t});\n\t}\n\n\t/**\n\t * Add new RibbonItem by given data.\n\t * @param {RibbonItemData} itemData - Ribbon item data for creating new item on the panel.\n\t * @return {RibbonItem} - Rendered RibbonItem component.\n\t */\n\taddItem( itemData ) {\n\t\tconst idx = this.items.findIndex( ( item ) => ( item.id == itemData.id || item.name === itemData.name ) );\n\t\tif( !(itemData instanceof RibbonItemData) || idx !== -1 )\n\t\t\treturn console.log( '%c[RibbonPanel] Input itemData is invalid or duplicate.', 'color:red;' );\n\n\t\tconst items = this.state.items.concat( itemData );\n\n\t\tconst prop = { items };\n\t\tconst onStateChange = this.props.onStateChange;\n\t\tonStateChange && onStateChange( this.id, prop );\n\n\t\tthis.setState( prop );\n\n\t\treturn this.items[ this.items.length -1 ];\n\t}\n\n\tcomponentWillUpdate( nextProps, nextState ) {\n\t\tthis[Items].length = 0;\n\t}\n\n\trender() {\n\t\tconst scope = this;\n\t\tconst items = this.state.items;\n\n\t\tconst outerDynCSS = ClassNames({\n\t\t\t'ui-ribbon-disabled': ( this.enabled === false ),\n\t\t\t'ui-ribbon-invisible': this.hidden,\n\t\t\t'ui-ribbon-inline': ( this.hidden === false )\n\t\t});\n\n\t\tconst innerDynCSS = ClassNames({\n\t\t\t'ui-ribbon-empty': ( items.length === 0 ),\n\t\t\t'ui-riibon-panel-single-btn': ( items.length === 1 ),\n\t\t});\n\n\t\tconst legendDynCSS = ClassNames({\n\t\t\t'ui-ribbon-disabled': ( this.enabled === false )\n\t\t});\n\n\t\tconst updateItem = ( id, data ) => {\n\t\t\tlet items = scope.state.items;\n\t\t\tconst item = items.find( ( item ) => item.id === id );\n\t\t\tif( !item ) return;\n\n\t\t\tObject.assign( item, data );\n\n\t\t\tconst prop = { items };\n\t\t\tconst onStateChange = scope.props.onStateChange;\n\t\t\tonStateChange && onStateChange( scope.id, prop );\n\n\t\t\tscope.setState( prop );\n\t\t};\n\n\t\tconst createItem = ( item ) => {\n\t\t\tlet result;\n\t\t\tswitch( item.type ) {\n\t\t\t\tcase 'ui-ribbon-radio-group':\n\t\t\t\tcase 'ui-ribbon-group':\n\t\t\t\t\tconst RibbonGroupLike = ( item.type === 'ui-ribbon-group' ) ? RibbonGroup : RibbonRadioButtonGroup;\n\t\t\t\t\tresult = (\n\t\t\t\t\t\t<RibbonGroupLike\n\t\t\t\t\t\t\tkey={ item.id }\n\t\t\t\t\t\t\tid={ item.id }\n\t\t\t\t\t\t\tname={ item.name }\n\t\t\t\t\t\t\tdisplayName={ item.displayName }\n\t\t\t\t\t\t\tenabled={ item.enabled }\n\t\t\t\t\t\t\thidden={ item.hidden }\n\t\t\t\t\t\t\ttype={ item.type }\n\t\t\t\t\t\t\titems={ item.items }\n\t\t\t\t\t\t\tactived={ item.actived }\n\t\t\t\t\t\t\tonStateChange={ updateItem }\n\t\t\t\t\t\t\tref={ ( c ) => { if( c ) scope.items.push( c ) } } />\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'ui-ribbon-button-big':\n\t\t\t\t\tconst RibbonPushButtonLike = ( item.role === 'ui-ribbon-button-toggle' ) ? RibbonToggleButton : RibbonPushButton;\n\t\t\t\t\tresult = (\n\t\t\t\t\t\t<RibbonPushButtonLike\n\t\t\t\t\t\t\tkey={ item.id }\n\t\t\t\t\t\t\tid={ item.id }\n\t\t\t\t\t\t\tname={ item.name }\n\t\t\t\t\t\t\tdisplayName={ item.displayName }\n\t\t\t\t\t\t\tenabled={ item.enabled }\n\t\t\t\t\t\t\thidden={ item.hidden }\n\t\t\t\t\t\t\ttype={ item.type }\n\t\t\t\t\t\t\tactived={ item.actived }\n\t\t\t\t\t\t\ticon={ item.icon }\n\t\t\t\t\t\t\ttooltip={ item.tooltip }\n\t\t\t\t\t\t\ttoggleable={ item.toggleable }\n\t\t\t\t\t\t\tclickHandler={ item.clickHandler }\n\t\t\t\t\t\t\tonStateChange={ updateItem }\n\t\t\t\t\t\t\tref={ ( c ) => { if( c ) scope.items.push( c ) } } />\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\treturn result;\n\t\t};\n\n\t\tconst createSeperator = ( seperator = true ) => {\n\t\t\tif( seperator )\n\t\t\t\treturn(\n\t\t\t\t\t<div className=\"ui-ribbon-panel-seperator ui-ribbon-relative ui-ribbon-inline\"></div>\n\t\t\t\t);\n\t\t};\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\tkey={ this.id }\n\t\t\t\tclassName={ \"ui-ribbon-panel-container ui-ribbon-relative \" + outerDynCSS }>\n\t\t\t\t{ createSeperator( this.seperator ) }\n\n\t\t\t\t<div className={ \"ui-ribbon-panel ui-ribbon-relative ui-ribbon-inline \" + innerDynCSS }>\n\t\t\t\t\t<div className=\"ui-ribbon-panel-contents\">\n\t\t\t\t\t\t{ items.map( createItem ) }\n\n\t\t\t\t\t\t<div className={ \"ui-ribbon-panel-legend ui-ribbon-absolute \" + legendDynCSS }>\n\t\t\t\t\t\t\t{ this.displayName }\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nRibbonPanel.propTypes = {\n\tid: React.PropTypes.string.isRequired,\n\tseperator: React.PropTypes.bool,\n\titems: React.PropTypes.arrayOf( React.PropTypes.instanceOf( RibbonItemData ) ),\n\tonStateChange: React.PropTypes.func\n};\n\nRibbonPanel.defaultProps = {\n\tid: newGUID(),\n\tseperator: true,\n\titems: []\n};\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport RibbonBaseData from './RibbonBaseData';\n\nconst Seperator = Symbol( 'seperator' );\nconst Items = Symbol( 'items' );\n\n/**\n * RibbonPanelData\n * @extends RibbonBaseData\n * @class\n */\nexport default class RibbonPanelData extends RibbonBaseData {\n\t/**\n\t * RibbonPanelData constructor\n\t * @param {string} name - The name of this instance used by the internal mechanism.\n\t * @param {string} displayName - The name of this instance shown on the user interface, might be a localized string.\n\t */\n\tconstructor( name, displayName ) {\n\t\tsuper( name, displayName );\n\n\t\tthis[Seperator] = true;\n\t\tthis[Items] = [];\n\t}\n\n\t/**\n\t * Panel has seperator or not.\n\t * @return {bool} - If true, panel will be seperated with other panels by a panel seperator.\n\t */\n\tget seperator() {\n\t\treturn this[Seperator];\n\t}\n\n\t/**\n\t * Panel has seperator or not.\n\t * @param {bool} [seperator = true] - If true, panel will be seperated with other panels by a panel seperator.\n\t */\n\tset seperator( seperator = true ) {\n\t\tthis[Seperator] = ( seperator === true );\n\t}\n\n\t/**\n\t * Panel's children items.\n\t * @return {RibbonItemData[]} - Ribbon item data.\n\t */\n\tget items() {\n\t\treturn this[Items];\n\t}\n\n\t/**\n\t * Panel's children items.\n\t * @return {RibbonItemData[]} [items = []]- Ribbon item data.\n\t */\n\tset items( items = [] ) {\n\t\tthis[Items] = items;\n\t}\n}\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport React from 'react';\nimport ClassNames from 'classnames';\nimport RibbonBase from './RibbonBase';\nimport RibbonPanel from './RibbonPanel';\nimport RibbonPanelData from './data/RibbonPanelData';\nimport { newGUID } from './utility';\n\nconst Panels = Symbol( 'panels' );\n\n/**\n * RibbonTab\n * @extends RibbonBase\n * @class\n */\nexport default class RibbonTab extends RibbonBase {\n\t/**\n\t * RibbonTab constructor\n\t * @param {object} props - React component properties\n\t */\n\tconstructor( props ) {\n\t\tsuper( props );\n\n\t\tlet actived = ( props.actived === true );\n\n\t\tthis.state = Object.assign( this.state,\n\t\t\t{\n\t\t\t\tactived: actived,\n\t\t\t\tpanels: [].concat( props.panels )\n\t\t\t});\n\n\t\tthis[Panels] = [];\n\n\t\tthis.handleClick = this.handleClick.bind( this );\n\t}\n\n\t/**\n\t * Tab type.\n\t * @return {string} - Tab type for identification.\n\t */\n\tget type() {\n\t\treturn this.props.type;\n\t}\n\n\t/**\n\t * Instance edis/en-able status.\n\t * @return {bool} - If false, make instance be disabled.\n\t */\n\tget enabled() {\n\t\treturn super.enabled;\n\t}\n\n\t/**\n\t * Instance edis/en-able status.\n\t * @param {bool} [enabled = true] - If false, make instance be disabled.\n\t */\n\tset enabled( enabled = true ) {\n\t\tif( this.hidden ) return;\n\n\t\tconst isEnabled = ( enabled === true );\n\n\t\tconst prop = { enabled: isEnabled, actived: false };\n\t\tconst onStateChange = this.props.onStateChange;\n\t\tonStateChange && onStateChange( this.id, prop );\n\n\t\t// Cascaded applying changes\n\t\tthis.panels.map( ( panel ) => {\n\t\t\tpanel.enabled = isEnabled;\n\t\t});\n\n\t\tthis.setState( prop );\n\t}\n\n\t/**\n\t * Instance is hidden or not.\n\t * @return {bool} - If false, instance is going to disppear on the UI.\n\t */\n\tget hidden() {\n\t\treturn super.hidden;\n\t}\n\n\t/**\n\t * Instance is hidden or not.\n\t * @return {bool} [hidden = false]- If false, instance is going to disppear on the UI.\n\t */\n\tset hidden( hidden = false ) {\n\t\tconst isHidden = ( hidden === true );\n\t\tconst isEnabled = !isHidden;\n\n\t\tconst prop = { hidden: isHidden, enabled: isEnabled, actived: false };\n\t\tconst onStateChange = this.props.onStateChange;\n\t\tonStateChange && onStateChange( this.id, prop );\n\n\t\t// Cascaded applying changes\n\t\tthis.panels.map( ( panel ) => {\n\t\t\tpanel.hidden = isHidden;\n\t\t});\n\n\t\tthis.setState( prop );\n\t}\n\n\t/**\n\t * Tab actived state.\n\t * @return {bool} - If true, it repsents tab is selected currently.\n\t */\n\tget actived() {\n\t\treturn this.state.actived;\n\t}\n\n\t/**\n\t * Tab actived state.\n\t * @return {bool} [actived = false] - If true, it repsents tab is selected currently.\n\t */\n\tset actived( actived = false ) {\n\t\tconst isActived = ( actived === true );\n\t\tconst prop = { actived: isActived };\n\n\t\tconst onStateChange = this.props.onStateChange;\n\t\tonStateChange && onStateChange( this.id, prop );\n\n\t\tthis.setState( prop );\n\t}\n\n\t/**\n\t * Tab's children panels\n\t * @return {[RibbonPanelData]} - Ribbon panel data.\n\t */\n\tget panels() {\n\t\treturn this[Panels];\n\t}\n\n\t/**\n\t * Add new panel by given data.\n\t * @param {RibbonPanelData} panelData - Ribbon panel data for creating new panel.\n\t * @return {RibbonPanel} - Rendered RibbonPanel component.\n\t */\n\taddPanel( panelData ) {\n\t\tconst idx = this.panels.findIndex( ( panel ) => ( panel.id == panelData.id || panel.name === panelData.name ) );\n\t\tif( !(panelData instanceof RibbonPanelData) || idx !== -1 )\n\t\t\treturn console.log( '%c[RibbonTab] Input panelData is invalid or duplicate.', 'color:red;' );\n\n\t\tpanelData.seperator = ( this.panels.length !== 0 );\n\t\tconst panels = this.state.panels.concat( panelData );\n\n\t\tconst prop = { panels };\n\t\tconst onStateChange = this.props.onStateChange;\n\t\tonStateChange && onStateChange( this.id, prop );\n\n\t\tthis.setState( prop );\n\n\t\treturn this.panels[ this.panels.length -1 ];\n\t}\n\n\tcomponentWillUpdate( nextProps, nextState ) {\n\t\tthis[Panels].length = 0;\n\t}\n\n\t/**\n\t * Tab clicking event handler\n\t */\n\thandleClick() {\n\t\tif( this.type === 'ui-ribbon-tab-application' ) return;\n\n\t\tconst onClick = this.props.onClick;\n\t\tonClick && onClick( this.id );\n\t}\n\n\trender() {\n\t\tconst scope = this;\n\t\tconst panels = this.state.panels;\n\t\tconst dynCSS = ClassNames({\n\t\t\t'ui-ribbon-active': this.actived,\n\t\t\t'ui-ribbon-disabled': ( this.enabled === false ),\n\t\t\t'ui-ribbon-invisible': this.hidden,\n\t\t\t'ui-ribbon-inline': ( this.hidden === false )\n\t\t});\n\n\t\tconst updatePanel = ( id, data ) => {\n\t\t\tlet panels = scope.state.panels;\n\t\t\tconst panel = panels.find( ( panel ) => panel.id === id );\n\t\t\tif( !panel ) return;\n\n\t\t\tObject.assign( panel, data );\n\n\t\t\tconst prop = { panels };\n\t\t\tconst onStateChange = scope.props.onStateChange;\n\t\t\tonStateChange && onStateChange( scope.id, prop );\n\n\t\t\tscope.setState( prop );\n\t\t};\n\n\t\tconst createPanel = ( panel ) => {\n\t\t\treturn (\n\t\t\t\t<RibbonPanel\n\t\t\t\t\tkey={ panel.id }\n\t\t\t\t\tid={ panel.id }\n\t\t\t\t\tname={ panel.name }\n\t\t\t\t\tdisplayName={ panel.displayName }\n\t\t\t\t\tenabled={ panel.enabled }\n\t\t\t\t\thidden={ panel.hidden }\n\t\t\t\t\tseperator={ panel.seperator }\n\t\t\t\t\titems={ panel.items }\n\t\t\t\t\tonStateChange={ updatePanel }\n\t\t\t\t\tref={ ( c ) => { if( c ) scope.panels.push( c ) } } />\n\t\t\t);\n\t\t};\n\n\t\treturn (\n\t\t\t<li\n\t\t\t\tkey={ this.id }\n\t\t\t\tid={ this.id }\n\t\t\t\tclassName={ this.type + \" \" + dynCSS }\n\t\t\t\trole=\"ui-ribbon-tab\"\n\t\t\t\tonClick={ this.handleClick } >\n\n\t\t\t\t<span className=\"ui-ribbon-uppercase\">{ this.displayName }</span>\n\t\t\t\t<div className=\"ui-ribbon-tab-contents ui-ribbon-absolute\">\n\t\t\t\t\t{ panels.map( createPanel ) }\n\t\t\t\t</div>\n\t\t\t</li>\n\t\t);\n\t}\n}\n\nRibbonTab.propTypes = {\n\tid: React.PropTypes.string.isRequired,\n\ttype: React.PropTypes.string.isRequired,\n\tactived: React.PropTypes.bool,\n\tpanels: React.PropTypes.arrayOf( React.PropTypes.instanceOf( RibbonPanelData ) ),\n\tonStateChange: React.PropTypes.func\n};\n\nRibbonTab.defaultProps = {\n\tid: newGUID(),\n\ttype: 'ui-ribbon-tab-normal',\n\tactived: false,\n\tpanels: []\n};\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport React from 'react';\nimport RibbonTabData from './data/RibbonTabData';\nimport RibbonAppTabData from './data/RibbonAppTabData';\nimport RibbonTitlebarData from './data/RibbonTitlebarData';\nimport RibbonTitlebar from './RibbonTitlebar';\nimport RibbonTab from './RibbonTab';\nimport { newGUID } from './utility';\n\nconst Tabs = Symbol( 'tabs' );\n\n/**\n * Ribbon\n * @extends React.Component\n * @class\n */\nexport default class Ribbon extends React.Component {\n\t/**\n\t * RibbonBase constructor\n\t * @param {object} props - React component properties\n\t */\n\tconstructor( props ) {\n\t\tsuper( props );\n\n\t\tlet appTab = new RibbonAppTabData();\n\t\tlet tabs = [ appTab ].concat( props.tabs );\n\t\tlet titlebar = new RibbonTitlebarData();\n\n\t\tthis.state = {\n\t\t\ttabs: tabs,\n\t\t\ttitlebar: titlebar\n\t\t};\n\n\t\tthis[Tabs] = [];\n\n\t\tthis.handleTabClick = this.handleTabClick.bind( this );\n\t}\n\n\t/**\n\t * Content tabs\n\t * @return {RibbonTab[]} - Array of RibbonTabs.\n\t */\n\tget tabs() {\n\t\treturn this[Tabs];\n\t}\n\n\t/**\n\t * Toggle to show or hide app titlebar.\n\t */\n\ttoggleAppTitle() {\n\t\tthis.refs.titlebar.toggleDisplay();\n\t}\n\n\t/**\n\t * Add new tab by given data.\n\t * @param {RibbonTabData} tabData - Ribbon tab data for creating new tab.\n\t * @return {RibbonTab} - Rendered RibbonTab component.\n\t */\n\taddTab( tabData ) {\n\t\tconst idx = this.tabs.findIndex( ( tab ) => ( tab.id == tabData.id || tab.name === tabData.name ) );\n\t\tif( !(tabData instanceof RibbonTabData) || idx !== -1 )\n\t\t\treturn console.log( '%c[Ribbon] Input tabData is invalid or duplicate.', 'color:red;' );\n\n\t\ttabData.actived = ( this.tabs.length === 1 );\n\t\tconst tabs = this.state.tabs.concat( tabData );\n\t\tthis.setState({ tabs });\n\n\t\treturn this.tabs[ this.tabs.length - 1 ];\n\t}\n\n\t/**\n\t * Active target tab by given id.\n\t * @param {string} tabId - Tab Id.\n\t */\n\tactiveTabById( tabId ) {\n\t\tif( typeof tabId !== 'string' ) return console.log( '%c[Ribbon] TabId should be a string.', 'color:red;' );\n\n\t\tconst tab = this.tabs.find( ( tab ) => tab.id === tabId );\n\t\tif( !tab ) throw '[Ribbon] Input tab id not exists.';\n\n\t\ttab.actived = true;\n\t}\n\n\t/**\n\t * Tab clicking event handler\n\t */\n\thandleTabClick( tabId ) {\n\t\tthis.activeTabById( tabId );\n\t}\n\n\tcomponentWillUpdate( nextProps, nextState ) {\n\t\tthis[Tabs].length = 0;\n\t}\n\n\trender() {\n\t\tconst scope = this;\n\t\tconst otherTabs = this.state.tabs;//.slice( 1 );\n\n\t\tconst updateTitlebar = ( id, data ) => {\n\t\t\tlet titlebar = scope.state.titlebar;\n\n\t\t\tif( titlebar.id !== id ) return;\n\n\t\t\tObject.assign( titlebar, data );\n\t\t\tscope.setState({ titlebar });\n\t\t};\n\t\t\n\t\tconst createTitleBar = () => {\n\t\t\tconst data = scope.state.titlebar;\n\t\t\treturn (\n\t\t\t\t<RibbonTitlebar\n\t\t\t\t\tkey={ data.id }\n\t\t\t\t\tid={ data.id }\n\t\t\t\t\tname={ data.name }\n\t\t\t\t\tdisplayName={ data.title }\n\t\t\t\t\tenabled={ data.enabled }\n\t\t\t\t\thidden={ data.hidden }\n\t\t\t\t\tref=\"titlebar\"\n\t\t\t\t\tonStateChange={ updateTitlebar } />\n\t\t\t);\n\t\t};\n\n\t\tconst nextOpt = ( id, data ) => {\n\t\t\t// For de/activating tab by changing tab's actived property.\n\t\t\tif( data.hasOwnProperty( 'actived' ) ) {\n\t\t\t\tif( data.actived === true ) {\n\t\t\t\t\tscope.tabs.map( ( tab ) => {\n\t\t\t\t\t\tif( tab.id !== id ) tab.actived = false;\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\t// For activing other tab while current tab is diabled.\n\t\t\t\t\tif( data.hasOwnProperty( 'enabled' ) && ( data.enabled === false ) ) {\n\t\t\t\t\t\tconst tab = scope.tabs.find( ( tab ) => ( tab.id !== id && tab.enabled === true && tab.type !== 'ui-ribbon-tab-application' ) );\n\t\t\t\t\t\tif( !tab ) return;\n\n\t\t\t\t\t\ttab.actived = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tconst updateTab = ( id, data ) => {\n\t\t\tlet tabs = scope.state.tabs;\n\t\t\tconst tab = tabs.find( ( tab ) => tab.id === id );\n\t\t\tif( !tab ) return;\n\n\t\t\tObject.assign( tab, data );\n\t\t\tscope.setState({ tabs });\n\n\t\t\tnextOpt( id, data );\n\t\t};\n\n\t\tconst createTab = ( tab ) => {\n\t\t\treturn (\n\t\t\t\t<RibbonTab\n\t\t\t\t\tkey={ tab.id }\n\t\t\t\t\tid={ tab.id }\n\t\t\t\t\tname={ tab.name }\n\t\t\t\t\tdisplayName={ tab.displayName }\n\t\t\t\t\ttype={ tab.type }\n\t\t\t\t\tenabled={ tab.enabled }\n\t\t\t\t\thidden={ tab.hidden }\n\t\t\t\t\tactived={ tab.actived }\n\t\t\t\t\tpanels={ tab.panels }\n\t\t\t\t\tonClick={ scope.handleTabClick }\n\t\t\t\t\tonStateChange={ updateTab }\n\t\t\t\t\tref={ ( c ) => { if( c ) scope.tabs.push( c ) } } />\n\t\t\t);\n\t\t};\n\n\t\treturn (\n\t\t\t<div id=\"RibbonUI\">\n\t\t\t\t{ createTitleBar() }\n\t\t\t\t<div className=\"ui-ribbon-window\">\n\t\t\t\t\t<div id=\"ui-ribbon-main\" className=\"ui-ribbon-main ui-ribbon-border-bottom\">\n\t\t\t\t\t\t<div className=\"ui-ribbon-tab-container ui-ribbon-border-bottom\">\n\t\t\t\t\t\t\t<ul role=\"ui-ribbon-tabs\" className=\"ui-ribbon-nowrap ui-ribbon-nopadding ui-ribbon-nomargin\">\n\t\t\t\t\t\t\t\t{ otherTabs.map( createTab ) }\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nRibbon.propTypes = {\n\tid: React.PropTypes.string.isRequired,\n\ttabs: React.PropTypes.arrayOf( React.PropTypes.instanceOf( RibbonTabData ) )\n};\n\nRibbon.defaultProps = {\n\tid: newGUID(),\n\ttabs: []\n};\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport Ribbon from './Ribbon';\n\nconst RibbonInst = Symbol( 'ribbon' );\nconst Options = Symbol( 'options' );\n\n/**\n * RibbonTask\n * @class\n * @classdesc For bulk creating or modifying Ribbon contents.\n */\nexport default class RibbonTask {\n\t/**\n\t * RibbonTask constructor.\n\t * @param {Ribbon} ribbon - Rendered Ribbon component.\n\t * @param {object} options - Task options.\n\t */\n\tconstructor( ribbon, options ) {\n\t\tif( !(ribbon instanceof Ribbon ) ) throw 'No Ribbon instance available.';\n\n\t\tthis[RibbonInst] = ribbon;\n\t\tthis[Options] = options;\n\t}\n\n\t/**\n\t * Rendered Ribbon component.\n\t * @return {Ribbon}\n\t */\n\tget ribbon() {\n\t\treturn this[RibbonInst];\n\t}\n\n\t/**\n\t * Task options.\n\t * @return {object}\n\t */\n\tget options() {\n\t\treturn this[Options];\n\t}\n\n\t/**\n\t * Execute task content.\n\t * @return {bool} If true, it represents this task was executed by the Ribbon.\n\t */\n\texecute() {\n\t\treturn true;\n\t}\n\n\t/**\n\t * Discard all changes.\n\t * @return {bool} If true, it represents changes made by this task was removed from the Ribbon.\n\t */\n\tdiscard() {\n\t\treturn true;\n\t}\n}\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport RibbonTask from './RibbonTask';\n\n/**\n * Registered RibbonTask.\n * @private {RibbonTask[]}\n */\nconst Tasks = Symbol( 'tasks' );\n\n/**\n * Check wether input class is instance of RibbonTask or not.\n * @param {RibbonTask} task\n * @return {bool} - If true, it reprents task is a instance of the RibbonTask.\n */\nconst checkTaskType = ( task ) => {\n\tif( task.prototype instanceof RibbonTask ) return true;\n\treturn false;\n};\n\n/**\n * RibbonTaskManager\n * @class\n * @classdesc Task manager class for Ribbon UI.\n */\nexport default class RibbonTaskManager {\n\t/**\n\t * RibbonTaskManager constructor\n\t */\n\tconstructor() {\n\t\tthis[Tasks] = {};\n\n\t\tcheckTaskType.bind( this );\n\t}\n\n\t/**\n\t * All registered RibbonTask.\n\t * @return {RibbonTask[]}\n\t */\n\tget tasks() {\n\t\treturn this[Tasks];\n\t}\n\n\t/**\n\t * Register RibbonTask.\n\t * @param {string} taskId - Task Identification.\n\t * @param {RibbonTask} task - Content instance of RibbonTask.\n\t * @return {bool} - If task is not type of RibbonTask or registered, it will return false.\n\t */\n\tregister( taskId, task ) {\n\t\tif( !checkTaskType( task ) || this.getTask( taskId ) ) return false;\n\n\t\tthis[Tasks][taskId] = task;\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Unregister RibbonTask.\n\t * @param {string} taskId - Task Identification.\n\t * @return {bool} - If task is not registered, it will return false.\n\t */\n\tunregister( taskId ) {\n\t\tif( !this.getTask( taskId ) ) return false;\n\n\t\tdelete this[Tasks][taskId];\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Get registered task by given id.\n\t * @param {string} taskId - Task Identification.\n\t * @return {null | RibbonTask} - Return task definition if task is existed.\n\t */\n\tgetTask( taskId ) {\n\t\tif( this.tasks.hasOwnProperty( taskId ) ) {\n\t\t\treturn this.tasks[ taskId ];\n\t\t}\n\t\treturn null;\n\t}\n}\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport Ribbon from './Ribbon';\nimport RibbonTaskManager from './RibbonTaskManager';\n\nconst RibbonInst = Symbol( 'ribbon' );\nconst Tasks = Symbol( 'tasks' );\nconst TaskManager = Symbol( 'taskManager' );\n\n/**\n * RibbonTaskExecuter\n * @class\n * @classdesc\tClass for executing tasks to create or modify Ribbon contents.\n */\nexport default class RibbonTaskExecuter {\n\t/**\n\t * RibbonTaskExecuter constructor.\n\t * @param {Ribbon} ribbon - Rendered Ribbon component.\n\t * @param {RibbonTaskManager} taskManager -\tRibbonTaskManager instance.\n\t */\n\tconstructor( ribbon, taskManager ) {\n\t\tif( !(ribbon instanceof Ribbon ) ) throw 'No Ribbon instance available.';\n\t\tif( !(taskManager instanceof RibbonTaskManager ) ) throw 'No RibbonTaskManager instance available.';\n\n\t\tthis[RibbonInst] = ribbon;\n\t\tthis[TaskManager] = taskManager;\n\t\tthis[Tasks] = {};\n\t}\n\n\t/**\n\t * Rendered Ribbon component.\n\t * @return {Ribbon}\n\t */\n\tget ribbon() {\n\t\treturn this[RibbonInst];\n\t}\n\n\t/**\n\t * Task\tmanager instance.\n\t * @return {RibbonTaskManager}\n\t */\n\tget manager() {\n\t\treturn this[TaskManager];\n\t}\n\n\t/**\n\t * All executed tasks.\n\t * @return {RibbonTask[]}\n\t */\n\tget tasks() {\n\t\treturn this[Tasks];\n\t}\n\n\t/**\n\t * Execute registered task.\n\t * @param {string} taskId - Task Identification.\n\t * @return {bool} - If task is not registered or failed to execute, it will return false.\n\t */\n\texecute( taskId, options ) {\n\t\tlet result = false;\n\n\t\tif( !this.getTask( taskId ) ) {\n\t\t\tconst taskClass = this.manager.getTask( taskId );\n\n\t\t\tif( taskClass ) {\n\t\t\t\tconst task = new taskClass( this.ribbon, options );\n\t\t\t\tresult = task.execute();\n\n\t\t\t\tif( result === true ) {\n\t\t\t\t\tthis[Tasks][taskId] = task;\n\n\t\t\t\t\tconsole.log( '[RibbonTaskExecuter] Task executed: `%s`.', taskId );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.log( '[RibbonTaskExecuter] Task not found: `%s`.', taskId );\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.log( '[RibbonTaskExecuter] Task already executed: `%s`.', taskId );\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Discard executed task.\n\t * @param {string} taskId - Task Identification.\n\t * @return {bool} - If task is not registered or failed to discard changes, it will return false.\n\t */\n\tdiscard( taskId ) {\n\t\tlet result = false;\n\t\tconst task = this.getTask( taskId );\n\n\t\tif( !task ) {\n\t\t\tconsole.log( '[RibbonTaskExecuter] Task not found: `%s`.', taskId );\n\t\t} else {\n\t\t\tresult = task.discard();\n\t\t\tif( !result ) throw 'Failed to discard chnages in task: `' + taskId + '`.';\n\n\t\t\tdelete this[Tasks][taskId];\n\t\t\tconsole.log( '[RibbonTaskExecuter] Task content discarded: `%s`.', taskId );\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Get executed task by given id.\n\t * @param {string} taskId - Task Identification.\n\t * @return {null | RibbonTask} - Return task definition if task is existed.\n\t */\n\tgetTask( taskId ) {\n\t\tif( this.tasks.hasOwnProperty( taskId ) ) {\n\t\t\treturn this.tasks[ taskId ];\n\t\t}\n\n\t\treturn null;\n\t}\n}\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Ribbon from './Ribbon';\nimport RibbonTaskManager from './RibbonTaskManager';\nimport RibbonTaskExecuter from './RibbonTaskExecuter';\n\nconst Container = Symbol( 'container' );\nconst MainRibbon = Symbol( 'mainRibbon' );\nconst TaskManager = Symbol( 'taskManager' );\nconst TaskExecuter = Symbol( 'taskExecuter' );\n\n/**\n * RibbonCtrl\n * @class\n */\nexport default class RibbonCtrl {\n\t/**\n\t * RibbonCtrl constructor\n\t */\n\tconstructor() {\n\t\tthis[TaskManager] = new RibbonTaskManager();\n\t\tthis[Container] = undefined;\n\t\tthis[MainRibbon] = undefined;\n\t\tthis[TaskExecuter] = undefined;\n\t}\n\n\t/**\n\t * Ribbon instance.\n\t * @return {Ribbon} - Rendered Ribbon component.\n\t */\n\tget mainRibbon() {\n\t\treturn this[MainRibbon];\n\t}\n\n\t/**\n\t * Ribbon container\n\t * @return {HTMLElement} - React render target DOM element.\n\t */\n\tget container() {\n\t\treturn this[Container];\n\t}\n\n\t/**\n\t * Ribbon container\n\t * @param {HTMLElement} container - React render target DOM element.\n\t */\n\tset container( container ) {\n\t\tif( !(container instanceof HTMLElement) ) throw '[RibbonCtrl] Input container must be a HTML DOM element.';\n\n\t\tthis[Container] = container;\n\t}\n\n\t/**\n\t * RibbonTaskManager instance.\n\t * @return {RibbonTaskManager}\n\t */\n\tget taskManager() {\n\t\treturn this[TaskManager];\n\t}\n\n\t/**\n\t * RibbonTaskExecuter instance.\n\t * @return {RibbonTaskExecuter}\n\t */\n\tget taskExecuter() {\n\t\treturn this[TaskExecuter];\n\t}\n\n\t/**\n\t * Register RibbonTask.\n\t * @param {string} taskId - Task Identification.\n\t * @param {RibbonTask} task - Content instance of RibbonTask.\n\t * @return {bool} - If task is not type of RibbonTask or registered, it will return false.\n\t */\n\tregisterTask( taskId, task ) {\n\t\tif( !this.taskManager ) return false;\n\n\t\treturn this.taskManager.register( taskId, task );\n\t}\n\n\t/**\n\t * Unregister RibbonTask.\n\t * @param {string} taskId - Task Identification.\n\t * @return {bool} - If task is not registered, it will return false.\n\t */\n\tunregisterTask( taskId ) {\n\t\tif( !this.taskManager ) return false;\n\n\t\treturn this.taskManager.unregister( taskId );\n\t}\n\n\t/**\n\t * Execute registered RibbonTask.\n\t * @param {string} taskId - Task Identification.\n\t * @return {bool} - If task is not registered or failed to execute, it will return false.\n\t */\n\texecuteTask( taskId, options ) {\n\t\tif( !this.taskExecuter ) return false;\n\n\t\treturn this.taskExecuter.execute( taskId, options );\n\t}\n\n\t/**\n\t * Discard executed RibbonTask.\n\t * @param {string} taskId - Task Identification.\n\t * @return {bool} - If task is not registered or failed to discard changes, it will return false.\n\t */\n\tdiscardTask( taskId ) {\n\t\tif( !this.taskExecuter ) return false;\n\n\t\treturn this.taskExecuter.discard( taskId );\n\t}\n\n\t/**\n\t * Start UI rendering.\n\t * @return {Promise} - Result.\n\t * @resolve {RibbonCtrl} - Self RibbonCtrl instance.\n\t * @reject {object} - Errors.\n\t */\n\trun() {\n\t\tconst scope = this;\n\n\t\treturn new Promise( ( resolve, reject ) => {\n\t\t\ttry {\n\t\t\t\tconst container = scope.container;\n\t\t\t\tconst taskManager = scope.taskManager;\n\n\t\t\t\tscope[MainRibbon] = ReactDOM.render( <Ribbon />, container );\n\t\t\t\tscope[TaskExecuter] = new RibbonTaskExecuter( scope.mainRibbon, taskManager );\n\n\t\t\t\tresolve( scope );\n\t\t\t} catch( error ) {\n\t\t\t\treject( error );\n\t\t\t}\n\t\t});\n\t}\n}\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport RibbonBaseData from './RibbonBaseData';\nimport RibbonTitlebarData from './RibbonTitlebarData';\nimport RibbonTabData from './RibbonTabData';\nimport RibbonAppTabData from './RibbonAppTabData';\nimport RibbonPanelData from './RibbonPanelData';\nimport RibbonItemData from './RibbonItemData';\nimport RibbonButtonData from './RibbonButtonData';\nimport RibbonPushButtonData from './RibbonPushButtonData';\nimport RibbonToggleButtonData from './RibbonToggleButtonData';\nimport RibbonTooltipData from './RibbonTooltipData';\nimport RibbonGroupData from './RibbonGroupData';\nimport RibbonRadioButtonGroupData from './RibbonRadioButtonGroupData';\n\nconst Data = {\n\tRibbonBaseData,\n\tRibbonTitlebarData,\n\tRibbonTabData,\n\tRibbonAppTabData,\n\tRibbonPanelData,\n\tRibbonItemData,\n\tRibbonButtonData,\n\tRibbonPushButtonData,\n\tRibbonToggleButtonData,\n\tRibbonTooltipData,\n\tRibbonGroupData,\n\tRibbonRadioButtonGroupData\n};\n\nexport default Data;\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport Ribbon from './Ribbon';\nimport RibbonBase from './RibbonBase';\nimport RibbonTab from './RibbonTab';\nimport RibbonPanel from './RibbonPanel';\nimport RibbonTitlebar from './RibbonTitlebar';\nimport RibbonItem from './RibbonItem';\nimport RibbonButton from './RibbonButton';\nimport RibbonTooltip from './RibbonTooltip';\nimport RibbonPushButton from './RibbonPushButton';\nimport RibbonToggleButton from './RibbonToggleButton';\nimport RibbonGroup from './RibbonGroup';\nimport RibbonRadioButtonGroup from './RibbonRadioButtonGroup';\nimport RibbonCtrl from './RibbonCtrl';\nimport RibbonTask from './RibbonTask';\nimport RibbonTaskManager from './RibbonTaskManager';\nimport RibbonTaskExecuter from './RibbonTaskExecuter';\nimport Utility from './utility';\nimport Data from './data';\n\nconst ReactRibbon = {\n\tRibbon,\n\tRibbonBase,\n\tRibbonTab,\n\tRibbonPanel,\n\tRibbonTitlebar,\n\tRibbonItem,\n\tRibbonButton,\n\tRibbonTooltip,\n\tRibbonPushButton,\n\tRibbonToggleButton,\n\tRibbonGroup,\n\tRibbonRadioButtonGroup,\n\tRibbonCtrl,\n\tRibbonTask,\n\tRibbonTaskManager,\n\tRibbonTaskExecuter,\n\tUtility,\n\tData\n};\n\n/**\n * Module exposure.\n */\nexport default ReactRibbon;"],"names":["newGUID","d","Date","getTime","guid","replace","c","r","Math","random","floor","toString","isGUID","pattern","test","findItem","items","predicate","Function","item","i","length","namespace","s","ns","window","self","parts","split","utility","Id","Symbol","Name","DisplayName","Enabled","Hidden","RibbonBaseData","name","displayName","this","enabled","hidden","Actived","Panels","RibbonTabData","actived","panels","RibbonAppTabData","RibbonTitlebarData","title","RibbonBase","props","state","id","prop","onStateChange","setState","isEnabled","isHidden","React","Component","propTypes","PropTypes","string","isRequired","bool","func","defaultProps","RibbonTitlebar","dynCSS","ClassNames","className","RibbonItem","Object","assign","_this","type","isActived","RibbonTooltip","content","createTitle","_this2","createContent","Content","RibbonTooltipData","undefined","RibbonButton","icon","tooltip","toggleable","clickHandler","handleClick","bind","handleMouseOver","handleMouseOut","scope","data","console","log","updateTooltip","event","show","hide","outerDynCSS","innerDynCSS","formatLegend","legend","texts","result","map","txt","role","src","createTooltip","isToggleable","handler","refs","instanceOf","RibbonPushButton","RibbonToggleButton","onGroupCurrentChange","RibbonItemData","Icon","Tooltip","Toggleable","ClickHandler","RibbonButtonData","RibbonPushButtonData","RibbonToggleButtonData","Items","RibbonGroup","concat","itemData","idx","findIndex","nextProps","nextState","updateItem","find","createItem","RibbonPushButtonLike","push","arrayOf","Current","Default","RibbonRadioButtonGroup","current","default","updateCurrentItem","RibbonGroupData","RibbonRadioButtonGroupData","RibbonPanel","legendDynCSS","RibbonGroupLike","createSeperator","seperator","Seperator","RibbonPanelData","RibbonTab","panelData","panel","onClick","updatePanel","createPanel","Tabs","Ribbon","appTab","tabs","titlebar","handleTabClick","toggleDisplay","tabData","tab","tabId","activeTabById","otherTabs","updateTitlebar","createTitleBar","nextOpt","hasOwnProperty","updateTab","createTab","RibbonInst","Options","RibbonTask","ribbon","options","Tasks","checkTaskType","task","prototype","RibbonTaskManager","taskId","getTask","tasks","TaskManager","RibbonTaskExecuter","taskManager","taskClass","manager","execute","discard","Container","MainRibbon","TaskExecuter","RibbonCtrl","register","unregister","taskExecuter","Promise","resolve","reject","container","ReactDOM","render","mainRibbon","error","HTMLElement","Data","ReactRibbon"],"mappings":"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"}
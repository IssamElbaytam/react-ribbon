{"version":3,"file":null,"sources":["../src/js/Utility.js","../src/js/data/RibbonBaseData.js","../src/js/data/RibbonTabData.js","../src/js/data/RibbonAppTabData.js","../src/js/data/RibbonTitlebarData.js","../src/js/RibbonBase.jsx","../src/js/RibbonTitlebar.jsx","../src/js/RibbonItem.jsx","../src/js/RibbonTooltip.jsx","../src/js/data/RibbonTooltipData.js","../src/js/RibbonButton.jsx","../src/js/RibbonPushButton.jsx","../src/js/RibbonToggleButton.jsx","../src/js/data/RibbonItemData.js","../src/js/data/RibbonButtonData.js","../src/js/data/RibbonPushButtonData.js","../src/js/data/RibbonToggleButtonData.js","../src/js/RibbonGroup.jsx","../src/js/RibbonRadioButtonGroup.jsx","../src/js/data/RibbonGroupData.js","../src/js/data/RibbonRadioButtonGroupData.js","../src/js/RibbonPanel.jsx","../src/js/data/RibbonPanelData.js","../src/js/RibbonTab.jsx","../src/js/RibbonAppMenuSeperator.jsx","../src/js/RibbonAppMenuItem.jsx","../src/js/RibbonAppMenuButton.jsx","../src/js/data/RibbonAppMenuItemData.js","../src/js/data/RibbonAppMenuButtonData.js","../src/js/RibbonAppTab.jsx","../src/js/Ribbon.jsx","../src/js/RibbonTask.js","../src/js/RibbonTaskManager.js","../src/js/RibbonTaskExecuter.js","../src/js/RibbonCtrl.jsx","../src/js/data/index.js","../src/js/index.js"],"sourcesContent":["/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport debug from 'visionmedia-debug';\n\n/**\n * Create new RFC4122 v4 GUID based on timeStamp.\n * @return {string}\t- New guid\n */\nexport const newGUID = () => {\n  var d = new Date().getTime();\n\n  var guid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(\n    /[xy]/g,\n    ( c ) => {\n      var r = ( d + Math.random() * 16 ) % 16 | 0;\n      d = Math.floor( d / 16 );\n      return ( c == 'x' ? r : ( r & 0x3 | 0x8 ) ).toString( 16 );\n    });\n\n  return guid;\n};\n\n/**\n * Check input is GUID.\n * @param {string} - Target guid.\n * @return {bool} -\tIf the input is a GUID, then return true.\n */\nexport const isGUID = ( guid ) => {\n  //const pattern = /^[0-9a-f]{4}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{4}$/i;\n  const pattern = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n  return pattern.test( guid );\n};\n\n/**\n * Find proper (first) item suited with input condition in an array.\n * @param {array} items -\tArray of searching target.\n * @param {func} predicate - Predicate function for describe which item is goingo to return.\n * @return {object} - Target item.\n */\nexport const findItem = ( items = [], predicate ) => {\n  predicate = ( predicate instanceof Function ) ? predicate : ( item ) => { return true; };\n\n  for( let i = 0; i < items.length; i++ ) {\n    let item = items[i];\n    if( predicate( item ) ) return item;\n  }\n};\n\n/**\n * Create namespace.\n * @param {string} s - namespace (e.g. 'RiibonUI.Ribbon').\n * @return {Object} - Namespace,\n */\nexport const namespace = ( s ) => {\n  var ns = typeof window !== 'undefined' && window !== null ? window : self;\n\n  var parts = s.split( '.' );\n  for( var i = 0; i < parts.length; i++ ) {\n    ns[ parts[i] ] = ns[ parts[i] ] || {};\n    ns = ns[ parts[i] ];\n  }\n\n  return ns;\n};\n\n/**\n * Debugging output\n */\nexport const stderr = debug( 'react-ribbon' );\nstderr.log = console.log.bind( console );\n\nconst utility = {\n  newGUID,\n  isGUID,\n  findItem,\n  namespace,\n  stderr\n};\n\nexport default utility;\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport { newGUID } from '../Utility';\n\nconst Id = Symbol( 'id' );\nconst Name = Symbol( 'name' );\nconst DisplayName = Symbol( 'displayName' );\nconst Enabled = Symbol( 'enabled' );\nconst Hidden = Symbol( 'hidden' );\n\n/**\n * RibbonBaseData\n * @class\n */\nexport default class RibbonBaseData {\n  /**\n   * RibbonBaseData constructor\n   * @param {string} name - The name of this instance used by the internal mechanism.\n   * @param {string} displayName - The name of this instance shown on the user interface, might be a localized string.\n   */\n  constructor( name, displayName ) {\n    if( typeof name !== 'string' ) throw 'name is required.';\n\n    this[Id] = newGUID();\n    this[Name] = name;\n    this[DisplayName] = ( typeof name !== 'string' ) ? name : displayName;\n    this[Enabled] = true;\n    this[Hidden] = false;\n  }\n\n  /**\n   * Instance uuid used by the internal mechanism.\n   * @return {string} - The UUID.\n   */\n  get id() {\n    return this[Id];\n  }\n\n  /**\n   * Instance name used by the internal mechanism.\n   * @return {string} - Instance name.\n   */\n  get name() {\n    return this[Name];\n  }\n\n  /**\n   * Instance name shown on the user interface, might be a localized string.\n   * @return {string} - Instance name.\n   */\n  get displayName() {\n    return this[DisplayName];\n  }\n\n  /**\n   * Instance name shown on the user interface, might be a localized string.\n   * @param {string} [name] - Instance name.\n   */\n  set displayName( name ) {\n    if( typeof name !== 'string' ) throw 'Input type should be a string.';\n\n    this[DisplayName] = name;\n  }\n\n  /**\n   * Instance edis/en-able status.\n   * @return {bool} - If false, make instance be disabled.\n   */\n  get enabled() {\n    return this[Enabled];\n  }\n\n  /**\n   * Instance edis/en-able status.\n   * @return {bool} [enabled = true] - If false, make instance be disabled.\n   */\n  set enabled( enabled = true ) {\n    this[Enabled] = ( enabled === true );\n  }\n\n  /**\n   * Instance is hidden or not.\n   * @return {bool} - If false, instance is going to disppear on the UI.\n   */\n  get hidden() {\n    return this[Hidden];\n  }\n\n  /**\n   * Instance edis/en-able status.\n   * @return {bool} [hidden = false] - If false, instance is going to disppear on the UI.\n   */\n  set hidden( hidden = false ) {\n    this[Hidden] = ( hidden === true );\n  }\n}\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport RibbonBaseData from './RibbonBaseData';\n\nconst\tActived = Symbol( 'actived' );\nconst Panels = Symbol( 'panels' );\n\n/**\n * RibbonTabData\n * @extends RibbonBaseData\n * @class\n */\nexport default class RibbonTabData extends RibbonBaseData {\n  /**\n   * RibbonTabData constructor\n   * @param {string} name - The name of this instance used by the internal mechanism.\n   * @param {string} displayName - The name of this instance shown on the user interface, might be a localized string.\n   */\n  constructor( name, displayName ) {\n    super( name, displayName );\n\n    this[Actived] = false;\n    this[Panels] = [];\n  }\n\n  /**\n   * Tab type.\n   * @return {string} - Tab type for identification.\n   */\n  get type() {\n    return 'ui-ribbon-tab-normal';\n  }\n\n  /**\n   * Tab actived state.\n   * @return {bool} - If true, it repsents tab is selected currently.\n   */\n  get actived() {\n    return this[Actived];\n  }\n\n  /**\n   * Tab actived state.\n   * @return {bool} [actived = false] - If true, it repsents tab is selected currently.\n   */\n  set actived( actived = false ) {\n    this[Actived] = ( actived === true );\n  }\n\n  /**\n   * Tab's children panels\n   * @return {RibbonPanelData[]} - Ribbon panel data.\n   */\n  get panels() {\n    return this[Panels];\n  }\n\n  /**\n   * Tab's children panels\n   * @param {RibbonPanelData[]} [panels = []] - Ribbon panel data.\n   */\n  set panels( panels = [] ) {\n    this[Panels] = panels;\n  }\n}\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport RibbonTabData from './RibbonTabData';\n\nconst Items = Symbol( 'items' );\n\n/**\n * RibbonAppTabData\n * @class\n */\nexport default class RibbonAppTabData extends RibbonTabData {\n  /**\n   * RibbonAppTabData constructor\n   * @param {string} [displayName = 'File'] - The name of this instance shown on the user interface, might be a localized string.\n   */\n  constructor( displayName = 'File' ) {\n    super( 'AppTab', displayName );\n\n    this[Items] = [];\n  }\n\n  /**\n   * Tab type.\n   * @return {string} - Tab type for identification.\n   * @override\n   */\n  get type() {\n    return 'ui-ribbon-tab-application';\n  }\n\n  /**\n   * Panel's children items.\n   * @return {RibbonItemData[]} - Ribbon item data.\n   */\n  get items() {\n    return this[Items];\n  }\n\n  /**\n   * Panel's children items.\n   * @return {RibbonItemData[]} [items = []]- Ribbon item data.\n   */\n  set items( items = [] ) {\n    this[Items] = items;\n  }\n}\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport RibbonBaseData from './RibbonBaseData';\n\n/**\n * RibbonTitlebarData\n * @class\n */\nexport default class RibbonTitlebarData extends RibbonBaseData {\n  /**\n   * RibbonTitlebarData constructor\n   * @param {string} title - The name of this instance shown on the user interface, might be a localized string.\n   */\n  constructor( title ) {\n    if( typeof title !== 'string' ) title = 'React Ribbon';\n\n    super( 'AppTitlebar', title );\n  }\n\n  /**\n   * App title.\n   * @return {string}\n   */\n  get title() {\n    return this.displayName;\n  }\n\n  /**\n   * App title\n   * @param {string} title\n   */\n  set title( title ) {\n    this.displayName = title;\n  }\n}\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport React from 'react';\nimport { newGUID } from './Utility';\n\n/**\n * RibbonBase\n * @extends React.Component\n * @class\n */\nexport default class RibbonBase extends React.Component {\n  /**\n   * RibbonBase constructor\n   * @param {object} props - React component properties\n   */\n  constructor( props ) {\n    super( props );\n\n    let displayName = ( typeof props.displayName === 'string' ) ? props.displayName : name;\n    let enabled = ( props.enabled == false ) ? false : true;\n    let hidden = ( props.hidden === true );\n\n    this.state = {\n      displayName,\n      enabled,\n      hidden\n    };\n  }\n\n  /**\n   * Instance id for internal identification and HTML id attribute.\n   * @return {string} - The UUID.\n   */\n  get id() {\n    return this.props.id;\n  }\n\n  /**\n   * Instance name for internal identification.\n   * @return {string} - Instance name.\n   */\n  get name() {\n    return this.props.name;\n  }\n\n  /**\n   * Instance name shown on the user interface, might be a localized string.\n   * @return {string} - Instance name.\n   */\n  get displayName() {\n    return this.state.displayName;\n  }\n\n  /**\n   * Instance name shown on the user interface, might be a localized string.\n   * @param {string} - Instance name.\n   */\n  set displayName( name ) {\n    if( typeof name !== 'string' ) throw 'Input type should be a string.';\n\n    const prop = { displayName: name };\n    const onStateChange = this.props.onStateChange;\n    onStateChange && onStateChange( this.id, prop );\n\n    this.setState( prop );\n  }\n\n  /**\n   * Instance edis/en-able status.\n   * @return {bool} - If false, make instance be disabled.\n   */\n  get enabled() {\n    return this.state.enabled;\n  }\n\n  /**\n   * Instance edis/en-able status.\n   * @param {bool} [enabled = true] - If false, make instance be disabled.\n   */\n  set enabled( enabled = true ) {\n    if( this.hidden ) return;\n\n    const isEnabled = ( enabled === true );\n\n    const prop = { enabled: isEnabled };\n    const onStateChange = this.props.onStateChange;\n    onStateChange && onStateChange( this.id, prop );\n\n    this.setState( prop );\n  }\n\n  /**\n   * Instance is hidden or not.\n   * @return {bool} - If false, instance is going to disppear on the UI.\n   */\n  get hidden() {\n    return this.state.hidden;\n  }\n\n  /**\n   * Instance is hidden or not.\n   * @return {bool} [hidden = false]- If false, instance is going to disppear on the UI.\n   */\n  set hidden( hidden = false ) {\n    const isHidden = ( hidden === true );\n    const isEnabled = !isHidden;\n\n    const prop = { hidden: isHidden, enabled: isEnabled };\n    const onStateChange = this.props.onStateChange;\n    onStateChange && onStateChange( this.id, prop );\n\n    this.setState( prop );\n  }\n}\n\nRibbonBase.propTypes = {\n  id: React.PropTypes.string.isRequired,\n  name: React.PropTypes.string.isRequired,\n  displayName: React.PropTypes.string,\n  enabled: React.PropTypes.bool,\n  hidden: React.PropTypes.bool,\n  onStateChange: React.PropTypes.func\n};\n\nRibbonBase.defaultProps = {\n  id: newGUID(),\n  enabled: true,\n  hidden: false\n};\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport React from 'react';\nimport ClassNames from 'classnames';\nimport RibbonBase from './RibbonBase';\n\n/**\n * RibbonTitlebar\n * @class\n */\nexport default class RibbonTitlebar extends RibbonBase {\n  /**\n   * RibbonTitlebar constructor\n   * @param {object} props - React component properties\n   */\n  constructor( props ) {\n    super( props );\n  }\n\n  /**\n   * Ribbon main title\n   * @return {string} - Ribbon title\n   */\n  get title() {\n    return this.displayName;\n  }\n\n  /**\n   * Ribbon main title\n   * @param {string} title - Ribbon title\n   */\n  set title( title ) {\n    if( typeof title !== 'string' ) throw 'Input type should be a string.';\n\n    this.displayName = title;\n  }\n\n  /**\n   * Toggle titlebar be displayed or hiden.\n   */\n  toggleDisplay() {\n    this.hidden = ( !this.hidden );\n  }\n\n  render() {\n    const dynCSS = ClassNames({\n      'ui-ribbon-invisible': this.hidden\n    });\n\n    return (\n      <div className={ 'ui-ribbon-title ' + dynCSS }>\n        <span>{ this.title }</span>\n      </div>\n    );\n  }\n}\n\nRibbonTitlebar.propTypes = {\n  onStateChange: React.PropTypes.func\n};\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport React from 'react';\nimport RibbonBase from './RibbonBase';\nimport { newGUID } from './Utility';\n\n/**\n * RibbonItem\n * @extends RibbonBase\n * @class\n */\nexport default class RibbonItem extends RibbonBase {\n  /**\n   * RibbonItem constructor\n   * @param {object} props - React component properties\n   */\n  constructor( props ) {\n    super( props );\n    \n    let actived = ( props.actived === true );\n\n    this.state = Object.assign( this.state, { actived } );\n  }\n\n  /**\n   * Item type.\n   * @return {string} - Item type for identification.\n   */\n  get type() {\n    return this.props.type;\n  }\n  \n  /**\n   * Item actived state.\n   * @return {bool} - If true, it repsents item is actived currently.\n   */\n  get actived() {\n    return this.state.actived;\n  }\n\n  /**\n   * Item actived state.\n   * @return {bool} [actived = false] - If true, it repsents item is actived currently.\n   */\n  set actived( actived = false ) {\n    const isActived = ( actived === true );\n    const prop = { actived: isActived };\n\n    const onStateChange = this.props.onStateChange;\n    onStateChange && onStateChange( this.id, prop );\n\n    this.setState( prop );\n  }\n}\n\nRibbonItem.propTypes = {\n  id: React.PropTypes.string.isRequired,\n  type: React.PropTypes.string.isRequired,\n  actived: React.PropTypes.bool,\n  onStateChange: React.PropTypes.func\n};\n\nRibbonItem.defaultProps = {\n  id: newGUID(),\n  type: 'ui-ribbon-panel-item',\n  actived: false\n};\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport React from 'react';\nimport ClassNames from 'classnames';\nimport RibbonBase from './RibbonBase';\n\n/**\n * RibbonTooltip\n * @class\n */\nexport default class RibbonTooltip extends RibbonBase {\n  /**\n   * RibbonTooltip constructor\n   * @param {object} props - React component properties\n   */\n  constructor( props ) {\n    super( props );\n\n    this.state = Object.assign( this.state,\n      {\n        content: props.content\n      });\n  }\n\n  /**\n   * Tooltip title.\n   * @return {string} - Ribbon tooltip title.\n   */\n  get title() {\n    return this.displayName;\n  }\n\n  /**\n   * Tooltip title.\n   * @return {string} title - Ribbon tooltip title.\n   */\n  set title( title ) {\n    if( typeof title !== 'string' ) throw 'Input type should be a string.';\n\n    this.displayName = title;\n  }\n\n  /**\n   * Tooltip content.\n   * @return {string} - Tooltip content.\n   */\n  get content() {\n    return this.state.content;\n  }\n\n  /**\n   * Tooltip content.\n   * @return {string} - Tooltip content.\n   */\n  set content( content = '' ) {\n    if( typeof content !== 'string' ) throw 'Input content should be a string.';\n\n    const prop = { content };\n    const onStateChange = this.props.onStateChange;\n    onStateChange && onStateChange( this.id, prop );\n\n    this.setState( prop );\n  }\n\n  /**\n   * Instance is hidden or not.\n   * @return {bool} - If false, instance is going to disppear on the UI.\n   * @override\n   */\n  get hidden() {\n    return this.state.hidden;\n  }\n\n  /**\n   * Instance is hidden or not.\n   * @return {bool} [hidden = false]- If false, instance is going to disppear on the UI.\n   * @override\n   */\n  set hidden( hidden = false ) {\n    const isHidden = ( hidden === true );\n\n    const prop = { hidden: isHidden };\n    const onStateChange = this.props.onStateChange;\n    onStateChange && onStateChange( this.id, prop );\n\n    this.setState( prop );\n  }\n\n  /**\n   * Make this tooltip appear.\n   */\n  show() {\n    this.hidden = false;\n  }\n\n  /**\n   * Make this tooltip disappear.\n   */\n  hide() {\n    this.hidden = true;\n  }\n\n  render() {\n    const dynCSS = ClassNames({\n      'ui-ribbon-tooltip-visible': ( this.hidden === false )\n    });\n\n    const createTitle = () => {\n      if( this.title )\n        return ( <strong>{ this.title }</strong> );\n    };\n\n    const createContent = () => {\n      if( this.content )\n        return ( <p>{ this.content }</p> );\n    };\n\n    return (\n      <div id={ this.id } className={ 'ui-ribbon-tooltip ' + dynCSS }>\n        { createTitle() }\n        { createContent() }\n      </div>\n    );\n  }\n}\n\nRibbonTooltip.propTypes = {\n  content: React.PropTypes.string,\n  onStateChange: React.PropTypes.func\n};\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport RibbonBaseData from './RibbonBaseData';\n\nconst Content = Symbol( 'content' );\n\n/**\n * RibbonTooltipData\n * @extends RibbonBaseData\n * @class\n */\nexport default class RibbonTooltipData extends RibbonBaseData {\n  /**\n   * RibbonTooltipData constructor\n   * @param {string} name - The name of this instance used by the internal mechanism.\n   * @param {string} displayName - The name of this instance shown on the user interface, might be a localized string.\n   */\n  constructor( title, content ) {\n    if( typeof title !== 'string' ) throw 'Tooltip title cannot be empty.';\n\n    super( 'RibbonTooltip', title );\n\n    this[Content] = ( typeof content !== 'string' ) ? undefined : content;\n    this.hidden = true;\n  }\n\n  /**\n   * App title.\n   * @return {string}\n   */\n  get title() {\n    return this.displayName;\n  }\n\n  /**\n   * App title\n   * @param {string} title\n   */\n  set title( title ) {\n    this.displayName = title;\n  }\n\n  /**\n   * Tooltip content.\n   * @return {string} - Tooltip content.\n   */\n  get content() {\n    return this[Content];\n  }\n\n  /**\n   * Tooltip content.\n   * @return {string} - Tooltip content.\n   */\n  set content( content ) {\n    if( typeof content !== 'string' ) throw 'Input content should be a type of string.';\n\n    this[Content] = content;\n  }\n}\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport React from 'react';\nimport ClassNames from 'classnames';\nimport RibbonItem from './RibbonItem';\nimport RibbonTooltip from './RibbonTooltip';\nimport RibbonTooltipData from './data/RibbonTooltipData';\nimport { newGUID, stderr } from './Utility';\n\n/**\n * RibbonButton\n * @extends RibbonItem\n * @class\n */\nexport default class RibbonButton extends RibbonItem {\n  /**\n   * RibbonButton constructor\n   * @param {object} props - React component properties\n   */\n  constructor( props ) {\n    super( props );\n\n    let icon = props.icon;\n    let tooltip = props.tooltip;\n    let toggleable = ( props.toggleable === true );\n    let clickHandler = props.clickHandler;\n\n    this.state = Object.assign( this.state,\n      {\n        icon,\n        tooltip,\n        toggleable,\n        clickHandler\n      });\n\n    this.handleClick = this.handleClick.bind( this );\n    this.handleMouseOver = this.handleMouseOver.bind( this );\n    this.handleMouseOut = this.handleMouseOut.bind( this );\n  }\n\n  /**\n   * Button role.\n   * @return {string}\n   */\n  get role() {\n    return this.props.role;\n  }\n\n  /**\n   * Button icon.\n   * @return {string} - Button icon path.\n   */\n  get icon() {\n    return this.state.icon;\n  }\n\n  /**\n   * Button icon.\n   * @return {string} icon - Button icon path.\n   */\n  set icon( icon ) {\n    if( typeof icon !== 'string' ) throw 'Input type should be a string.';\n\n    const prop = { icon };\n    const onStateChange = this.props.onStateChange;\n    onStateChange && onStateChange( this.id, prop );\n\n    this.setState( prop );\n  }\n\n  /**\n   * Button toggleable state.\n   * @return {bool} - If true, it repsents button is toggled currently.\n   */\n  get toggleable() {\n    return this.state.toggleable;\n  }\n\n  /**\n   * Button toggleable state.\n   * @return {bool} [toggleable = false] - If true, it repsents button is toggled currently.\n   */\n  set toggleable( toggleable = false ) {\n    const isToggleable = ( toggleable === true );\n\n    const prop = { toggleable: isToggleable };\n    const onStateChange = this.props.onStateChange;\n    onStateChange && onStateChange( this.id, prop );\n\n    this.setState( prop );\n  }\n\n  /**\n   * Button click eveent handler.\n   * @return {Function} - Click eveent handler.\n   */\n  get clickHandler() {\n    return this.state.clickHandler;\n  }\n\n  /**\n   * Button click eveent handler.\n   * @param {Function} handler - Click eveent handler.\n   */\n  set clickHandler( handler ) {\n    if( !(handler instanceof Function) )\n      throw 'Input clicking handler is invalid.';\n\n    const prop = { clickHandler: handler };\n    const onStateChange = this.props.onStateChange;\n    onStateChange && onStateChange( this.id, prop );\n\n    this.setState( prop );\n  }\n\n  /**\n   * Button tooltip comopent.\n   * @return {RibbonTooltip} - Rendered RibbonTooltip component.\n   */\n  get tooltip() {\n    return this.refs.tooltip;\n  }\n\n  set tooltip( tooltip ) {\n    if( !(tooltip instanceof RibbonTooltipData) )\n      throw '[RibbonButton] Input tooltip data is invalid.';\n\n    const prop = { tooltip };\n    const onStateChange = this.props.onStateChange;\n    onStateChange && onStateChange( this.id, prop );\n\n    this.setState( prop );\n  }\n\n  /**\n   * Create tooltip\n   * @return {RibbonTooltip} - RibbonTooltip instance (not rendered).\n   */\n  createTooltip() {\n    const scope = this;\n    const data = this.state.tooltip;\n    if( !data ) return;\n\n    if( !(data instanceof RibbonTooltipData) && data )\n      return stderr( '%c[RibbonButton] Input tooltip data is invalid.', 'color:red;' );\n\n    const updateTooltip = ( id, data ) => {\n      let tooltip = scope.state.tooltip;\n\n      if( tooltip.id !== id ) return;\n\n      Object.assign( tooltip, data );\n\n      const prop = { tooltip };\n      const onStateChange = scope.props.onStateChange;\n      onStateChange && onStateChange( scope.id, prop );\n\n      scope.setState( prop );\n    };\n\n    return (\n      <RibbonTooltip\n        key={ data.id }\n        id={ data.id }\n        name={ data.name }\n        displayName={ data.title }\n        content={ data.content }\n        enabled={ data.enabled }\n        hidden={ data.hidden }\n        onStateChange={ updateTooltip }\n        ref=\"tooltip\" />\n    );\n  }\n\n  /**\n   * Button clicking event handler.\n   */\n  handleClick( event ) {\n    if( !this.enabled ) return;\n\n    const clickHandler = this.props.clickHandler;\n    clickHandler && clickHandler( event );\n  }\n\n  /**\n   * Button hovering over event handler.\n   */\n  handleMouseOver() {\n    const tooltip = this.tooltip;\n    tooltip && tooltip.show();\n  }\n\n  /**\n   * Button hovering out event handler.\n   */\n  handleMouseOut() {\n    const tooltip = this.tooltip;\n    tooltip && tooltip.hide();\n  }\n\n  render() {\n    const outerDynCSS = ClassNames({\n      'ui-ribbon-disabled': ( this.enabled === false ),\n      'ui-ribbon-invisible': this.hidden\n    });\n\n    const innerDynCSS = ClassNames({\n      'ui-ribbon-active': this.actived\n    });\n\n    const formatLegend = ( legend ) => {\n      const texts = legend.split( '\\\\n' );\n      let guid = newGUID();\n      let result = <span key={ guid } id={ guid }>{ legend }</span>;\n\n      if( texts.length > 1 ) {\n        result = texts.map(( txt ) => {\n          let guid = newGUID();\n          return (\n              <span key={ guid } id={ guid }>\n                { txt }\n                <br />\n              </span>\n          );\n        });\n      }\n      return result;\n    };\n\n    return (\n      <a\n        key={ this.id }\n        id={ this.id }\n        className={ outerDynCSS }\n        onClick={ this.handleClick }\n        onMouseOver={ this.handleMouseOver }\n        onMouseOut={ this.handleMouseOut } >\n\n        <div\n          role={ this.role }\n          className={ 'ui-ribbon-button ' + this.type + ' ui-ribbon-relative ui-ribbon-inline ui-ribbon-center ' + innerDynCSS } >\n\n          <img src={ this.icon } />\n          <div className=\"ui-ribbon-button-legend\">\n            { formatLegend( this.displayName ) }\n          </div>\n          { this.createTooltip() }\n        </div>\n      </a>\n    );\n  }\n}\n\nRibbonButton.propTypes = {\n  id: React.PropTypes.string.isRequired,\n  role: React.PropTypes.string.isRequired,\n  type: React.PropTypes.string.isRequired,\n  icon: React.PropTypes.string,\n  tooltip: React.PropTypes.instanceOf( RibbonTooltipData ),\n  toggleable: React.PropTypes.bool,\n  clickHandler: React.PropTypes.func,\n  onStateChange: React.PropTypes.func\n};\n\nRibbonButton.defaultProps = {\n  id: newGUID(),\n  role: 'ui-ribbon-button',\n  type: 'ui-ribbon-button',\n  icon: '',\n  toggleable: false\n};\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport React from 'react';\nimport ClassNames from 'classnames';\nimport RibbonButton from './RibbonButton';\n\n/**\n * RibbonPushButton\n * @class\n */\nexport default class RibbonPushButton extends RibbonButton {\n  /**\n   * RibbonPushButton constructor\n   * @param {object} props - React component properties\n   */\n  constructor( props ) {\n    super( props );\n  }\n\n  render() {\n    const dynCSS = ClassNames({\n      'ui-ribbon-disabled': ( this.enabled === false ),\n      'ui-ribbon-invisible': this.hidden\n    });\n\n    return (\n      <div className={ 'ui-ribbon-button-group ui-ribbon-inline ' + dynCSS }>\n        { super.render() }\n      </div>\n    );\n  }\n}\n\nRibbonPushButton.propTypes = {\n  type: React.PropTypes.string.isRequired,\n  onStateChange: React.PropTypes.func\n};\n\nRibbonPushButton.defaultProps = {\n  type: 'ui-ribbon-button-big'\n};\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport React from 'react';\nimport RibbonPushButton from './RibbonPushButton';\n\n/**\n * RibbonToggleButton\n * @class\n */\nexport default class RibbonToggleButton extends RibbonPushButton {\n  /**\n   * RibbonToggleButton constructor\n   * @param {object} props - React component properties\n   */\n  constructor( props ) {\n    super( props );\n\n    this.handleClick = this.handleClick.bind( this );\n  }\n\n  /**\n   * Button clicking event handler.\n   * @override\n   */\n  handleClick( event ) {\n    if( !this.enabled ) return;\n\n    if( this.toggleable ) {\n      const isActived = !this.actived;\n\n      const prop = { actived: isActived };\n      const onStateChange = this.props.onStateChange;\n      onStateChange && onStateChange( this.id, prop );\n\n      this.setState( prop );\n\n      // For de/activating button by changing button's actived property.\n      const onGroupCurrentChange = this.props.onGroupCurrentChange;\n      onGroupCurrentChange && onGroupCurrentChange();\n    }\n\n    const clickHandler = this.props.clickHandler;\n    clickHandler && clickHandler( event );\n  }\n}\n\nRibbonToggleButton.propTypes = {\n  type: React.PropTypes.string.isRequired,\n  role: React.PropTypes.string.isRequired,\n  onGroupCurrentChange: React.PropTypes.func,\n  onStateChange: React.PropTypes.func\n};\n\nRibbonToggleButton.defaultProps = {\n  role: 'ui-ribbon-button-toggle',\n  type: 'ui-ribbon-button-big'\n};\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport RibbonBaseData from './RibbonBaseData';\n\nconst\tActived = Symbol( 'actived' );\n\n/**\n * RibbonItemData\n * @extends RibbonBaseData\n * @class\n */\nexport default class RibbonItemData extends RibbonBaseData {\n  /**\n   * RibbonItemData constructor\n   * @param {string} name - The name of this instance used by the internal mechanism.\n   * @param {string} displayName - The name of this instance shown on the user interface, might be a localized string.\n   */\n  constructor( name, displayName ) {\n    super( name, displayName );\n\n    this[Actived] = false;\n  }\n\n  /**\n   * Item type.\n   * @return {string} - Item type for identification.\n   */\n  get type() {\n    return 'ui-ribbon-panel-item';\n  }\n\n  /**\n   * Item actived state.\n   * @return {bool} - If true, it repsents item is actived currently.\n   */\n  get actived() {\n    return this[Actived];\n  }\n\n  /**\n   * Item actived state.\n   * @return {bool} [actived = false] - If true, it repsents item is actived currently.\n   */\n  set actived( actived = false ) {\n    this[Actived] = ( actived === true );\n  }\n}\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport RibbonItemData from './RibbonItemData';\nimport RibbonTooltipData from './RibbonTooltipData';\n\nconst\tIcon = Symbol( 'icon' );\nconst Tooltip = Symbol( 'tooltip' );\nconst Toggleable = Symbol( 'toggleable' );\nconst ClickHandler = Symbol( 'clickHandler' );\n\n/**\n * RibbonButtonData\n * @extends RibbonItemData\n * @class\n */\nexport default class RibbonButtonData extends RibbonItemData {\n  /**\n   * RibbonButtonData constructor\n   * @param {string} name - The name of this instance used by the internal mechanism.\n   * @param {string} displayName - The name of this instance shown on the user interface, might be a localized string.\n   */\n  constructor( name, displayName ) {\n    super( name, displayName );\n\n    this[Icon] = '';\n    this[Tooltip] = undefined;\n    this[Toggleable] = false;\n    this[ClickHandler] = undefined;\n  }\n\n  /**\n   * Button role.\n   * @return {string}\n   * @override\n   */\n  get role() {\n    return 'ui-ribbon-button';\n  }\n\n  /**\n   * Button icon path.\n   * @return {string} - Button icon full path or relative path.\n   */\n  get icon() {\n    return this[Icon];\n  }\n\n  /**\n   * Button icon path.\n   * @param {string} icon - Button icon full path or relative path.\n   */\n  set icon( icon ) {\n    if( typeof icon !== 'string' ) throw 'Input type should be a string.';\n\n    this[Icon] = icon;\n  }\n\n  /**\n   * Button tooltip data.\n   * @return {RibbonTooltipData} - Ribbon button tooltip data.\n   */\n  get tooltip() {\n    return this[Tooltip];\n  }\n\n  /**\n   * Button tooltip data.\n   * @param {RibbonTooltipData} tooltip - Ribbon button tooltip data.\n   */\n  set tooltip( tooltip ) {\n    if( !(tooltip instanceof RibbonTooltipData) )\n      throw 'Input data is not a type of RibbonTooltipData.';\n\n    this[Tooltip] = tooltip;\n  }\n\n  /**\n   * Button toggleable state.\n   * @return {bool} - If true, it repsents button is toggled currently.\n   */\n  get toggleable() {\n    return this[Toggleable];\n  }\n\n  /**\n   * Button toggleable state.\n   * @return {bool} [toggleable = false] - If true, it repsents button is toggled currently.\n   */\n  set toggleable( toggleable = false ) {\n    this[Toggleable] = ( toggleable === true );\n  }\n\n  /**\n   * Button\tclick eveent handler.\n   * @return {Function} - Click eveent handler.\n   */\n  get clickHandler() {\n    return this[ClickHandler];\n  }\n\n  /**\n   * Button\tclick eveent handler.\n   * @param {Function} handler - Click eveent handler.\n   */\n  set clickHandler( handler ) {\n    if( !(handler instanceof Function) )\n      throw 'Input clicking handler is invalid.';\n\n    this[ClickHandler] = handler;\n  }\n}\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport RibbonButtonData from './RibbonButtonData';\n\n/**\n * RibbonPushButtonData\n * @extends RibbonButtonData\n * @class\n */\nexport default class RibbonPushButtonData extends RibbonButtonData {\n  /**\n   * RibbonPushButtonData constructor\n   * @param {string} name - The name of this instance used by the internal mechanism.\n   * @param {string} displayName - The name of this instance shown on the user interface, might be a localized string.\n   */\n  constructor( name, displayName ) {\n    super( name, displayName );\n  }\n\n  /**\n   * Button type.\n   * @return {string} -\tButton type for identification.\n   * @override\n   */\n  get type() {\n    return 'ui-ribbon-button-big';\n  }\n}\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport RibbonPushButtonData from './RibbonPushButtonData';\n\n/**\n * RibbonToggleButtonData\n * @extends RibbonPushButtonData\n * @class\n */\nexport default class RibbonToggleButtonData extends RibbonPushButtonData {\n  /**\n   * RibbonToggleButtonData constructor\n   * @param {string} name - The name of this instance used by the internal mechanism.\n   * @param {string} displayName - The name of this instance shown on the user interface, might be a localized string.\n   */\n  constructor( name, displayName ) {\n    super( name, displayName );\n  }\n\n  /**\n   * Button role.\n   * @return {string}\n   * @override\n   */\n  get role() {\n    return 'ui-ribbon-button-toggle';\n  }\n\n  /**\n   * Button toggleable state.\n   * @return {bool} - If true, it repsents button is toggled currently.\n   * @override\n   */\n  get toggleable() {\n    return true;\n  }\n}\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport React from 'react';\nimport ClassNames from 'classnames';\nimport RibbonItem from './RibbonItem';\nimport RibbonButton from './RibbonButton';\nimport RibbonPushButton from './RibbonPushButton';\nimport RibbonToggleButton from './RibbonToggleButton';\nimport RibbonItemData from './data/RibbonItemData';\nimport RibbonButtonData from './data/RibbonButtonData';\nimport RibbonPushButtonData from './data/RibbonPushButtonData';\nimport RibbonToggleButtonData from './data/RibbonToggleButtonData';\nimport { newGUID, stderr } from './Utility';\n\nconst Items = Symbol( 'items' );\n\n/**\n * RibbonGroup\n * @extends RibbonItem\n * @class\n */\nexport default class RibbonGroup extends RibbonItem {\n  /**\n   * RibbonGroup constructor\n   * @param {object} props - React component properties\n   */\n  constructor( props ) {\n    super( props );\n\n    this.state = Object.assign( this.state,\n      {\n        items: [].concat( props.items )\n      });\n\n    this[Items] = [];\n  }\n\n  /**\n   * Panel's children items\n   * @return {[RibbonButtonData]} - Ribbon item data.\n   */\n  get items() {\n    return this[Items];\n  }\n\n  /**\n   * Instance edis/en-able status.\n   * @return {bool} - If false, make instance be disabled.\n   */\n  get enabled() {\n    return super.enabled;\n  }\n\n  /**\n   * Instance edis/en-able status.\n   * @param {bool} [enabled = true] - If false, make instance be disabled.\n   */\n  set enabled( enabled = true ) {\n    if( this.hidden ) return;\n\n    const isEnabled = ( enabled === true );\n    super.enabled = isEnabled;\n\n    // Cascaded applying changes\n    this.items.map( ( item ) => {\n      item.enabled = isEnabled;\n    });\n  }\n\n  /**\n   * Instance is hidden or not.\n   * @return {bool} - If false, instance is going to disppear on the UI.\n   */\n  get hidden() {\n    return super.hidden;\n  }\n\n  /**\n   * Instance is hidden or not.\n   * @return {bool} [hidden = false]- If false, instance is going to disppear on the UI.\n   */\n  set hidden( hidden = false ) {\n    const isHidden = ( hidden === true );\n    super.hidden = isHidden;\n\n    // Cascaded applying changes\n    this.items.map( ( item ) => {\n      item.hidden = isHidden;\n    });\n  }\n\n  /**\n   * Add new RibbonButton by given data.\n   * @param {RibbonButtonData} itemData - Ribbon button data for creating new item in the RibbonGroup.\n   * @return {RibbonButton} - Rendered RibbonButton component.\n   */\n  addItem( itemData ) {\n    const idx = this.items.findIndex( ( item ) => ( item.id == itemData.id || item.name === itemData.name ) );\n    if( !(itemData instanceof RibbonButtonData) || idx !== -1 )\n      return stderr( '%c[RibbonGroup] Input itemData is invalid or duplicate.', 'color:red;' );\n\n    const items = this.state.items.concat( itemData );\n\n    const prop = { items };\n    const onStateChange = this.props.onStateChange;\n    onStateChange && onStateChange( this.id, prop );\n\n    this.setState( prop );\n\n    return this.items[ this.items.length -1 ];\n  }\n\n  componentWillUpdate( nextProps, nextState ) {\n    this[Items].length = 0;\n  }\n\n  render() {\n    const scope = this;\n    const items = this.state.items;\n\n    const updateItem = ( id, data ) => {\n      let items = scope.state.items;\n      const item = items.find( ( item ) => item.id === id );\n      if( !item ) return;\n\n      Object.assign( item, data );\n\n      const prop = { items };\n      const onStateChange = scope.props.onStateChange;\n      onStateChange && onStateChange( scope.id, prop );\n\n      scope.setState( prop );\n    };\n\n    const createItem = ( item ) => {\n      let result;\n      if( item.type === 'ui-ribbon-button-big' ) {\n        const RibbonPushButtonLike = ( item.role === 'ui-ribbon-button-toggle' ) ? RibbonToggleButton : RibbonPushButton;\n        result = (\n          <RibbonPushButtonLike\n            key={ item.id }\n            id={ item.id }\n            name={ item.name }\n            displayName={ item.displayName }\n            enabled={ item.enabled }\n            hidden={ item.hidden }\n            type={ item.type }\n            actived={ item.actived }\n            icon={ item.icon }\n            tooltip={ item.tooltip }\n            toggleable={ item.toggleable }\n            clickHandler={ item.clickHandler }\n            onStateChange={ updateItem }\n            ref={ ( c ) => { if( c ) scope.items.push( c ); } } />\n          );\n      }\n\n      return result;\n    };\n\n    const dynCSS = ClassNames({\n      'ui-ribbon-disabled': ( this.enabled === false ),\n      'ui-ribbon-invisible': this.hidden\n    });\n\n    return (\n      <div\n        key={ this.id }\n        id={ this.id }\n        className={ 'ui-ribbon-group ui-ribbon-inline ' + dynCSS }>\n\n        { items.map( createItem ) }\n      </div>\n    );\n  }\n}\n\nRibbonGroup.propTypes = {\n  id: React.PropTypes.string.isRequired,\n  items: React.PropTypes.arrayOf( React.PropTypes.instanceOf( RibbonButtonData ) ),\n  onStateChange: React.PropTypes.func\n};\n\nRibbonGroup.defaultProps = {\n  id: newGUID(),\n  items: []\n};\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport React from 'react';\nimport ClassNames from 'classnames';\nimport RibbonGroup from './RibbonGroup';\nimport RibbonToggleButton from './RibbonToggleButton';\nimport RibbonToggleButtonData from './data/RibbonToggleButtonData';\nimport { newGUID, stderr } from './Utility';\n\nconst Current = Symbol( 'current' );\nconst Default = Symbol( 'default' );\n\n/**\n * RibbonRadioButtonGroup\n * @extends RibbonGroup\n * @class\n */\nexport default class RibbonRadioButtonGroup extends RibbonGroup {\n  /**\n   * RibbonRadioButtonGroup constructor\n   * @param {object} props - React component properties\n   */\n  constructor( props ) {\n    super( props );\n\n    this[Current] = undefined;\n    this[Default] = undefined;\n  }\n\n  /**\n   * Current actived RibbonToggleButton.\n   * @return {string} - RibbonToggleButton id.\n   */\n  get current() {\n    return this[Current];\n  }\n\n  /**\n   * Current actived RibbonToggleButton.\n   * @param {string} id - RibbonToggleButton id.\n   */\n  set current( id ) {\n    const current = this.items.find( ( item ) => item.id === id && item.enabled );\n    if( !current ) throw '[RibbonRadioButtonGroup] Input id not exists or disabled.';\n\n    current.actived = true;\n    this[Current] = id;\n\n    if( !this.default )\n      this.default = id;\n\n    this.items.map( ( item ) => {\n      if( item.id !== id ) item.actived = false;\n    });\n  }\n\n  /**\n   * Default actived RibbonToggleButton.\n   * @return {string} - RibbonToggleButton id.\n   */\n  get default() {\n    return this[Default];\n  }\n\n  /**\n   * Default actived RibbonToggleButton.\n   * @param {string} - RibbonToggleButton id.\n   */\n  set default( id ) {\n    const item = this.items.find( ( item ) => item.id === id && item.enabled );\n    if( !item ) throw '[RibbonRadioButtonGroup] Input id not exists or disabled.';\n\n    this[Default] = id;\n\n    if( !this.current )\n      this.current = id;\n  }\n\n  /**\n   * Reset current item to the default.\n   */\n  resetCurrent() {\n    this.current = this.default;\n  }\n\n  /**\n   * Add new RibbonToggleButton by given data.\n   * @param {RibbonToggleButtonData} itemData - Ribbon button data for creating new item in the RibbonRadioButtonGroup.\n   * @return {RibbonToggleButton} - Rendered RibbonToggleButton component.\n   * @override\n   */\n  addItem( itemData ) {\n    if( !(itemData instanceof RibbonToggleButtonData) )\n      return stderr( '%c[RibbonGroup] Input itemData is invalid or duplicate.', 'color:red;' );\n\n    const item = super.addItem( itemData );\n\n    if( !this.default )\n      this.default = item.id;\n\n    return item;\n  }\n\n  render() {\n    const scope = this;\n    const items = this.state.items;\n\n    const updateCurrentItem = ( id ) => {\n      if( typeof id !== 'string' ) return;\n\n      scope.current = id;\n    };\n\n    const updateItem = ( id, data ) => {\n      let items = scope.state.items;\n      const item = items.find( ( item ) => item.id === id );\n      if( !item ) return;\n\n      Object.assign( item, data );\n\n      const prop = { items };\n      const onStateChange = scope.props.onStateChange;\n      onStateChange && onStateChange( scope.id, prop );\n\n      scope.setState( prop );\n    };\n\n    const createItem = ( item ) => {\n      return (\n        <RibbonToggleButton\n          key={ item.id }\n          id={ item.id }\n          name={ item.name }\n          displayName={ item.displayName }\n          enabled={ item.enabled }\n          hidden={ item.hidden }\n          type={ item.type }\n          actived={ item.actived }\n          icon={ item.icon }\n          tooltip={ item.tooltip }\n          toggleable={ item.toggleable }\n          clickHandler={ item.clickHandler }\n          onGroupCurrentChange={ () => { updateCurrentItem( item.id ); } }\n          onStateChange={ updateItem }\n          ref={ ( c ) => { if( c ) scope.items.push( c ); } } />\n      );\n    };\n\n    const dynCSS = ClassNames({\n      'ui-ribbon-disabled': ( this.enabled === false ),\n      'ui-ribbon-invisible': this.hidden\n    });\n\n    return (\n      <div\n        key={ this.id }\n        id={ this.id }\n        className={ 'ui-ribbon-group ui-ribbon-inline ' + dynCSS }>\n\n        { items.map( createItem ) }\n      </div>\n    );\n  }\n}\n\nRibbonGroup.propTypes = {\n  id: React.PropTypes.string.isRequired,\n  items: React.PropTypes.arrayOf( React.PropTypes.instanceOf( RibbonToggleButtonData ) ),\n  onStateChange: React.PropTypes.func\n};\n\nRibbonGroup.defaultProps = {\n  id: newGUID(),\n  items: []\n};\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport RibbonItemData from './RibbonItemData';\n\nconst Items = Symbol( 'items' );\n\n/**\n * RibbonGroupData\n * @extends RibbonItemData\n * @class\n */\nexport default class RibbonGroupData extends RibbonItemData {\n  /**\n   * RibbonGroupData constructor\n   * @param {string} name - The name of this instance used by the internal mechanism.\n   * @param {string} displayName - The name of this instance shown on the user interface, might be a localized string.\n   */\n  constructor( name, displayName ) {\n    super( name, displayName );\n\n    this[Items] = [];\n  }\n\n  /**\n   * Button type.\n   * @return {string} -\tButton type for identification.\n   * @override\n   */\n  get type() {\n    return 'ui-ribbon-group';\n  }\n\n  /**\n   * Panel's children items.\n   * @return {RibbonItemData[]} - Ribbon item data.\n   */\n  get items() {\n    return this[Items];\n  }\n\n  /**\n   * Panel's children items.\n   * @return {RibbonItemData[]} [items = []]- Ribbon item data.\n   */\n  set items( items = [] ) {\n    this[Items] = items;\n  }\n}\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport RibbonGroupData from './RibbonGroupData';\n\n/**\n * RibbonRadioButtonGroupData\n * @extends RibbonGroupData\n * @class\n */\nexport default class RibbonRadioButtonGroupData extends RibbonGroupData {\n  /**\n   * RibbonRadioButtonGroupData constructor\n   * @param {string} name - The name of this instance used by the internal mechanism.\n   * @param {string} displayName - The name of this instance shown on the user interface, might be a localized string.\n   */\n  constructor( name, displayName ) {\n    super( name, displayName );\n  }\n\n  /**\n   * Button type.\n   * @return {string} -\tButton type for identification.\n   * @override\n   */\n  get type() {\n    return 'ui-ribbon-radio-group';\n  }\n}\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport React from 'react';\nimport ClassNames from 'classnames';\nimport RibbonBase from './RibbonBase';\nimport RibbonItem from './RibbonItem';\nimport RibbonButton from './RibbonButton';\nimport RibbonPushButton from './RibbonPushButton';\nimport RibbonToggleButton from './RibbonToggleButton';\nimport RibbonGroup from './RibbonGroup';\nimport RibbonRadioButtonGroup from './RibbonRadioButtonGroup';\nimport RibbonItemData from './data/RibbonItemData';\nimport RibbonButtonData from './data/RibbonButtonData';\nimport RibbonPushButtonData from './data/RibbonPushButtonData';\nimport RibbonToggleButtonData from './data/RibbonToggleButtonData';\nimport RibbonGroupData from './data/RibbonGroupData';\nimport RibbonRadioButtonGroupData from './data/RibbonRadioButtonGroupData';\nimport { newGUID, stderr } from './Utility';\n\nconst Items = Symbol( 'items' );\n\n/**\n * RibbonPanel\n * @extends RibbonBase\n * @class\n */\nexport default class RibbonPanel extends RibbonBase {\n  /**\n   * RibbonPanel constructor\n   * @param {object} props - React component properties\n   */\n  constructor( props ) {\n    super( props );\n\n    this.state = Object.assign( this.state,\n      {\n        items: [].concat( props.items )\n      });\n\n    this[Items] = [];\n  }\n\n  /**\n   * Panel has seperator or not.\n   * @return {bool} - If true, panel will be seperated with other panels by a panel seperator.\n   */\n  get seperator() {\n    return this.props.seperator;\n  }\n\n  /**\n   * Panel's children items\n   * @return {[RibbonItemData]} - Ribbon item data.\n   */\n  get items() {\n    return this[Items];\n  }\n\n  /**\n   * Instance edis/en-able status.\n   * @return {bool} - If false, make instance be disabled.\n   */\n  get enabled() {\n    return super.enabled;\n  }\n\n  /**\n   * Instance edis/en-able status.\n   * @param {bool} [enabled = true] - If false, make instance be disabled.\n   */\n  set enabled( enabled = true ) {\n    if( this.hidden ) return;\n\n    const isEnabled = ( enabled === true );\n    super.enabled = isEnabled;\n\n    // Cascaded applying changes\n    this.items.map( ( item ) => {\n      item.enabled = isEnabled;\n    });\n  }\n\n  /**\n   * Instance is hidden or not.\n   * @return {bool} - If false, instance is going to disppear on the UI.\n   */\n  get hidden() {\n    return super.hidden;\n  }\n\n  /**\n   * Instance is hidden or not.\n   * @return {bool} [hidden = false]- If false, instance is going to disppear on the UI.\n   */\n  set hidden( hidden = false ) {\n    const isHidden = ( hidden === true );\n    super.hidden = isHidden;\n\n    // Cascaded applying changes\n    this.items.map( ( item ) => {\n      item.hidden = isHidden;\n    });\n  }\n\n  /**\n   * Add new RibbonItem by given data.\n   * @param {RibbonItemData} itemData - Ribbon item data for creating new item on the panel.\n   * @return {RibbonItem} - Rendered RibbonItem component.\n   */\n  addItem( itemData ) {\n    const idx = this.items.findIndex( ( item ) => ( item.id == itemData.id || item.name === itemData.name ) );\n    if( !(itemData instanceof RibbonItemData) || idx !== -1 )\n      return stderr( '%c[RibbonPanel] Input itemData is invalid or duplicate.', 'color:red;' );\n\n    const items = this.state.items.concat( itemData );\n\n    const prop = { items };\n    const onStateChange = this.props.onStateChange;\n    onStateChange && onStateChange( this.id, prop );\n\n    this.setState( prop );\n\n    return this.items[ this.items.length -1 ];\n  }\n\n  componentWillUpdate( nextProps, nextState ) {\n    this[Items].length = 0;\n  }\n\n  render() {\n    const scope = this;\n    const items = this.state.items;\n\n    const outerDynCSS = ClassNames({\n      'ui-ribbon-disabled': ( this.enabled === false ),\n      'ui-ribbon-invisible': this.hidden,\n      'ui-ribbon-inline': ( this.hidden === false )\n    });\n\n    const innerDynCSS = ClassNames({\n      'ui-ribbon-empty': ( items.length === 0 ),\n      'ui-riibon-panel-single-btn': ( items.length === 1 ),\n    });\n\n    const legendDynCSS = ClassNames({\n      'ui-ribbon-disabled': ( this.enabled === false )\n    });\n\n    const updateItem = ( id, data ) => {\n      let items = scope.state.items;\n      const item = items.find( ( item ) => item.id === id );\n      if( !item ) return;\n\n      Object.assign( item, data );\n\n      const prop = { items };\n      const onStateChange = scope.props.onStateChange;\n      onStateChange && onStateChange( scope.id, prop );\n\n      scope.setState( prop );\n    };\n\n    const createItem = ( item ) => {\n      let result;\n      if( item.type === 'ui-ribbon-radio-group' || item.type === 'ui-ribbon-group' ) {\n        const RibbonGroupLike = ( item.type === 'ui-ribbon-group' ) ? RibbonGroup : RibbonRadioButtonGroup;\n        result = (\n          <RibbonGroupLike\n            key={ item.id }\n            id={ item.id }\n            name={ item.name }\n            displayName={ item.displayName }\n            enabled={ item.enabled }\n            hidden={ item.hidden }\n            type={ item.type }\n            items={ item.items }\n            actived={ item.actived }\n            onStateChange={ updateItem }\n            ref={ ( c ) => { if( c ) scope.items.push( c ); } } />\n          );\n      } else if ( item.type === 'ui-ribbon-button-big' ) {\n        const RibbonPushButtonLike = ( item.role === 'ui-ribbon-button-toggle' ) ? RibbonToggleButton : RibbonPushButton;\n        result = (\n          <RibbonPushButtonLike\n            key={ item.id }\n            id={ item.id }\n            name={ item.name }\n            displayName={ item.displayName }\n            enabled={ item.enabled }\n            hidden={ item.hidden }\n            type={ item.type }\n            actived={ item.actived }\n            icon={ item.icon }\n            tooltip={ item.tooltip }\n            toggleable={ item.toggleable }\n            clickHandler={ item.clickHandler }\n            onStateChange={ updateItem }\n            ref={ ( c ) => { if( c ) scope.items.push( c ); } } />\n          );\n      }\n\n      return result;\n    };\n\n    const createSeperator = ( seperator = true ) => {\n      if( seperator )\n        return(\n          <div className=\"ui-ribbon-panel-seperator ui-ribbon-relative ui-ribbon-inline\"></div>\n        );\n    };\n\n    return (\n      <div\n        key={ this.id }\n        className={ 'ui-ribbon-panel-container ui-ribbon-relative ' + outerDynCSS }>\n        { createSeperator( this.seperator ) }\n\n        <div className={ 'ui-ribbon-panel ui-ribbon-relative ui-ribbon-inline ' + innerDynCSS }>\n          <div className=\"ui-ribbon-panel-contents\">\n            { items.map( createItem ) }\n\n            <div className={ 'ui-ribbon-panel-legend ui-ribbon-absolute ' + legendDynCSS }>\n              { this.displayName }\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nRibbonPanel.propTypes = {\n  id: React.PropTypes.string.isRequired,\n  seperator: React.PropTypes.bool,\n  items: React.PropTypes.arrayOf( React.PropTypes.instanceOf( RibbonItemData ) ),\n  onStateChange: React.PropTypes.func\n};\n\nRibbonPanel.defaultProps = {\n  id: newGUID(),\n  seperator: true,\n  items: []\n};\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport RibbonBaseData from './RibbonBaseData';\n\nconst Seperator = Symbol( 'seperator' );\nconst Items = Symbol( 'items' );\n\n/**\n * RibbonPanelData\n * @extends RibbonBaseData\n * @class\n */\nexport default class RibbonPanelData extends RibbonBaseData {\n  /**\n   * RibbonPanelData constructor\n   * @param {string} name - The name of this instance used by the internal mechanism.\n   * @param {string} displayName - The name of this instance shown on the user interface, might be a localized string.\n   */\n  constructor( name, displayName ) {\n    super( name, displayName );\n\n    this[Seperator] = true;\n    this[Items] = [];\n  }\n\n  /**\n   * Panel has seperator or not.\n   * @return {bool} - If true, panel will be seperated with other panels by a panel seperator.\n   */\n  get seperator() {\n    return this[Seperator];\n  }\n\n  /**\n   * Panel has seperator or not.\n   * @param {bool} [seperator = true] - If true, panel will be seperated with other panels by a panel seperator.\n   */\n  set seperator( seperator = true ) {\n    this[Seperator] = ( seperator === true );\n  }\n\n  /**\n   * Panel's children items.\n   * @return {RibbonItemData[]} - Ribbon item data.\n   */\n  get items() {\n    return this[Items];\n  }\n\n  /**\n   * Panel's children items.\n   * @return {RibbonItemData[]} [items = []]- Ribbon item data.\n   */\n  set items( items = [] ) {\n    this[Items] = items;\n  }\n}\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport React from 'react';\nimport ClassNames from 'classnames';\nimport RibbonBase from './RibbonBase';\nimport RibbonPanel from './RibbonPanel';\nimport RibbonPanelData from './data/RibbonPanelData';\nimport { newGUID, stderr } from './Utility';\n\nconst Panels = Symbol( 'panels' );\n\n/**\n * RibbonTab\n * @extends RibbonBase\n * @class\n */\nexport default class RibbonTab extends RibbonBase {\n  /**\n   * RibbonTab constructor\n   * @param {object} props - React component properties\n   */\n  constructor( props ) {\n    super( props );\n\n    let actived = ( props.actived === true );\n\n    this.state = Object.assign( this.state,\n      {\n        actived: actived,\n        panels: [].concat( props.panels )\n      });\n\n    this[Panels] = [];\n\n    this.handleClick = this.handleClick.bind( this );\n  }\n\n  /**\n   * Tab type.\n   * @return {string} - Tab type for identification.\n   */\n  get type() {\n    return this.props.type;\n  }\n\n  /**\n   * Instance edis/en-able status.\n   * @return {bool} - If false, make instance be disabled.\n   */\n  get enabled() {\n    return super.enabled;\n  }\n\n  /**\n   * Instance edis/en-able status.\n   * @param {bool} [enabled = true] - If false, make instance be disabled.\n   */\n  set enabled( enabled = true ) {\n    if( this.hidden ) return;\n\n    const isEnabled = ( enabled === true );\n\n    const prop = { enabled: isEnabled, actived: false };\n    const onStateChange = this.props.onStateChange;\n    onStateChange && onStateChange( this.id, prop );\n\n    // Cascaded applying changes\n    this.panels.map( ( panel ) => {\n      panel.enabled = isEnabled;\n    });\n\n    this.setState( prop );\n  }\n\n  /**\n   * Instance is hidden or not.\n   * @return {bool} - If false, instance is going to disppear on the UI.\n   */\n  get hidden() {\n    return super.hidden;\n  }\n\n  /**\n   * Instance is hidden or not.\n   * @return {bool} [hidden = false]- If false, instance is going to disppear on the UI.\n   */\n  set hidden( hidden = false ) {\n    const isHidden = ( hidden === true );\n    const isEnabled = !isHidden;\n\n    const prop = { hidden: isHidden, enabled: isEnabled, actived: false };\n    const onStateChange = this.props.onStateChange;\n    onStateChange && onStateChange( this.id, prop );\n\n    // Cascaded applying changes\n    this.panels.map( ( panel ) => {\n      panel.hidden = isHidden;\n    });\n\n    this.setState( prop );\n  }\n\n  /**\n   * Tab actived state.\n   * @return {bool} - If true, it repsents tab is selected currently.\n   */\n  get actived() {\n    return this.state.actived;\n  }\n\n  /**\n   * Tab actived state.\n   * @return {bool} [actived = false] - If true, it repsents tab is selected currently.\n   */\n  set actived( actived = false ) {\n    const isActived = ( actived === true );\n    const prop = { actived: isActived };\n\n    const onStateChange = this.props.onStateChange;\n    onStateChange && onStateChange( this.id, prop );\n\n    this.setState( prop );\n  }\n\n  /**\n   * Tab's children panels\n   * @return {[RibbonPanelData]} - Ribbon panel data.\n   */\n  get panels() {\n    return this[Panels];\n  }\n\n  /**\n   * Add new panel by given data.\n   * @param {RibbonPanelData} panelData - Ribbon panel data for creating new panel.\n   * @return {RibbonPanel} - Rendered RibbonPanel component.\n   */\n  addPanel( panelData ) {\n    const idx = this.panels.findIndex( ( panel ) => ( panel.id == panelData.id || panel.name === panelData.name ) );\n    if( !(panelData instanceof RibbonPanelData) || idx !== -1 )\n      return stderr( '%c[RibbonTab] Input panelData is invalid or duplicate.', 'color:red;' );\n\n    panelData.seperator = ( this.panels.length !== 0 );\n    const panels = this.state.panels.concat( panelData );\n\n    const prop = { panels };\n    const onStateChange = this.props.onStateChange;\n    onStateChange && onStateChange( this.id, prop );\n\n    this.setState( prop );\n\n    return this.panels[ this.panels.length -1 ];\n  }\n\n  componentWillUpdate( nextProps, nextState ) {\n    this[Panels].length = 0;\n  }\n\n  /**\n   * Tab clicking event handler\n   */\n  handleClick() {\n    if( this.type === 'ui-ribbon-tab-application' ) return;\n\n    const onClick = this.props.onClick;\n    onClick && onClick( this.id );\n  }\n\n  render() {\n    const scope = this;\n    const panels = this.state.panels;\n    const dynCSS = ClassNames({\n      'ui-ribbon-active': this.actived,\n      'ui-ribbon-disabled': ( this.enabled === false ),\n      'ui-ribbon-invisible': this.hidden,\n      'ui-ribbon-inline': ( this.hidden === false )\n    });\n\n    const updatePanel = ( id, data ) => {\n      let panels = scope.state.panels;\n      const panel = panels.find( ( panel ) => panel.id === id );\n      if( !panel ) return;\n\n      Object.assign( panel, data );\n\n      const prop = { panels };\n      const onStateChange = scope.props.onStateChange;\n      onStateChange && onStateChange( scope.id, prop );\n\n      scope.setState( prop );\n    };\n\n    const createPanel = ( panel ) => {\n      return (\n        <RibbonPanel\n          key={ panel.id }\n          id={ panel.id }\n          name={ panel.name }\n          displayName={ panel.displayName }\n          enabled={ panel.enabled }\n          hidden={ panel.hidden }\n          seperator={ panel.seperator }\n          items={ panel.items }\n          onStateChange={ updatePanel }\n          ref={ ( c ) => { if( c ) scope.panels.push( c ) ;} } />\n      );\n    };\n\n    return (\n      <li\n        key={ this.id }\n        id={ this.id }\n        className={ this.type + ' ' + dynCSS }\n        role=\"ui-ribbon-tab\"\n        onClick={ this.handleClick } >\n\n        <span className=\"ui-ribbon-uppercase\">{ this.displayName }</span>\n        <div className=\"ui-ribbon-tab-contents ui-ribbon-absolute\">\n          { panels.map( createPanel ) }\n        </div>\n      </li>\n    );\n  }\n}\n\nRibbonTab.propTypes = {\n  id: React.PropTypes.string.isRequired,\n  type: React.PropTypes.string.isRequired,\n  actived: React.PropTypes.bool,\n  panels: React.PropTypes.arrayOf( React.PropTypes.instanceOf( RibbonPanelData ) ),\n  onStateChange: React.PropTypes.func\n};\n\nRibbonTab.defaultProps = {\n  id: newGUID(),\n  type: 'ui-ribbon-tab-normal',\n  actived: false,\n  panels: []\n};\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport React from 'react';\nimport { newGUID } from './Utility';\n\n/**\n * RibbonAppMenuSeperator\n * @extends RibbonBase\n * @class\n */\nexport default class RibbonAppMenuSeperator extends React.Component {\n  /**\n   * RibbonAppMenuSeperator constructor\n   * @param {object} props - React component properties\n   */\n  constructor( props ) {\n    super( props );\n  }\n\n  /**\n   * Item type.\n   * @return {string} - Item type for identification.\n   */\n  get type() {\n    return 'ui-ribbon-seperator';\n  }\n\n  render() {\n    return (\n      <li key={ this.id } id={ this.id} className=\"ui-ribbon-seperator\">\n          <div className=\"ui-ribbon-seperator\"></div>\n      </li>\n    );\n  }\n}\n\nRibbonAppMenuSeperator.propTypes = {\n  id: React.PropTypes.string.isRequired\n};\n\nRibbonAppMenuSeperator.defaultProps = {\n  id: newGUID()\n};","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport React from 'react';\nimport ClassNames from 'classnames';\nimport RibbonBase from './RibbonBase';\nimport RibbonAppMenuSeperator from './RibbonAppMenuSeperator';\nimport { newGUID } from './Utility';\n\n/**\n * RibbonAppMenuItem\n * @extends RibbonBase\n * @class\n */\nexport default class RibbonAppMenuItem extends RibbonBase {\n  /**\n   * RibbonAppMenuItem constructor\n   * @param {object} props - React component properties\n   */\n  constructor( props ) {\n    super( props );\n\n    let actived = ( props.actived === true );\n    let content = props.content;\n\n    this.state = Object.assign( this.state,\n      {\n        actived: actived,\n        content: content\n      });\n\n    this.handleClick = this.handleClick.bind( this );\n  }\n\n  /**\n   * Item type.\n   * @return {string} - Item type for identification.\n   */\n  get type() {\n    return this.props.type;\n  }\n\n  /**\n   * Panel has seperator or not.\n   * @return {bool} - If true, panel will be seperated with other panels by a panel seperator.\n   */\n  get seperator() {\n    return this.props.seperator;\n  }\n\n  /**\n   * Instance edis/en-able status.\n   * @return {bool} - If false, make instance be disabled.\n   */\n  get enabled() {\n    return super.enabled;\n  }\n\n  /**\n   * Instance edis/en-able status.\n   * @param {bool} [enabled = true] - If false, make instance be disabled.\n   */\n  set enabled( enabled = true ) {\n    if( this.hidden ) return;\n\n    const isEnabled = ( enabled === true );\n    super.enabled = isEnabled;\n  }\n\n  /**\n   * Instance is hidden or not.\n   * @return {bool} - If false, instance is going to disppear on the UI.\n   */\n  get hidden() {\n    return super.hidden;\n  }\n\n  /**\n   * Instance is hidden or not.\n   * @return {bool} [hidden = false]- If false, instance is going to disppear on the UI.\n   */\n  set hidden( hidden = false ) {\n    const isHidden = ( hidden === true );\n    super.hidden = isHidden;\n  }\n\n  /**\n   * Tab actived state.\n   * @return {bool} - If true, it repsents tab is selected currently.\n   */\n  get actived() {\n    return this.state.actived;\n  }\n\n  /**\n   * Tab actived state.\n   * @return {bool} [actived = false] - If true, it repsents tab is selected currently.\n   */\n  set actived( actived = false ) {\n    const isActived = ( actived === true );\n    const prop = { actived: isActived };\n\n    const onStateChange = this.props.onStateChange;\n    onStateChange && onStateChange( this.id, prop, true );\n\n    this.setState( prop );\n  }\n\n  /**\n   * Menu content handler for rendering app menu content.\n   * @return {Function} - Menu content handler.\n   */\n  get content() {\n    return this.state.content;\n  }\n\n  /**\n   * Menu content handler for rendering app menu content.\n   * @param {Function} [content] - Menu content handler.\n   */\n  set content( content ) {\n    if( !(content instanceof Function) ) throw 'Input content handler is invalid.';\n\n    const prop = { content };\n    const onStateChange = this.props.onStateChange;\n    onStateChange && onStateChange( this.id, prop );\n\n    this.setState( prop );\n  }\n\n  /**\n   * Tab clicking event handler\n   */\n  handleClick() {\n    const onMenuClick = this.props.onMenuClick;\n    onMenuClick && onMenuClick( this.id );\n  }\n\n  render() {\n    const scope = this;\n    const dynCSS = ClassNames({\n      'ui-ribbon-active': this.actived,\n      'ui-ribbon-disabled': ( this.enabled === false ),\n      'ui-ribbon-invisible': this.hidden\n    });\n\n    const createSeperator = ( seperator = true ) => {\n      if( seperator ) {\n        const id = newGUID();\n        return(\n          <RibbonAppMenuSeperator key={ id } id={ id } />\n        );\n      }\n    };\n\n    return (\n      <div>\n        { createSeperator( this.seperator ) }\n        <li key={ this.id } className={ dynCSS } onClick={ this.handleClick }>\n            <div> { this.displayName } </div>\n        </li>\n      </div>\n    );\n  }\n}\n\nRibbonAppMenuItem.propTypes = {\n  id: React.PropTypes.string.isRequired,\n  type: React.PropTypes.string.isRequired,\n  seperator: React.PropTypes.bool,\n  actived: React.PropTypes.bool,\n  content: React.PropTypes.func,\n  onMenuClick: React.PropTypes.func,\n  onStateChange: React.PropTypes.func\n};\n\nRibbonAppMenuItem.defaultProps = {\n  id: newGUID(),\n  type: 'ui-ribbon-app-menu-normal',\n  seperator: false,\n  actived: false\n};","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport React from 'react';\nimport RibbonAppMenuItem from './RibbonAppMenuItem';\nimport { newGUID } from './Utility';\n\n/**\n * RibbonAppMenuButton\n * @extends RibbonAppMenuItem\n * @class\n */\nexport default class RibbonAppMenuButton extends RibbonAppMenuItem {\n  /**\n   * RibbonAppMenuButton constructor\n   * @param {object} props - React component properties\n   */\n  constructor( props ) {\n    super( props );\n\n    this.handleClick = this.handleClick.bind( this );\n  }\n\n  /**\n   * Button click eveent handler.\n   * @return {Function} - Click eveent handler.\n   */\n  get clickHandler() {\n    return this.state.content;\n  }\n\n  /**\n   * Button click eveent handler.\n   * @param {Function} handler - Click eveent handler.\n   */\n  set clickHandler( handler ) {\n    if( !(handler instanceof Function) ) throw 'Input clicking handler is invalid.';\n\n    this.content = handler;\n  }\n\n  /**\n   * Menu clicking event handler\n   */\n  handleClick( event ) {\n    if( !this.enabled ) return;\n\n    const onClick = this.state.content;\n    onClick && onClick( event );\n  }\n}\n\nRibbonAppMenuButton.propTypes = {\n  id: React.PropTypes.string.isRequired,\n  type: React.PropTypes.string.isRequired,\n  seperator: React.PropTypes.bool,\n  actived: React.PropTypes.bool,\n  content: React.PropTypes.func,\n  onStateChange: React.PropTypes.func\n};\n\nRibbonAppMenuButton.defaultProps = {\n  id: newGUID(),\n  type: 'ui-ribbon-app-menu-button',\n  seperator: true,\n  actived: false\n};","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport RibbonBaseData from './RibbonBaseData';\n\nconst Seperator = Symbol( 'seperator' );\nconst\tActived = Symbol( 'actived' );\nconst Content = Symbol( 'contnet' );\n\n/**\n * RibbonAppMenuItemData\n * @extends RibbonBaseData\n * @class\n */\nexport default class RibbonAppMenuItemData extends RibbonBaseData {\n  /**\n   * RibbonAppMenuItemData constructor\n   * @param {string} name - The name of this instance used by the internal mechanism.\n   * @param {string} displayName - The name of this instance shown on the user interface, might be a localized string.\n   */\n  constructor( name, displayName ) {\n    super( name, displayName );\n\n    this[Seperator] = false;\n    this[Actived] = false;\n    this[Content] = undefined;\n  }\n\n  /**\n   * Menu type.\n   * @return {string} -\tButton type for identification.\n   * @override\n   */\n  get type() {\n    return 'ui-ribbon-app-menu-normal';\n  }\n\n  /**\n   * Panel has seperator or not.\n   * @return {bool} - If true, panel will be seperated with other panels by a panel seperator.\n   */\n  get seperator() {\n    return this[Seperator];\n  }\n\n  /**\n   * Panel has seperator or not.\n   * @param {bool} [seperator = true] - If true, panel will be seperated with other panels by a panel seperator.\n   */\n  set seperator( seperator = true ) {\n    this[Seperator] = ( seperator === true );\n  }\n\n  /**\n   * Tab actived state.\n   * @return {bool} - If true, it repsents tab is selected currently.\n   */\n  get actived() {\n    return this[Actived];\n  }\n\n  /**\n   * Tab actived state.\n   * @return {bool} [actived = false] - If true, it repsents tab is selected currently.\n   */\n  set actived( actived = false ) {\n    this[Actived] = ( actived === true );\n  }\n\n  /**\n   * Menu content handler for rendering app menu content.\n   * @return {Function} - Menu content handler.\n   */\n  get content() {\n    return this[Content];\n  }\n\n  /**\n   * Menu content handler for rendering app menu content.\n   * @param {Function} [content] - Menu content handler.\n   */\n  set content( content ) {\n    if( !(content instanceof Function) ) throw 'Input content handler is invalid.';\n\n    this[Content] = content;\n  }\n}\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport RibbonAppMenuItemData from './RibbonAppMenuItemData';\n\n/**\n * RibbonAppMenuButtonData\n * @extends RibbonAppMenuItemData\n * @class\n */\nexport default class RibbonAppMenuButtonData extends RibbonAppMenuItemData {\n  /**\n   * RibbonAppMenuButtonData constructor\n   * @param {string} name - The name of this instance used by the internal mechanism.\n   * @param {string} displayName - The name of this instance shown on the user interface, might be a localized string.\n   */\n  constructor( name, displayName ) {\n    super( name, displayName );\n  }\n\n  /**\n   * Menu type.\n   * @return {string} -\tButton type for identification.\n   * @override\n   */\n  get type() {\n    return 'ui-ribbon-app-menu-button';\n  }\n}\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport React from 'react';\nimport ClassNames from 'classnames';\nimport RibbonBase from './RibbonBase';\nimport RibbonAppMenuItem from './RibbonAppMenuItem';\nimport RibbonAppMenuButton from './RibbonAppMenuButton';\nimport RibbonAppMenuItemData from './data/RibbonAppMenuItemData';\nimport RibbonAppMenuButtonData from './data/RibbonAppMenuButtonData';\nimport { newGUID, stderr } from './Utility';\n\nconst Items = Symbol( 'items' );\nconst Current = Symbol( 'current' );\nconst Default = Symbol( 'default' );\n\n/**\n * RibbonAppTab\n * @extends RibbonBase\n * @class\n */\nexport default class RibbonAppTab extends RibbonBase {\n  /**\n   * RibbonAppTab constructor\n   * @param {object} props - React component properties\n   */\n  constructor( props ) {\n    super( props );\n\n    this.state = Object.assign( this.state,\n      {\n        items: [].concat( props.items )\n      });\n\n    this[Items] = [];\n    this[Current] = undefined;\n    this[Default] = undefined;\n\n    this.handleClick = this.handleClick.bind( this );\n    this.handleClose = this.handleClose.bind( this );\n    this.handleItemClick = this.handleItemClick.bind( this );\n  }\n\n  /**\n   * Tab type.\n   * @return {string} - Tab type for identification.\n   */\n  get type() {\n    return this.props.type;\n  }\n\n  /**\n   * Panel's children items\n   * @return {[RibbonItemData]} - Ribbon item data.\n   */\n  get items() {\n    return this[Items];\n  }\n\n  /**\n   * Current actived RibbonAppMenuItem.\n   * @return {string} - RibbonAppMenuItem id.\n   */\n  get current() {\n    return this[Current];\n  }\n\n  /**\n   * Current actived RibbonAppMenuItem.\n   * @param {string} id - RibbonAppMenuItem id.\n   */\n  set current( id ) {\n    const current = this.items.find( ( item ) => item.id === id && item.type !== 'ui-ribbon-app-menu-button' && item.enabled );\n    if( !current ) throw '[RibbonAppTab] Input id not exists or disabled.';\n\n    current.actived = true;\n    this[Current] = id;\n\n    if( !this.default )\n      this.default = id;\n\n    this.items.map( ( item ) => {\n      if( item.id !== id ) item.actived = false;\n    });\n  }\n\n  /**\n   * Default actived RibbonAppMenuItem.\n   * @return {string} - RibbonAppMenuItem id.\n   */\n  get default() {\n    return this[Default];\n  }\n\n  /**\n   * Default actived RibbonAppMenuItem.\n   * @param {string} - RibbonAppMenuItem id.\n   */\n  set default( id ) {\n    const item = this.items.find( ( item ) => item.id === id && item.type !== 'ui-ribbon-app-menu-button' && item.enabled );\n    if( !item ) throw '[RibbonAppTab] Input id not exists or disabled.';\n\n    this[Default] = id;\n\n    if( !this.current )\n      this.current = id;\n  }\n\n  /**\n   * Reset current item to the default.\n   */\n  resetCurrent() {\n    this.current = this.default;\n  }\n\n  /**\n   * Instance edis/en-able status.\n   * @return {bool} - If false, make instance be disabled.\n   */\n  get enabled() {\n    return super.enabled;\n  }\n\n  /**\n   * Instance edis/en-able status.\n   * @param {bool} [enabled = true] - If false, make instance be disabled.\n   */\n  set enabled( enabled = true ) {\n    if( this.hidden ) return;\n\n    const isEnabled = ( enabled === true );\n\n    const prop = { enabled: isEnabled, actived: false };\n    const onStateChange = this.props.onStateChange;\n    onStateChange && onStateChange( this.id, prop, true );\n\n    this.setState( prop );\n\n    // Cascaded applying changes\n    this.items.map( ( item ) => {\n      item.enabled = isEnabled;\n    });\n  }\n\n  /**\n   * Instance is hidden or not.\n   * @return {bool} - If false, instance is going to disppear on the UI.\n   */\n  get hidden() {\n    return super.hidden;\n  }\n\n  /**\n   * Instance is hidden or not.\n   * @return {bool} [hidden = false]- If false, instance is going to disppear on the UI.\n   */\n  set hidden( hidden = false ) {\n    const isHidden = ( hidden === true );\n    const isEnabled = !isHidden;\n\n    const prop = { hidden: isHidden, enabled: isEnabled, actived: false };\n    const onStateChange = this.props.onStateChange;\n    onStateChange && onStateChange( this.id, prop, true );\n\n    this.setState( prop );\n\n    // Cascaded applying changes\n    this.items.map( ( item ) => {\n      item.hidden = isHidden;\n    });\n  }\n\n  /**\n   * Tab actived state.\n   * @return {bool} - If true, it repsents tab is selected currently.\n   */\n  get actived() {\n    return this.state.actived;\n  }\n\n  /**\n   * Tab actived state.\n   * @return {bool} [actived = false] - If true, it repsents tab is selected currently.\n   */\n  set actived( actived = false ) {\n    const isActived = ( actived === true );\n    const prop = { actived: isActived };\n\n    const onStateChange = this.props.onStateChange;\n    onStateChange && onStateChange( this.id, prop, true );\n\n    this.setState( prop );\n  }\n\n  /**\n   * Add new RibbonAppMenuItem by given data.\n   * @param {RibbonAppMenuItemData} itemData - Ribbon item data for creating new item on the app menu.\n   * @return {RibbonAppMenuItem} - Rendered RibbonAppMenuItem component.\n   */\n  addItem( itemData ) {\n    const idx = this.items.findIndex( ( item ) => ( item.id === itemData.id || item.name === itemData.name ) );\n    if( !(itemData instanceof RibbonAppMenuItemData) || idx !== -1 )\n      return stderr( '%c[RibbonAppTab] Input itemData is invalid or duplicate.', 'color:red;' );\n\n    const items = this.state.items.concat( itemData );\n\n    const prop = { items };\n    const onStateChange = this.props.onStateChange;\n    onStateChange && onStateChange( this.id, prop, true );\n\n    this.setState( prop );\n\n    const item = this.items[ this.items.length -1 ];\n    if( !(item instanceof RibbonAppMenuButton) && !this.default )\n      this.default = item.id;\n\n    return item;\n  }\n\n  /**\n   * Active target item by given id.\n   * @param {string} itemId - Item Id.\n   */\n  activeItemById( itemId ) {\n    if( typeof itemId !== 'string' ) return stderr( '%c[RibbonAppTab] ItemId should be a string.', 'color:red;' );\n\n    const item = this.items.find( ( item ) => item.id === itemId );\n    if( !item ) throw '[RibbonAppTab] Input item id not exists.';\n\n    item.actived = true;\n  }\n\n  componentWillUpdate() {\n    this[Items].length = 0;\n  }\n\n  /**\n   * Tab clicking event handler\n   */\n  handleClick() {\n    const onClick = this.props.onClick;\n    onClick && onClick( this.id );\n  }\n\n  handleClose( event ) {\n    event.stopPropagation();\n\n    this.actived = false;\n  }\n\n  /**\n   * Tab clicking event handler\n   */\n  handleItemClick( itemId ) {\n    this.activeItemById( itemId );\n  }\n\n  render() {\n    const scope = this;\n    const dynCSS = ClassNames({\n      'ui-ribbon-active': this.actived,\n      'ui-ribbon-disabled': ( this.enabled === false ),\n      'ui-ribbon-invisible': this.hidden,\n      'ui-ribbon-inline': ( this.hidden === false )\n    });\n\n    const updateCurrentItem = ( id ) => {\n      if( typeof id !== 'string' ) return;\n\n      scope[Current] = id;\n    };\n\n    const createItem = ( item ) => {\n      if( item.type === 'ui-ribbon-app-menu-button' ) {\n        return (\n          <RibbonAppMenuButton\n            key={ item.id }\n            id={ item.id }\n            name={ item.name }\n            displayName={ item.displayName }\n            enabled={ item.enabled }\n            hidden={ item.hidden }\n            type={ item.type }\n            actived={ item.actived }\n            content={ item.content }\n            seperator={ item.seperator }\n            onStateChange={ updateItem }\n            ref={ ( c ) => { if( c ) scope.items.push( c ); } } />\n        );\n      } else {\n        return (\n          <RibbonAppMenuItem\n            key={ item.id }\n            id={ item.id }\n            name={ item.name }\n            displayName={ item.displayName }\n            enabled={ item.enabled }\n            hidden={ item.hidden }\n            type={ item.type }\n            actived={ item.actived }\n            content={ item.content }\n            seperator={ item.seperator }\n            onMenuClick={ scope.handleItemClick }\n            onStateChange={ updateItem }\n            ref={ ( c ) => { if( c ) scope.items.push( c ); } } />\n        );\n      }\n    };\n\n    const nextOpt = ( id, data ) => {\n      // For de/activating menu by changing menu's actived property.\n      if( data.hasOwnProperty( 'actived' ) ) {\n        if( data.actived === true ) {\n          scope.items.map( ( item ) => {\n            if( item.id !== id ) item.actived = false;\n          });\n\n          updateCurrentItem( id );\n        } else {\n          // For activing other menu while current menu is diabled.\n          if( data.hasOwnProperty( 'enabled' ) && ( data.enabled === false ) ) {\n            const item = scope.items.find( ( item ) => ( item.id !== id && item.enabled === true && item.type !== 'ui-ribbon-app-menu-button' ) );\n            if( !item ) return;\n\n            item.actived = true;\n            updateCurrentItem( id );\n          }\n        }\n      }\n    };\n\n    const updateItem = ( id, data ) => {\n      let items = scope.state.items;\n      const item = items.find( ( item ) => item.id === id );\n      if( !item ) return;\n\n      Object.assign( item, data );\n\n      const prop = { items };\n      const onStateChange = scope.props.onStateChange;\n      onStateChange && onStateChange( scope.id, prop );\n\n      scope.setState( prop );\n\n      if( item.type === 'ui-ribbon-app-menu-button' ) return;\n\n      nextOpt( id, data );\n    };\n\n    const renderItemContent = ( id ) => {\n      if( !id ) return;\n\n      let items = scope.state.items;\n      const item = items.find( ( item ) => item.id === id );\n      if( !item ) return;\n\n      const content = item.content;\n      if( !content ) return;\n\n      return content();\n    };\n\n    return (\n      <li\n        key={ this.id }\n        id={ this.id }\n        className={ this.type + ' ' + dynCSS }\n        role=\"ui-ribbon-tab\"\n        onClick={ this.handleClick } >\n\n        <span className=\"ui-ribbon-uppercase\">{ this.displayName }</span>\n        <div className=\"ui-ribbon-tab-application-contents ui-ribbon-absolute\">\n          <div id=\"ribbon-nav-application-menu\">\n            <div className=\"ribbon-nav-back-arrow\" onClick={ this.handleClose }></div>\n            <ul role=\"ribbon-nav-application-menu-items\">\n              { this.state.items.map( createItem ) }\n            </ul>\n          </div>\n          <div role=\"ribbon-nav-application-menu-content\">\n            <div className=\"ribbon-content-area\">\n              { renderItemContent( this.current ) }\n            </div>\n          </div>\n        </div>\n      </li>\n    );\n  }\n}\n\nRibbonAppTab.propTypes = {\n  id: React.PropTypes.string.isRequired,\n  type: React.PropTypes.string.isRequired,\n  actived: React.PropTypes.bool,\n  items: React.PropTypes.arrayOf( React.PropTypes.instanceOf( RibbonAppMenuItemData ) ),\n  onStateChange: React.PropTypes.func\n};\n\nRibbonAppTab.defaultProps = {\n  id: newGUID(),\n  type: 'ui-ribbon-tab-application',\n  actived: false,\n  items: []\n};","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport React from 'react';\nimport RibbonTabData from './data/RibbonTabData';\nimport RibbonAppTabData from './data/RibbonAppTabData';\nimport RibbonTitlebarData from './data/RibbonTitlebarData';\nimport RibbonTitlebar from './RibbonTitlebar';\nimport RibbonTab from './RibbonTab';\nimport RibbonAppTab from './RibbonAppTab';\nimport { newGUID, stderr } from './Utility';\n\nconst Tabs = Symbol( 'tabs' );\n\n/**\n * Ribbon\n * @extends React.Component\n * @class\n */\nexport default class Ribbon extends React.Component {\n  /**\n   * RibbonBase constructor\n   * @param {object} props - React component properties\n   */\n  constructor( props ) {\n    super( props );\n\n    let appTab = new RibbonAppTabData();\n    let tabs = [ appTab ].concat( props.tabs );\n    let titlebar = new RibbonTitlebarData();\n\n    this.state = {\n      tabs: tabs,\n      titlebar: titlebar\n    };\n\n    this[Tabs] = [];\n\n    this.handleTabClick = this.handleTabClick.bind( this );\n  }\n\n  /**\n   * Content tabs\n   * @return {RibbonTab[]} - Array of RibbonTabs.\n   */\n  get tabs() {\n    return this[Tabs];\n  }\n\n  /**\n   * Toggle to show or hide app titlebar.\n   */\n  toggleAppTitle() {\n    this.refs.titlebar.toggleDisplay();\n  }\n\n  /**\n   * Add new tab by given data.\n   * @param {RibbonTabData} tabData - Ribbon tab data for creating new tab.\n   * @return {RibbonTab} - Rendered RibbonTab component.\n   */\n  addTab( tabData ) {\n    const idx = this.tabs.findIndex( ( tab ) => ( tab.id == tabData.id || tab.name === tabData.name ) );\n    if( !(tabData instanceof RibbonTabData) || idx !== -1 )\n      return stderr( '%c[Ribbon] Input tabData is invalid or duplicate.', 'color:red;' );\n\n    tabData.actived = ( this.tabs.length === 1 );\n    const tabs = this.state.tabs.concat( tabData );\n    this.setState({ tabs });\n\n    return this.tabs[ this.tabs.length - 1 ];\n  }\n\n  /**\n   * Active target tab by given id.\n   * @param {string} tabId - Tab Id.\n   */\n  activeTabById( tabId ) {\n    if( typeof tabId !== 'string' ) return stderr( '%c[Ribbon] TabId should be a string.', 'color:red;' );\n\n    const tab = this.tabs.find( ( tab ) => tab.id === tabId );\n    if( !tab ) throw '[Ribbon] Input tab id not exists.';\n\n    tab.actived = true;\n  }\n\n  /**\n   * Tab clicking event handler\n   */\n  handleTabClick( tabId ) {\n    this.activeTabById( tabId );\n  }\n\n  componentWillUpdate() {\n    this[Tabs].length = 0;\n  }\n\n  render() {\n    const scope = this;\n    const otherTabs = this.state.tabs;\n\n    const updateTitlebar = ( id, data ) => {\n      let titlebar = scope.state.titlebar;\n\n      if( titlebar.id !== id ) return;\n\n      Object.assign( titlebar, data );\n      scope.setState({ titlebar });\n    };\n\n    const createTitleBar = () => {\n      const data = scope.state.titlebar;\n      return (\n        <RibbonTitlebar\n          key={ data.id }\n          id={ data.id }\n          name={ data.name }\n          displayName={ data.title }\n          enabled={ data.enabled }\n          hidden={ data.hidden }\n          ref=\"titlebar\"\n          onStateChange={ updateTitlebar } />\n      );\n    };\n\n    const nextOpt = ( id, data ) => {\n      // For de/activating tab by changing tab's actived property.\n      if( data.hasOwnProperty( 'actived' ) ) {\n        if( data.actived === true ) {\n          scope.tabs.map( ( tab ) => {\n            if( tab.id !== id ) tab.actived = false;\n          });\n        } else {\n          // For activing other tab while current tab is diabled.\n          if( data.hasOwnProperty( 'enabled' ) && ( data.enabled === false ) ) {\n            const tab = scope.tabs.find( ( tab ) => ( tab.id !== id && tab.enabled === true && tab.type !== 'ui-ribbon-tab-application' ) );\n            if( !tab ) return;\n\n            tab.actived = true;\n          }\n        }\n      }\n    };\n\n    const updateTab = ( id, data, stopPropagation = false ) => {\n      let tabs = scope.state.tabs;\n      const tab = tabs.find( ( tab ) => tab.id === id );\n      if( !tab ) return;\n\n      Object.assign( tab, data );\n      scope.setState({ tabs });\n\n      if( !stopPropagation ) nextOpt( id, data );\n    };\n\n    const createTab = ( tab ) => {\n      if( tab.type === 'ui-ribbon-tab-application' ) {\n        return (\n          <RibbonAppTab\n            key={ tab.id }\n            id={ tab.id }\n            name={ tab.name }\n            displayName={ tab.displayName }\n            type={ tab.type }\n            enabled={ tab.enabled }\n            hidden={ tab.hidden }\n            actived={ tab.actived }\n            items={ tab.items }\n            onClick={ scope.handleTabClick }\n            onStateChange={ updateTab }\n            ref={ ( c ) => { if( c ) scope.tabs.push( c ); } } />\n        );\n      } else {\n        return (\n          <RibbonTab\n            key={ tab.id }\n            id={ tab.id }\n            name={ tab.name }\n            displayName={ tab.displayName }\n            type={ tab.type }\n            enabled={ tab.enabled }\n            hidden={ tab.hidden }\n            actived={ tab.actived }\n            panels={ tab.panels }\n            onClick={ scope.handleTabClick }\n            onStateChange={ updateTab }\n            ref={ ( c ) => { if( c ) scope.tabs.push( c ); } } />\n        );\n      }\n    };\n\n    return (\n      <div id=\"RibbonUI\">\n        { createTitleBar() }\n        <div className=\"ui-ribbon-window\">\n          <div id=\"ui-ribbon-main\" className=\"ui-ribbon-main ui-ribbon-border-bottom\">\n            <div className=\"ui-ribbon-tab-container ui-ribbon-border-bottom\">\n              <ul role=\"ui-ribbon-tabs\" className=\"ui-ribbon-nowrap ui-ribbon-nopadding ui-ribbon-nomargin\">\n                { otherTabs.map( createTab ) }\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nRibbon.propTypes = {\n  id: React.PropTypes.string.isRequired,\n  tabs: React.PropTypes.arrayOf( React.PropTypes.instanceOf( RibbonTabData ) )\n};\n\nRibbon.defaultProps = {\n  id: newGUID(),\n  tabs: []\n};\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport Ribbon from './Ribbon';\n\nconst RibbonInst = Symbol( 'ribbon' );\nconst Options = Symbol( 'options' );\n\n/**\n * RibbonTask\n * @class\n * @classdesc For bulk creating or modifying Ribbon contents.\n */\nexport default class RibbonTask {\n  /**\n   * RibbonTask constructor.\n   * @param {Ribbon} ribbon - Rendered Ribbon component.\n   * @param {object} options - Task options.\n   */\n  constructor( ribbon, options ) {\n    if( !(ribbon instanceof Ribbon ) ) throw 'No Ribbon instance available.';\n\n    this[RibbonInst] = ribbon;\n    this[Options] = options;\n  }\n\n  /**\n   * Rendered Ribbon component.\n   * @return {Ribbon}\n   */\n  get ribbon() {\n    return this[RibbonInst];\n  }\n\n  /**\n   * Task options.\n   * @return {object}\n   */\n  get options() {\n    return this[Options];\n  }\n\n  /**\n   * Execute task content.\n   * @return {bool} If true, it represents this task was executed by the Ribbon.\n   */\n  execute() {\n    return true;\n  }\n\n  /**\n   * Discard all changes.\n   * @return {bool} If true, it represents changes made by this task was removed from the Ribbon.\n   */\n  discard() {\n    return true;\n  }\n}\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport RibbonTask from './RibbonTask';\n\n/**\n * Registered RibbonTask.\n * @private {RibbonTask[]}\n */\nconst Tasks = Symbol( 'tasks' );\n\n/**\n * Check wether input class is instance of RibbonTask or not.\n * @param {RibbonTask} task\n * @return {bool} - If true, it reprents task is a instance of the RibbonTask.\n */\nconst checkTaskType = ( task ) => {\n  if( task.prototype instanceof RibbonTask ) return true;\n  \n  return false;\n};\n\n/**\n * RibbonTaskManager\n * @class\n * @classdesc Task manager class for Ribbon UI.\n */\nexport default class RibbonTaskManager {\n  /**\n   * RibbonTaskManager constructor\n   */\n  constructor() {\n    this[Tasks] = {};\n\n    checkTaskType.bind( this );\n  }\n\n  /**\n   * All registered RibbonTask.\n   * @return {RibbonTask[]}\n   */\n  get tasks() {\n    return this[Tasks];\n  }\n\n  /**\n   * Register RibbonTask.\n   * @param {string} taskId - Task Identification.\n   * @param {RibbonTask} task - Content instance of RibbonTask.\n   * @return {bool} - If task is not type of RibbonTask or registered, it will return false.\n   */\n  register( taskId, task ) {\n    if( !checkTaskType( task ) || this.getTask( taskId ) ) return false;\n\n    this[Tasks][taskId] = task;\n\n    return true;\n  }\n\n  /**\n   * Unregister RibbonTask.\n   * @param {string} taskId - Task Identification.\n   * @return {bool} - If task is not registered, it will return false.\n   */\n  unregister( taskId ) {\n    if( !this.getTask( taskId ) ) return false;\n\n    delete this[Tasks][taskId];\n\n    return true;\n  }\n\n  /**\n   * Get registered task by given id.\n   * @param {string} taskId - Task Identification.\n   * @return {null | RibbonTask} - Return task definition if task is existed.\n   */\n  getTask( taskId ) {\n    if( this.tasks.hasOwnProperty( taskId ) ) {\n      return this.tasks[ taskId ];\n    }\n    return null;\n  }\n}\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport Ribbon from './Ribbon';\nimport RibbonTaskManager from './RibbonTaskManager';\nimport { stderr } from './Utility';\n\nconst RibbonInst = Symbol( 'ribbon' );\nconst Tasks = Symbol( 'tasks' );\nconst TaskManager = Symbol( 'taskManager' );\n\n/**\n * RibbonTaskExecuter\n * @class\n * @classdesc\tClass for executing tasks to create or modify Ribbon contents.\n */\nexport default class RibbonTaskExecuter {\n  /**\n   * RibbonTaskExecuter constructor.\n   * @param {Ribbon} ribbon - Rendered Ribbon component.\n   * @param {RibbonTaskManager} taskManager -\tRibbonTaskManager instance.\n   */\n  constructor( ribbon, taskManager ) {\n    if( !(ribbon instanceof Ribbon ) ) throw 'No Ribbon instance available.';\n    if( !(taskManager instanceof RibbonTaskManager ) ) throw 'No RibbonTaskManager instance available.';\n\n    this[RibbonInst] = ribbon;\n    this[TaskManager] = taskManager;\n    this[Tasks] = {};\n  }\n\n  /**\n   * Rendered Ribbon component.\n   * @return {Ribbon}\n   */\n  get ribbon() {\n    return this[RibbonInst];\n  }\n\n  /**\n   * Task\tmanager instance.\n   * @return {RibbonTaskManager}\n   */\n  get manager() {\n    return this[TaskManager];\n  }\n\n  /**\n   * All executed tasks.\n   * @return {RibbonTask[]}\n   */\n  get tasks() {\n    return this[Tasks];\n  }\n\n  /**\n   * Execute registered task.\n   * @param {string} taskId - Task Identification.\n   * @return {bool} - If task is not registered or failed to execute, it will return false.\n   */\n  execute( taskId, options ) {\n    let result = false;\n\n    if( !this.getTask( taskId ) ) {\n      const taskClass = this.manager.getTask( taskId );\n\n      if( taskClass ) {\n        const task = new taskClass( this.ribbon, options );\n        result = task.execute();\n\n        if( result === true ) {\n          this[Tasks][taskId] = task;\n\n          stderr( '[RibbonTaskExecuter] Task executed: `%s`.', taskId );\n        }\n      } else {\n        stderr( '[RibbonTaskExecuter] Task not found: `%s`.', taskId );\n      }\n    } else {\n      stderr( '[RibbonTaskExecuter] Task already executed: `%s`.', taskId );\n    }\n\n    return result;\n  }\n\n  /**\n   * Discard executed task.\n   * @param {string} taskId - Task Identification.\n   * @return {bool} - If task is not registered or failed to discard changes, it will return false.\n   */\n  discard( taskId ) {\n    let result = false;\n    const task = this.getTask( taskId );\n\n    if( !task ) {\n      stderr( '[RibbonTaskExecuter] Task not found: `%s`.', taskId );\n    } else {\n      result = task.discard();\n      if( !result ) throw 'Failed to discard chnages in task: `' + taskId + '`.';\n\n      delete this[Tasks][taskId];\n      stderr( '[RibbonTaskExecuter] Task content discarded: `%s`.', taskId );\n    }\n\n    return result;\n  }\n\n  /**\n   * Get executed task by given id.\n   * @param {string} taskId - Task Identification.\n   * @return {null | RibbonTask} - Return task definition if task is existed.\n   */\n  getTask( taskId ) {\n    if( this.tasks.hasOwnProperty( taskId ) ) {\n      return this.tasks[ taskId ];\n    }\n\n    return null;\n  }\n}\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Ribbon from './Ribbon';\nimport RibbonTaskManager from './RibbonTaskManager';\nimport RibbonTaskExecuter from './RibbonTaskExecuter';\n\nconst Container = Symbol( 'container' );\nconst MainRibbon = Symbol( 'mainRibbon' );\nconst TaskManager = Symbol( 'taskManager' );\nconst TaskExecuter = Symbol( 'taskExecuter' );\n\n/**\n * RibbonCtrl\n * @class\n */\nexport default class RibbonCtrl {\n  /**\n   * RibbonCtrl constructor\n   */\n  constructor() {\n    this[TaskManager] = new RibbonTaskManager();\n    this[Container] = undefined;\n    this[MainRibbon] = undefined;\n    this[TaskExecuter] = undefined;\n  }\n\n  /**\n   * Ribbon instance.\n   * @return {Ribbon} - Rendered Ribbon component.\n   */\n  get mainRibbon() {\n    return this[MainRibbon];\n  }\n\n  /**\n   * Ribbon container\n   * @return {HTMLElement} - React render target DOM element.\n   */\n  get container() {\n    return this[Container];\n  }\n\n  /**\n   * Ribbon container\n   * @param {HTMLElement} container - React render target DOM element.\n   */\n  set container( container ) {\n    if( !(container instanceof HTMLElement) ) throw '[RibbonCtrl] Input container must be a HTML DOM element.';\n\n    this[Container] = container;\n  }\n\n  /**\n   * RibbonTaskManager instance.\n   * @return {RibbonTaskManager}\n   */\n  get taskManager() {\n    return this[TaskManager];\n  }\n\n  /**\n   * RibbonTaskExecuter instance.\n   * @return {RibbonTaskExecuter}\n   */\n  get taskExecuter() {\n    return this[TaskExecuter];\n  }\n\n  /**\n   * Register RibbonTask.\n   * @param {string} taskId - Task Identification.\n   * @param {RibbonTask} task - Content instance of RibbonTask.\n   * @return {bool} - If task is not type of RibbonTask or registered, it will return false.\n   */\n  registerTask( taskId, task ) {\n    if( !this.taskManager ) return false;\n\n    return this.taskManager.register( taskId, task );\n  }\n\n  /**\n   * Unregister RibbonTask.\n   * @param {string} taskId - Task Identification.\n   * @return {bool} - If task is not registered, it will return false.\n   */\n  unregisterTask( taskId ) {\n    if( !this.taskManager ) return false;\n\n    return this.taskManager.unregister( taskId );\n  }\n\n  /**\n   * Execute registered RibbonTask.\n   * @param {string} taskId - Task Identification.\n   * @return {bool} - If task is not registered or failed to execute, it will return false.\n   */\n  executeTask( taskId, options ) {\n    if( !this.taskExecuter ) return false;\n\n    return this.taskExecuter.execute( taskId, options );\n  }\n\n  /**\n   * Discard executed RibbonTask.\n   * @param {string} taskId - Task Identification.\n   * @return {bool} - If task is not registered or failed to discard changes, it will return false.\n   */\n  discardTask( taskId ) {\n    if( !this.taskExecuter ) return false;\n\n    return this.taskExecuter.discard( taskId );\n  }\n\n  /**\n   * Start UI rendering.\n   * @return {Promise} - Result.\n   * @resolve {RibbonCtrl} - Self RibbonCtrl instance.\n   * @reject {object} - Errors.\n   */\n  run() {\n    const scope = this;\n\n    return new Promise( ( resolve, reject ) => {\n      try {\n        const container = scope.container;\n        const taskManager = scope.taskManager;\n\n        scope[MainRibbon] = ReactDOM.render( <Ribbon />, container );\n        scope[TaskExecuter] = new RibbonTaskExecuter( scope.mainRibbon, taskManager );\n\n        resolve( scope );\n      } catch( error ) {\n        reject( error );\n      }\n    });\n  }\n}\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport RibbonBaseData from './RibbonBaseData';\nimport RibbonTitlebarData from './RibbonTitlebarData';\nimport RibbonTabData from './RibbonTabData';\nimport RibbonAppTabData from './RibbonAppTabData';\nimport RibbonPanelData from './RibbonPanelData';\nimport RibbonAppMenuItemData from './RibbonAppMenuItemData';\nimport RibbonAppMenuButtonData from './RibbonAppMenuButtonData';\nimport RibbonItemData from './RibbonItemData';\nimport RibbonButtonData from './RibbonButtonData';\nimport RibbonPushButtonData from './RibbonPushButtonData';\nimport RibbonToggleButtonData from './RibbonToggleButtonData';\nimport RibbonTooltipData from './RibbonTooltipData';\nimport RibbonGroupData from './RibbonGroupData';\nimport RibbonRadioButtonGroupData from './RibbonRadioButtonGroupData';\n\nconst Data = {\n  RibbonBaseData,\n  RibbonTitlebarData,\n  RibbonTabData,\n  RibbonAppTabData,\n  RibbonPanelData,\n  RibbonAppMenuItemData,\n  RibbonAppMenuButtonData,\n  RibbonItemData,\n  RibbonButtonData,\n  RibbonPushButtonData,\n  RibbonToggleButtonData,\n  RibbonTooltipData,\n  RibbonGroupData,\n  RibbonRadioButtonGroupData\n};\n\nexport default Data;\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport Ribbon from './Ribbon';\nimport RibbonBase from './RibbonBase';\nimport RibbonTab from './RibbonTab';\nimport RibbonAppTab from './RibbonAppTab';\nimport RibbonAppMenuItem from './RibbonAppMenuItem';\nimport RibbonAppMenuButton from './RibbonAppMenuButton';\nimport RibbonPanel from './RibbonPanel';\nimport RibbonTitlebar from './RibbonTitlebar';\nimport RibbonItem from './RibbonItem';\nimport RibbonButton from './RibbonButton';\nimport RibbonTooltip from './RibbonTooltip';\nimport RibbonPushButton from './RibbonPushButton';\nimport RibbonToggleButton from './RibbonToggleButton';\nimport RibbonGroup from './RibbonGroup';\nimport RibbonRadioButtonGroup from './RibbonRadioButtonGroup';\nimport RibbonCtrl from './RibbonCtrl';\nimport RibbonTask from './RibbonTask';\nimport RibbonTaskManager from './RibbonTaskManager';\nimport RibbonTaskExecuter from './RibbonTaskExecuter';\nimport Utility from './Utility';\nimport Data from './data';\n\nconst ReactRibbon = {\n  Ribbon,\n  RibbonBase,\n  RibbonTab,\n  RibbonAppTab,\n  RibbonAppMenuItem,\n  RibbonAppMenuButton,\n  RibbonPanel,\n  RibbonTitlebar,\n  RibbonItem,\n  RibbonButton,\n  RibbonTooltip,\n  RibbonPushButton,\n  RibbonToggleButton,\n  RibbonGroup,\n  RibbonRadioButtonGroup,\n  RibbonCtrl,\n  RibbonTask,\n  RibbonTaskManager,\n  RibbonTaskExecuter,\n  Utility,\n  Data\n};\n\n/**\n * Module exposure.\n */\nexport default ReactRibbon;"],"names":["newGUID","d","Date","getTime","guid","replace","c","r","Math","random","floor","toString","isGUID","pattern","test","findItem","items","predicate","Function","item","i","length","namespace","s","ns","window","self","parts","split","stderr","debug","log","console","bind","utility","Id","Symbol","Name","DisplayName","Enabled","Hidden","RibbonBaseData","name","displayName","this","enabled","hidden","Actived","Panels","RibbonTabData","actived","panels","Items","RibbonAppTabData","RibbonTitlebarData","title","RibbonBase","props","state","id","prop","onStateChange","setState","isEnabled","isHidden","React","Component","propTypes","PropTypes","string","isRequired","bool","func","defaultProps","RibbonTitlebar","dynCSS","ClassNames","className","RibbonItem","Object","assign","_this","type","isActived","RibbonTooltip","content","createTitle","_this2","createContent","Content","RibbonTooltipData","undefined","RibbonButton","icon","tooltip","toggleable","clickHandler","handleClick","handleMouseOver","handleMouseOut","scope","data","updateTooltip","event","show","hide","outerDynCSS","innerDynCSS","formatLegend","legend","texts","result","key","map","txt","role","src","createTooltip","isToggleable","handler","refs","instanceOf","RibbonPushButton","RibbonToggleButton","onGroupCurrentChange","RibbonItemData","Icon","Tooltip","Toggleable","ClickHandler","RibbonButtonData","RibbonPushButtonData","RibbonToggleButtonData","RibbonGroup","concat","itemData","idx","findIndex","nextProps","nextState","updateItem","find","createItem","RibbonPushButtonLike","push","arrayOf","Current","Default","RibbonRadioButtonGroup","current","default","updateCurrentItem","RibbonGroupData","RibbonRadioButtonGroupData","RibbonPanel","legendDynCSS","RibbonGroupLike","createSeperator","seperator","Seperator","RibbonPanelData","RibbonTab","panelData","panel","onClick","updatePanel","createPanel","RibbonAppMenuSeperator","RibbonAppMenuItem","onMenuClick","RibbonAppMenuButton","RibbonAppMenuItemData","RibbonAppMenuButtonData","RibbonAppTab","handleClose","handleItemClick","itemId","stopPropagation","activeItemById","nextOpt","hasOwnProperty","renderItemContent","Tabs","Ribbon","appTab","tabs","titlebar","handleTabClick","toggleDisplay","tabData","tab","tabId","activeTabById","otherTabs","updateTitlebar","createTitleBar","updateTab","createTab","RibbonInst","Options","RibbonTask","ribbon","options","Tasks","checkTaskType","task","prototype","RibbonTaskManager","taskId","getTask","tasks","TaskManager","RibbonTaskExecuter","taskManager","taskClass","manager","execute","discard","Container","MainRibbon","TaskExecuter","RibbonCtrl","register","unregister","taskExecuter","Promise","resolve","reject","container","ReactDOM","render","mainRibbon","error","HTMLElement","Data","ReactRibbon"],"mappings":"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"}
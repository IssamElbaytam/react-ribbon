{"version":3,"file":"bundle.js","sources":["src/js/Utility.js","src/js/data/RibbonBaseData.js","src/js/data/RibbonTabData.js","src/js/data/RibbonAppTabData.js","src/js/data/RibbonTitlebarData.js","src/js/RibbonBase.jsx","src/js/RibbonTitlebar.jsx","src/js/RibbonItem.jsx","src/js/RibbonTooltip.jsx","src/js/data/RibbonTooltipData.js","src/js/RibbonButton.jsx","src/js/RibbonPushButton.jsx","src/js/RibbonToggleButton.jsx","src/js/data/RibbonItemData.js","src/js/data/RibbonButtonData.js","src/js/data/RibbonPushButtonData.js","src/js/data/RibbonToggleButtonData.js","src/js/RibbonGroup.jsx","src/js/RibbonRadioButtonGroup.jsx","src/js/data/RibbonGroupData.js","src/js/data/RibbonRadioButtonGroupData.js","src/js/RibbonPanel.jsx","src/js/data/RibbonPanelData.js","src/js/RibbonTab.jsx","src/js/RibbonAppMenuSeperator.jsx","src/js/RibbonAppMenuItem.jsx","src/js/RibbonAppMenuButton.jsx","src/js/data/RibbonAppMenuItemData.js","src/js/data/RibbonAppMenuButtonData.js","src/js/RibbonAppTab.jsx","src/js/Ribbon.jsx","src/js/RibbonTask.js","src/js/RibbonTaskManager.js","src/js/RibbonTaskExecuter.js","src/js/RibbonCtrl.jsx","src/js/data/index.js","src/js/index.js"],"sourcesContent":["/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport debug from 'visionmedia-debug';\n\n/**\n * Create new RFC4122 v4 GUID based on timeStamp.\n * @return {string}\t- New guid\n */\nexport const newGUID = () => {\n  var d = new Date().getTime();\n\n  var guid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(\n    /[xy]/g,\n    ( c ) => {\n      var r = ( d + Math.random() * 16 ) % 16 | 0;\n      d = Math.floor( d / 16 );\n      return ( c == 'x' ? r : ( r & 0x3 | 0x8 ) ).toString( 16 );\n    });\n\n  return guid;\n};\n\n/**\n * Check input is GUID.\n * @param {string} - Target guid.\n * @return {bool} -\tIf the input is a GUID, then return true.\n */\nexport const isGUID = ( guid ) => {\n  //const pattern = /^[0-9a-f]{4}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{4}$/i;\n  const pattern = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n  return pattern.test( guid );\n};\n\n/**\n * Find proper (first) item suited with input condition in an array.\n * @param {array} items -\tArray of searching target.\n * @param {func} predicate - Predicate function for describe which item is goingo to return.\n * @return {object} - Target item.\n */\nexport const findItem = ( items = [], predicate ) => {\n  predicate = ( predicate instanceof Function ) ? predicate : ( item ) => { return true; };\n\n  for( let i = 0; i < items.length; i++ ) {\n    let item = items[i];\n    if( predicate( item ) ) return item;\n  }\n};\n\n/**\n * Create namespace.\n * @param {string} s - namespace (e.g. 'RiibonUI.Ribbon').\n * @return {Object} - Namespace,\n */\nexport const namespace = ( s ) => {\n  var ns = typeof window !== 'undefined' && window !== null ? window : self;\n\n  var parts = s.split( '.' );\n  for( var i = 0; i < parts.length; i++ ) {\n    ns[ parts[i] ] = ns[ parts[i] ] || {};\n    ns = ns[ parts[i] ];\n  }\n\n  return ns;\n};\n\n/**\n * Debugging output\n */\nexport const stderr = debug( 'react-ribbon' );\nstderr.log = console.log.bind( console );\n\nconst utility = {\n  newGUID,\n  isGUID,\n  findItem,\n  namespace,\n  stderr\n};\n\nexport default utility;\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport { newGUID } from '../Utility';\n\nconst Id = Symbol( 'id' );\nconst Name = Symbol( 'name' );\nconst DisplayName = Symbol( 'displayName' );\nconst Enabled = Symbol( 'enabled' );\nconst Hidden = Symbol( 'hidden' );\n\n/**\n * RibbonBaseData\n * @class\n */\nexport default class RibbonBaseData {\n  /**\n   * RibbonBaseData constructor\n   * @param {string} name - The name of this instance used by the internal mechanism.\n   * @param {string} displayName - The name of this instance shown on the user interface, might be a localized string.\n   */\n  constructor( name, displayName ) {\n    if( typeof name !== 'string' ) throw 'name is required.';\n\n    this[Id] = newGUID();\n    this[Name] = name;\n    this[DisplayName] = ( typeof name !== 'string' ) ? name : displayName;\n    this[Enabled] = true;\n    this[Hidden] = false;\n  }\n\n  /**\n   * Instance uuid used by the internal mechanism.\n   * @return {string} - The UUID.\n   */\n  get id() {\n    return this[Id];\n  }\n\n  /**\n   * Instance name used by the internal mechanism.\n   * @return {string} - Instance name.\n   */\n  get name() {\n    return this[Name];\n  }\n\n  /**\n   * Instance name shown on the user interface, might be a localized string.\n   * @return {string} - Instance name.\n   */\n  get displayName() {\n    return this[DisplayName];\n  }\n\n  /**\n   * Instance name shown on the user interface, might be a localized string.\n   * @param {string} [name] - Instance name.\n   */\n  set displayName( name ) {\n    if( typeof name !== 'string' ) throw 'Input type should be a string.';\n\n    this[DisplayName] = name;\n  }\n\n  /**\n   * Instance edis/en-able status.\n   * @return {bool} - If false, make instance be disabled.\n   */\n  get enabled() {\n    return this[Enabled];\n  }\n\n  /**\n   * Instance edis/en-able status.\n   * @return {bool} [enabled = true] - If false, make instance be disabled.\n   */\n  set enabled( enabled = true ) {\n    this[Enabled] = ( enabled === true );\n  }\n\n  /**\n   * Instance is hidden or not.\n   * @return {bool} - If false, instance is going to disppear on the UI.\n   */\n  get hidden() {\n    return this[Hidden];\n  }\n\n  /**\n   * Instance edis/en-able status.\n   * @return {bool} [hidden = false] - If false, instance is going to disppear on the UI.\n   */\n  set hidden( hidden = false ) {\n    this[Hidden] = ( hidden === true );\n  }\n}\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport RibbonBaseData from './RibbonBaseData';\n\nconst\tActived = Symbol( 'actived' );\nconst Panels = Symbol( 'panels' );\n\n/**\n * RibbonTabData\n * @extends RibbonBaseData\n * @class\n */\nexport default class RibbonTabData extends RibbonBaseData {\n  /**\n   * RibbonTabData constructor\n   * @param {string} name - The name of this instance used by the internal mechanism.\n   * @param {string} displayName - The name of this instance shown on the user interface, might be a localized string.\n   */\n  constructor( name, displayName ) {\n    super( name, displayName );\n\n    this[Actived] = false;\n    this[Panels] = [];\n  }\n\n  /**\n   * Tab type.\n   * @return {string} - Tab type for identification.\n   */\n  get type() {\n    return 'ui-ribbon-tab-normal';\n  }\n\n  /**\n   * Tab actived state.\n   * @return {bool} - If true, it repsents tab is selected currently.\n   */\n  get actived() {\n    return this[Actived];\n  }\n\n  /**\n   * Tab actived state.\n   * @return {bool} [actived = false] - If true, it repsents tab is selected currently.\n   */\n  set actived( actived = false ) {\n    this[Actived] = ( actived === true );\n  }\n\n  /**\n   * Tab's children panels\n   * @return {RibbonPanelData[]} - Ribbon panel data.\n   */\n  get panels() {\n    return this[Panels];\n  }\n\n  /**\n   * Tab's children panels\n   * @param {RibbonPanelData[]} [panels = []] - Ribbon panel data.\n   */\n  set panels( panels = [] ) {\n    this[Panels] = panels;\n  }\n}\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport RibbonTabData from './RibbonTabData';\n\nconst Items = Symbol( 'items' );\n\n/**\n * RibbonAppTabData\n * @class\n */\nexport default class RibbonAppTabData extends RibbonTabData {\n  /**\n   * RibbonAppTabData constructor\n   * @param {string} [displayName = 'File'] - The name of this instance shown on the user interface, might be a localized string.\n   */\n  constructor( displayName = 'File' ) {\n    super( 'AppTab', displayName );\n\n    this[Items] = [];\n  }\n\n  /**\n   * Tab type.\n   * @return {string} - Tab type for identification.\n   * @override\n   */\n  get type() {\n    return 'ui-ribbon-tab-application';\n  }\n\n  /**\n   * Panel's children items.\n   * @return {RibbonItemData[]} - Ribbon item data.\n   */\n  get items() {\n    return this[Items];\n  }\n\n  /**\n   * Panel's children items.\n   * @return {RibbonItemData[]} [items = []]- Ribbon item data.\n   */\n  set items( items = [] ) {\n    this[Items] = items;\n  }\n}\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport RibbonBaseData from './RibbonBaseData';\n\n/**\n * RibbonTitlebarData\n * @class\n */\nexport default class RibbonTitlebarData extends RibbonBaseData {\n  /**\n   * RibbonTitlebarData constructor\n   * @param {string} title - The name of this instance shown on the user interface, might be a localized string.\n   */\n  constructor( title ) {\n    if( typeof title !== 'string' ) title = 'React Ribbon';\n\n    super( 'AppTitlebar', title );\n  }\n\n  /**\n   * App title.\n   * @return {string}\n   */\n  get title() {\n    return this.displayName;\n  }\n\n  /**\n   * App title\n   * @param {string} title\n   */\n  set title( title ) {\n    this.displayName = title;\n  }\n}\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport React from 'react';\nimport { newGUID } from './Utility';\n\n/**\n * RibbonBase\n * @extends React.Component\n * @class\n */\nexport default class RibbonBase extends React.Component {\n  /**\n   * RibbonBase constructor\n   * @param {object} props - React component properties\n   */\n  constructor( props ) {\n    super( props );\n\n    let displayName = ( typeof props.displayName === 'string' ) ? props.displayName : name;\n    let enabled = ( props.enabled == false ) ? false : true;\n    let hidden = ( props.hidden === true );\n\n    this.state = {\n      displayName,\n      enabled,\n      hidden\n    };\n  }\n\n  /**\n   * Instance id for internal identification and HTML id attribute.\n   * @return {string} - The UUID.\n   */\n  get id() {\n    return this.props.id;\n  }\n\n  /**\n   * Instance name for internal identification.\n   * @return {string} - Instance name.\n   */\n  get name() {\n    return this.props.name;\n  }\n\n  /**\n   * Instance name shown on the user interface, might be a localized string.\n   * @return {string} - Instance name.\n   */\n  get displayName() {\n    return this.state.displayName;\n  }\n\n  /**\n   * Instance name shown on the user interface, might be a localized string.\n   * @param {string} - Instance name.\n   */\n  set displayName( name ) {\n    if( typeof name !== 'string' ) throw 'Input type should be a string.';\n\n    const prop = { displayName: name };\n    const onStateChange = this.props.onStateChange;\n    onStateChange && onStateChange( this.id, prop );\n\n    this.setState( prop );\n  }\n\n  /**\n   * Instance edis/en-able status.\n   * @return {bool} - If false, make instance be disabled.\n   */\n  get enabled() {\n    return this.state.enabled;\n  }\n\n  /**\n   * Instance edis/en-able status.\n   * @param {bool} [enabled = true] - If false, make instance be disabled.\n   */\n  set enabled( enabled = true ) {\n    if( this.hidden ) return;\n\n    const isEnabled = ( enabled === true );\n\n    const prop = { enabled: isEnabled };\n    const onStateChange = this.props.onStateChange;\n    onStateChange && onStateChange( this.id, prop );\n\n    this.setState( prop );\n  }\n\n  /**\n   * Instance is hidden or not.\n   * @return {bool} - If false, instance is going to disppear on the UI.\n   */\n  get hidden() {\n    return this.state.hidden;\n  }\n\n  /**\n   * Instance is hidden or not.\n   * @return {bool} [hidden = false]- If false, instance is going to disppear on the UI.\n   */\n  set hidden( hidden = false ) {\n    const isHidden = ( hidden === true );\n    const isEnabled = !isHidden;\n\n    const prop = { hidden: isHidden, enabled: isEnabled };\n    const onStateChange = this.props.onStateChange;\n    onStateChange && onStateChange( this.id, prop );\n\n    this.setState( prop );\n  }\n}\n\nRibbonBase.propTypes = {\n  id: React.PropTypes.string.isRequired,\n  name: React.PropTypes.string.isRequired,\n  displayName: React.PropTypes.string,\n  enabled: React.PropTypes.bool,\n  hidden: React.PropTypes.bool,\n  onStateChange: React.PropTypes.func\n};\n\nRibbonBase.defaultProps = {\n  id: newGUID(),\n  enabled: true,\n  hidden: false\n};\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport React from 'react';\nimport ClassNames from 'classnames';\nimport RibbonBase from './RibbonBase';\n\n/**\n * RibbonTitlebar\n * @class\n */\nexport default class RibbonTitlebar extends RibbonBase {\n  /**\n   * RibbonTitlebar constructor\n   * @param {object} props - React component properties\n   */\n  constructor( props ) {\n    super( props );\n  }\n\n  /**\n   * Ribbon main title\n   * @return {string} - Ribbon title\n   */\n  get title() {\n    return this.displayName;\n  }\n\n  /**\n   * Ribbon main title\n   * @param {string} title - Ribbon title\n   */\n  set title( title ) {\n    if( typeof title !== 'string' ) throw 'Input type should be a string.';\n\n    this.displayName = title;\n  }\n\n  /**\n   * Toggle titlebar be displayed or hiden.\n   */\n  toggleDisplay() {\n    this.hidden = ( !this.hidden );\n  }\n\n  render() {\n    const dynCSS = ClassNames({\n      'ui-ribbon-invisible': this.hidden\n    });\n\n    return (\n      <div className={ 'ui-ribbon-title ' + dynCSS }>\n        <span>{ this.title }</span>\n      </div>\n    );\n  }\n}\n\nRibbonTitlebar.propTypes = {\n  onStateChange: React.PropTypes.func\n};\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport React from 'react';\nimport RibbonBase from './RibbonBase';\nimport { newGUID } from './Utility';\n\n/**\n * RibbonItem\n * @extends RibbonBase\n * @class\n */\nexport default class RibbonItem extends RibbonBase {\n  /**\n   * RibbonItem constructor\n   * @param {object} props - React component properties\n   */\n  constructor( props ) {\n    super( props );\n    \n    let actived = ( props.actived === true );\n\n    this.state = Object.assign( this.state, { actived } );\n  }\n\n  /**\n   * Item type.\n   * @return {string} - Item type for identification.\n   */\n  get type() {\n    return this.props.type;\n  }\n  \n  /**\n   * Item actived state.\n   * @return {bool} - If true, it repsents item is actived currently.\n   */\n  get actived() {\n    return this.state.actived;\n  }\n\n  /**\n   * Item actived state.\n   * @return {bool} [actived = false] - If true, it repsents item is actived currently.\n   */\n  set actived( actived = false ) {\n    const isActived = ( actived === true );\n    const prop = { actived: isActived };\n\n    const onStateChange = this.props.onStateChange;\n    onStateChange && onStateChange( this.id, prop );\n\n    this.setState( prop );\n  }\n}\n\nRibbonItem.propTypes = {\n  id: React.PropTypes.string.isRequired,\n  type: React.PropTypes.string.isRequired,\n  actived: React.PropTypes.bool,\n  onStateChange: React.PropTypes.func\n};\n\nRibbonItem.defaultProps = {\n  id: newGUID(),\n  type: 'ui-ribbon-panel-item',\n  actived: false\n};\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport React from 'react';\nimport ClassNames from 'classnames';\nimport RibbonBase from './RibbonBase';\n\n/**\n * RibbonTooltip\n * @class\n */\nexport default class RibbonTooltip extends RibbonBase {\n  /**\n   * RibbonTooltip constructor\n   * @param {object} props - React component properties\n   */\n  constructor( props ) {\n    super( props );\n\n    this.state = Object.assign( this.state,\n      {\n        content: props.content\n      });\n  }\n\n  /**\n   * Tooltip title.\n   * @return {string} - Ribbon tooltip title.\n   */\n  get title() {\n    return this.displayName;\n  }\n\n  /**\n   * Tooltip title.\n   * @return {string} title - Ribbon tooltip title.\n   */\n  set title( title ) {\n    if( typeof title !== 'string' ) throw 'Input type should be a string.';\n\n    this.displayName = title;\n  }\n\n  /**\n   * Tooltip content.\n   * @return {string} - Tooltip content.\n   */\n  get content() {\n    return this.state.content;\n  }\n\n  /**\n   * Tooltip content.\n   * @return {string} - Tooltip content.\n   */\n  set content( content = '' ) {\n    if( typeof content !== 'string' ) throw 'Input content should be a string.';\n\n    const prop = { content };\n    const onStateChange = this.props.onStateChange;\n    onStateChange && onStateChange( this.id, prop );\n\n    this.setState( prop );\n  }\n\n  /**\n   * Instance is hidden or not.\n   * @return {bool} - If false, instance is going to disppear on the UI.\n   * @override\n   */\n  get hidden() {\n    return this.state.hidden;\n  }\n\n  /**\n   * Instance is hidden or not.\n   * @return {bool} [hidden = false]- If false, instance is going to disppear on the UI.\n   * @override\n   */\n  set hidden( hidden = false ) {\n    const isHidden = ( hidden === true );\n\n    const prop = { hidden: isHidden };\n    const onStateChange = this.props.onStateChange;\n    onStateChange && onStateChange( this.id, prop );\n\n    this.setState( prop );\n  }\n\n  /**\n   * Make this tooltip appear.\n   */\n  show() {\n    this.hidden = false;\n  }\n\n  /**\n   * Make this tooltip disappear.\n   */\n  hide() {\n    this.hidden = true;\n  }\n\n  render() {\n    const dynCSS = ClassNames({\n      'ui-ribbon-tooltip-visible': ( this.hidden === false )\n    });\n\n    const createTitle = () => {\n      if( this.title )\n        return ( <strong>{ this.title }</strong> );\n    };\n\n    const createContent = () => {\n      if( this.content )\n        return ( <p>{ this.content }</p> );\n    };\n\n    return (\n      <div id={ this.id } className={ 'ui-ribbon-tooltip ' + dynCSS }>\n        { createTitle() }\n        { createContent() }\n      </div>\n    );\n  }\n}\n\nRibbonTooltip.propTypes = {\n  content: React.PropTypes.string,\n  onStateChange: React.PropTypes.func\n};\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport RibbonBaseData from './RibbonBaseData';\n\nconst Content = Symbol( 'content' );\n\n/**\n * RibbonTooltipData\n * @extends RibbonBaseData\n * @class\n */\nexport default class RibbonTooltipData extends RibbonBaseData {\n  /**\n   * RibbonTooltipData constructor\n   * @param {string} name - The name of this instance used by the internal mechanism.\n   * @param {string} displayName - The name of this instance shown on the user interface, might be a localized string.\n   */\n  constructor( title, content ) {\n    if( typeof title !== 'string' ) throw 'Tooltip title cannot be empty.';\n\n    super( 'RibbonTooltip', title );\n\n    this[Content] = ( typeof content !== 'string' ) ? undefined : content;\n    this.hidden = true;\n  }\n\n  /**\n   * App title.\n   * @return {string}\n   */\n  get title() {\n    return this.displayName;\n  }\n\n  /**\n   * App title\n   * @param {string} title\n   */\n  set title( title ) {\n    this.displayName = title;\n  }\n\n  /**\n   * Tooltip content.\n   * @return {string} - Tooltip content.\n   */\n  get content() {\n    return this[Content];\n  }\n\n  /**\n   * Tooltip content.\n   * @return {string} - Tooltip content.\n   */\n  set content( content ) {\n    if( typeof content !== 'string' ) throw 'Input content should be a type of string.';\n\n    this[Content] = content;\n  }\n}\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport React from 'react';\nimport ClassNames from 'classnames';\nimport RibbonItem from './RibbonItem';\nimport RibbonTooltip from './RibbonTooltip';\nimport RibbonTooltipData from './data/RibbonTooltipData';\nimport { newGUID, stderr } from './Utility';\n\n/**\n * RibbonButton\n * @extends RibbonItem\n * @class\n */\nexport default class RibbonButton extends RibbonItem {\n  /**\n   * RibbonButton constructor\n   * @param {object} props - React component properties\n   */\n  constructor( props ) {\n    super( props );\n\n    let icon = props.icon;\n    let tooltip = props.tooltip;\n    let toggleable = ( props.toggleable === true );\n    let clickHandler = props.clickHandler;\n\n    this.state = Object.assign( this.state,\n      {\n        icon,\n        tooltip,\n        toggleable,\n        clickHandler\n      });\n\n    this.handleClick = this.handleClick.bind( this );\n    this.handleMouseOver = this.handleMouseOver.bind( this );\n    this.handleMouseOut = this.handleMouseOut.bind( this );\n  }\n\n  /**\n   * Button role.\n   * @return {string}\n   */\n  get role() {\n    return this.props.role;\n  }\n\n  /**\n   * Button icon.\n   * @return {string} - Button icon path.\n   */\n  get icon() {\n    return this.state.icon;\n  }\n\n  /**\n   * Button icon.\n   * @return {string} icon - Button icon path.\n   */\n  set icon( icon ) {\n    if( typeof icon !== 'string' ) throw 'Input type should be a string.';\n\n    const prop = { icon };\n    const onStateChange = this.props.onStateChange;\n    onStateChange && onStateChange( this.id, prop );\n\n    this.setState( prop );\n  }\n\n  /**\n   * Button toggleable state.\n   * @return {bool} - If true, it repsents button is toggled currently.\n   */\n  get toggleable() {\n    return this.state.toggleable;\n  }\n\n  /**\n   * Button toggleable state.\n   * @return {bool} [toggleable = false] - If true, it repsents button is toggled currently.\n   */\n  set toggleable( toggleable = false ) {\n    const isToggleable = ( toggleable === true );\n\n    const prop = { toggleable: isToggleable };\n    const onStateChange = this.props.onStateChange;\n    onStateChange && onStateChange( this.id, prop );\n\n    this.setState( prop );\n  }\n\n  /**\n   * Button click eveent handler.\n   * @return {Function} - Click eveent handler.\n   */\n  get clickHandler() {\n    return this.state.clickHandler;\n  }\n\n  /**\n   * Button click eveent handler.\n   * @param {Function} handler - Click eveent handler.\n   */\n  set clickHandler( handler ) {\n    if( !(handler instanceof Function) )\n      throw 'Input clicking handler is invalid.';\n\n    const prop = { clickHandler: handler };\n    const onStateChange = this.props.onStateChange;\n    onStateChange && onStateChange( this.id, prop );\n\n    this.setState( prop );\n  }\n\n  /**\n   * Button tooltip comopent.\n   * @return {RibbonTooltip} - Rendered RibbonTooltip component.\n   */\n  get tooltip() {\n    return this.refs.tooltip;\n  }\n\n  set tooltip( tooltip ) {\n    if( !(tooltip instanceof RibbonTooltipData) )\n      throw '[RibbonButton] Input tooltip data is invalid.';\n\n    const prop = { tooltip };\n    const onStateChange = this.props.onStateChange;\n    onStateChange && onStateChange( this.id, prop );\n\n    this.setState( prop );\n  }\n\n  /**\n   * Create tooltip\n   * @return {RibbonTooltip} - RibbonTooltip instance (not rendered).\n   */\n  createTooltip() {\n    const scope = this;\n    const data = this.state.tooltip;\n    if( !data ) return;\n\n    if( !(data instanceof RibbonTooltipData) && data )\n      return stderr( '%c[RibbonButton] Input tooltip data is invalid.', 'color:red;' );\n\n    const updateTooltip = ( id, data ) => {\n      let tooltip = scope.state.tooltip;\n\n      if( tooltip.id !== id ) return;\n\n      Object.assign( tooltip, data );\n\n      const prop = { tooltip };\n      const onStateChange = scope.props.onStateChange;\n      onStateChange && onStateChange( scope.id, prop );\n\n      scope.setState( prop );\n    };\n\n    return (\n      <RibbonTooltip\n        key={ data.id }\n        id={ data.id }\n        name={ data.name }\n        displayName={ data.title }\n        content={ data.content }\n        enabled={ data.enabled }\n        hidden={ data.hidden }\n        onStateChange={ updateTooltip }\n        ref=\"tooltip\" />\n    );\n  }\n\n  /**\n   * Button clicking event handler.\n   */\n  handleClick( event ) {\n    if( !this.enabled ) return;\n\n    const clickHandler = this.props.clickHandler;\n    clickHandler && clickHandler( event );\n  }\n\n  /**\n   * Button hovering over event handler.\n   */\n  handleMouseOver() {\n    const tooltip = this.tooltip;\n    tooltip && tooltip.show();\n  }\n\n  /**\n   * Button hovering out event handler.\n   */\n  handleMouseOut() {\n    const tooltip = this.tooltip;\n    tooltip && tooltip.hide();\n  }\n\n  render() {\n    const outerDynCSS = ClassNames({\n      'ui-ribbon-disabled': ( this.enabled === false ),\n      'ui-ribbon-invisible': this.hidden\n    });\n\n    const innerDynCSS = ClassNames({\n      'ui-ribbon-active': this.actived\n    });\n\n    const formatLegend = ( legend ) => {\n      const texts = legend.split( '\\\\n' );\n      let guid = newGUID();\n      let result = <span key={ guid } id={ guid }>{ legend }</span>;\n\n      if( texts.length > 1 ) {\n        result = texts.map(( txt ) => {\n          let guid = newGUID();\n          return (\n              <span key={ guid } id={ guid }>\n                { txt }\n                <br />\n              </span>\n          );\n        });\n      }\n      return result;\n    };\n\n    return (\n      <a\n        key={ this.id }\n        id={ this.id }\n        className={ outerDynCSS }\n        onClick={ this.handleClick }\n        onMouseOver={ this.handleMouseOver }\n        onMouseOut={ this.handleMouseOut } >\n\n        <div\n          role={ this.role }\n          className={ 'ui-ribbon-button ' + this.type + ' ui-ribbon-relative ui-ribbon-inline ui-ribbon-center ' + innerDynCSS } >\n\n          <img src={ this.icon } />\n          <div className=\"ui-ribbon-button-legend\">\n            { formatLegend( this.displayName ) }\n          </div>\n          { this.createTooltip() }\n        </div>\n      </a>\n    );\n  }\n}\n\nRibbonButton.propTypes = {\n  id: React.PropTypes.string.isRequired,\n  role: React.PropTypes.string.isRequired,\n  type: React.PropTypes.string.isRequired,\n  icon: React.PropTypes.string,\n  tooltip: React.PropTypes.instanceOf( RibbonTooltipData ),\n  toggleable: React.PropTypes.bool,\n  clickHandler: React.PropTypes.func,\n  onStateChange: React.PropTypes.func\n};\n\nRibbonButton.defaultProps = {\n  id: newGUID(),\n  role: 'ui-ribbon-button',\n  type: 'ui-ribbon-button',\n  icon: '',\n  toggleable: false\n};\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport React from 'react';\nimport ClassNames from 'classnames';\nimport RibbonButton from './RibbonButton';\n\n/**\n * RibbonPushButton\n * @class\n */\nexport default class RibbonPushButton extends RibbonButton {\n  /**\n   * RibbonPushButton constructor\n   * @param {object} props - React component properties\n   */\n  constructor( props ) {\n    super( props );\n  }\n\n  render() {\n    const dynCSS = ClassNames({\n      'ui-ribbon-disabled': ( this.enabled === false ),\n      'ui-ribbon-invisible': this.hidden\n    });\n\n    return (\n      <div className={ 'ui-ribbon-button-group ui-ribbon-inline ' + dynCSS }>\n        { super.render() }\n      </div>\n    );\n  }\n}\n\nRibbonPushButton.propTypes = {\n  type: React.PropTypes.string.isRequired,\n  onStateChange: React.PropTypes.func\n};\n\nRibbonPushButton.defaultProps = {\n  type: 'ui-ribbon-button-big'\n};\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport React from 'react';\nimport RibbonPushButton from './RibbonPushButton';\n\n/**\n * RibbonToggleButton\n * @class\n */\nexport default class RibbonToggleButton extends RibbonPushButton {\n  /**\n   * RibbonToggleButton constructor\n   * @param {object} props - React component properties\n   */\n  constructor( props ) {\n    super( props );\n\n    this.handleClick = this.handleClick.bind( this );\n  }\n\n  /**\n   * Button clicking event handler.\n   * @override\n   */\n  handleClick( event ) {\n    if( !this.enabled ) return;\n\n    if( this.toggleable ) {\n      const isActived = !this.actived;\n\n      const prop = { actived: isActived };\n      const onStateChange = this.props.onStateChange;\n      onStateChange && onStateChange( this.id, prop );\n\n      this.setState( prop );\n\n      // For de/activating button by changing button's actived property.\n      const onGroupCurrentChange = this.props.onGroupCurrentChange;\n      onGroupCurrentChange && onGroupCurrentChange();\n    }\n\n    const clickHandler = this.props.clickHandler;\n    clickHandler && clickHandler( event );\n  }\n}\n\nRibbonToggleButton.propTypes = {\n  type: React.PropTypes.string.isRequired,\n  role: React.PropTypes.string.isRequired,\n  onGroupCurrentChange: React.PropTypes.func,\n  onStateChange: React.PropTypes.func\n};\n\nRibbonToggleButton.defaultProps = {\n  role: 'ui-ribbon-button-toggle',\n  type: 'ui-ribbon-button-big'\n};\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport RibbonBaseData from './RibbonBaseData';\n\nconst\tActived = Symbol( 'actived' );\n\n/**\n * RibbonItemData\n * @extends RibbonBaseData\n * @class\n */\nexport default class RibbonItemData extends RibbonBaseData {\n  /**\n   * RibbonItemData constructor\n   * @param {string} name - The name of this instance used by the internal mechanism.\n   * @param {string} displayName - The name of this instance shown on the user interface, might be a localized string.\n   */\n  constructor( name, displayName ) {\n    super( name, displayName );\n\n    this[Actived] = false;\n  }\n\n  /**\n   * Item type.\n   * @return {string} - Item type for identification.\n   */\n  get type() {\n    return 'ui-ribbon-panel-item';\n  }\n\n  /**\n   * Item actived state.\n   * @return {bool} - If true, it repsents item is actived currently.\n   */\n  get actived() {\n    return this[Actived];\n  }\n\n  /**\n   * Item actived state.\n   * @return {bool} [actived = false] - If true, it repsents item is actived currently.\n   */\n  set actived( actived = false ) {\n    this[Actived] = ( actived === true );\n  }\n}\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport RibbonItemData from './RibbonItemData';\nimport RibbonTooltipData from './RibbonTooltipData';\n\nconst\tIcon = Symbol( 'icon' );\nconst Tooltip = Symbol( 'tooltip' );\nconst Toggleable = Symbol( 'toggleable' );\nconst ClickHandler = Symbol( 'clickHandler' );\n\n/**\n * RibbonButtonData\n * @extends RibbonItemData\n * @class\n */\nexport default class RibbonButtonData extends RibbonItemData {\n  /**\n   * RibbonButtonData constructor\n   * @param {string} name - The name of this instance used by the internal mechanism.\n   * @param {string} displayName - The name of this instance shown on the user interface, might be a localized string.\n   */\n  constructor( name, displayName ) {\n    super( name, displayName );\n\n    this[Icon] = '';\n    this[Tooltip] = undefined;\n    this[Toggleable] = false;\n    this[ClickHandler] = undefined;\n  }\n\n  /**\n   * Button role.\n   * @return {string}\n   * @override\n   */\n  get role() {\n    return 'ui-ribbon-button';\n  }\n\n  /**\n   * Button icon path.\n   * @return {string} - Button icon full path or relative path.\n   */\n  get icon() {\n    return this[Icon];\n  }\n\n  /**\n   * Button icon path.\n   * @param {string} icon - Button icon full path or relative path.\n   */\n  set icon( icon ) {\n    if( typeof icon !== 'string' ) throw 'Input type should be a string.';\n\n    this[Icon] = icon;\n  }\n\n  /**\n   * Button tooltip data.\n   * @return {RibbonTooltipData} - Ribbon button tooltip data.\n   */\n  get tooltip() {\n    return this[Tooltip];\n  }\n\n  /**\n   * Button tooltip data.\n   * @param {RibbonTooltipData} tooltip - Ribbon button tooltip data.\n   */\n  set tooltip( tooltip ) {\n    if( !(tooltip instanceof RibbonTooltipData) )\n      throw 'Input data is not a type of RibbonTooltipData.';\n\n    this[Tooltip] = tooltip;\n  }\n\n  /**\n   * Button toggleable state.\n   * @return {bool} - If true, it repsents button is toggled currently.\n   */\n  get toggleable() {\n    return this[Toggleable];\n  }\n\n  /**\n   * Button toggleable state.\n   * @return {bool} [toggleable = false] - If true, it repsents button is toggled currently.\n   */\n  set toggleable( toggleable = false ) {\n    this[Toggleable] = ( toggleable === true );\n  }\n\n  /**\n   * Button\tclick eveent handler.\n   * @return {Function} - Click eveent handler.\n   */\n  get clickHandler() {\n    return this[ClickHandler];\n  }\n\n  /**\n   * Button\tclick eveent handler.\n   * @param {Function} handler - Click eveent handler.\n   */\n  set clickHandler( handler ) {\n    if( !(handler instanceof Function) )\n      throw 'Input clicking handler is invalid.';\n\n    this[ClickHandler] = handler;\n  }\n}\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport RibbonButtonData from './RibbonButtonData';\n\n/**\n * RibbonPushButtonData\n * @extends RibbonButtonData\n * @class\n */\nexport default class RibbonPushButtonData extends RibbonButtonData {\n  /**\n   * RibbonPushButtonData constructor\n   * @param {string} name - The name of this instance used by the internal mechanism.\n   * @param {string} displayName - The name of this instance shown on the user interface, might be a localized string.\n   */\n  constructor( name, displayName ) {\n    super( name, displayName );\n  }\n\n  /**\n   * Button type.\n   * @return {string} -\tButton type for identification.\n   * @override\n   */\n  get type() {\n    return 'ui-ribbon-button-big';\n  }\n}\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport RibbonPushButtonData from './RibbonPushButtonData';\n\n/**\n * RibbonToggleButtonData\n * @extends RibbonPushButtonData\n * @class\n */\nexport default class RibbonToggleButtonData extends RibbonPushButtonData {\n  /**\n   * RibbonToggleButtonData constructor\n   * @param {string} name - The name of this instance used by the internal mechanism.\n   * @param {string} displayName - The name of this instance shown on the user interface, might be a localized string.\n   */\n  constructor( name, displayName ) {\n    super( name, displayName );\n  }\n\n  /**\n   * Button role.\n   * @return {string}\n   * @override\n   */\n  get role() {\n    return 'ui-ribbon-button-toggle';\n  }\n\n  /**\n   * Button toggleable state.\n   * @return {bool} - If true, it repsents button is toggled currently.\n   * @override\n   */\n  get toggleable() {\n    return true;\n  }\n}\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport React from 'react';\nimport ClassNames from 'classnames';\nimport RibbonItem from './RibbonItem';\nimport RibbonButton from './RibbonButton';\nimport RibbonPushButton from './RibbonPushButton';\nimport RibbonToggleButton from './RibbonToggleButton';\nimport RibbonItemData from './data/RibbonItemData';\nimport RibbonButtonData from './data/RibbonButtonData';\nimport RibbonPushButtonData from './data/RibbonPushButtonData';\nimport RibbonToggleButtonData from './data/RibbonToggleButtonData';\nimport { newGUID, stderr } from './Utility';\n\nconst Items = Symbol( 'items' );\n\n/**\n * RibbonGroup\n * @extends RibbonItem\n * @class\n */\nexport default class RibbonGroup extends RibbonItem {\n  /**\n   * RibbonGroup constructor\n   * @param {object} props - React component properties\n   */\n  constructor( props ) {\n    super( props );\n\n    this.state = Object.assign( this.state,\n      {\n        items: [].concat( props.items )\n      });\n\n    this[Items] = [];\n  }\n\n  /**\n   * Panel's children items\n   * @return {[RibbonButtonData]} - Ribbon item data.\n   */\n  get items() {\n    return this[Items];\n  }\n\n  /**\n   * Instance edis/en-able status.\n   * @return {bool} - If false, make instance be disabled.\n   */\n  get enabled() {\n    return super.enabled;\n  }\n\n  /**\n   * Instance edis/en-able status.\n   * @param {bool} [enabled = true] - If false, make instance be disabled.\n   */\n  set enabled( enabled = true ) {\n    if( this.hidden ) return;\n\n    const isEnabled = ( enabled === true );\n    super.enabled = isEnabled;\n\n    // Cascaded applying changes\n    this.items.map( ( item ) => {\n      item.enabled = isEnabled;\n    });\n  }\n\n  /**\n   * Instance is hidden or not.\n   * @return {bool} - If false, instance is going to disppear on the UI.\n   */\n  get hidden() {\n    return super.hidden;\n  }\n\n  /**\n   * Instance is hidden or not.\n   * @return {bool} [hidden = false]- If false, instance is going to disppear on the UI.\n   */\n  set hidden( hidden = false ) {\n    const isHidden = ( hidden === true );\n    super.hidden = isHidden;\n\n    // Cascaded applying changes\n    this.items.map( ( item ) => {\n      item.hidden = isHidden;\n    });\n  }\n\n  /**\n   * Add new RibbonButton by given data.\n   * @param {RibbonButtonData} itemData - Ribbon button data for creating new item in the RibbonGroup.\n   * @return {RibbonButton} - Rendered RibbonButton component.\n   */\n  addItem( itemData ) {\n    const idx = this.items.findIndex( ( item ) => ( item.id == itemData.id || item.name === itemData.name ) );\n    if( !(itemData instanceof RibbonButtonData) || idx !== -1 )\n      return stderr( '%c[RibbonGroup] Input itemData is invalid or duplicate.', 'color:red;' );\n\n    const items = this.state.items.concat( itemData );\n\n    const prop = { items };\n    const onStateChange = this.props.onStateChange;\n    onStateChange && onStateChange( this.id, prop );\n\n    this.setState( prop );\n\n    return this.items[ this.items.length -1 ];\n  }\n\n  componentWillUpdate( nextProps, nextState ) {\n    this[Items].length = 0;\n  }\n\n  render() {\n    const scope = this;\n    const items = this.state.items;\n\n    const updateItem = ( id, data ) => {\n      let items = scope.state.items;\n      const item = items.find( ( item ) => item.id === id );\n      if( !item ) return;\n\n      Object.assign( item, data );\n\n      const prop = { items };\n      const onStateChange = scope.props.onStateChange;\n      onStateChange && onStateChange( scope.id, prop );\n\n      scope.setState( prop );\n    };\n\n    const createItem = ( item ) => {\n      let result;\n      if( item.type === 'ui-ribbon-button-big' ) {\n        const RibbonPushButtonLike = ( item.role === 'ui-ribbon-button-toggle' ) ? RibbonToggleButton : RibbonPushButton;\n        result = (\n          <RibbonPushButtonLike\n            key={ item.id }\n            id={ item.id }\n            name={ item.name }\n            displayName={ item.displayName }\n            enabled={ item.enabled }\n            hidden={ item.hidden }\n            type={ item.type }\n            actived={ item.actived }\n            icon={ item.icon }\n            tooltip={ item.tooltip }\n            toggleable={ item.toggleable }\n            clickHandler={ item.clickHandler }\n            onStateChange={ updateItem }\n            ref={ ( c ) => { if( c ) scope.items.push( c ); } } />\n          );\n      }\n\n      return result;\n    };\n\n    const dynCSS = ClassNames({\n      'ui-ribbon-disabled': ( this.enabled === false ),\n      'ui-ribbon-invisible': this.hidden\n    });\n\n    return (\n      <div\n        key={ this.id }\n        id={ this.id }\n        className={ 'ui-ribbon-group ui-ribbon-inline ' + dynCSS }>\n\n        { items.map( createItem ) }\n      </div>\n    );\n  }\n}\n\nRibbonGroup.propTypes = {\n  id: React.PropTypes.string.isRequired,\n  items: React.PropTypes.arrayOf( React.PropTypes.instanceOf( RibbonButtonData ) ),\n  onStateChange: React.PropTypes.func\n};\n\nRibbonGroup.defaultProps = {\n  id: newGUID(),\n  items: []\n};\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport React from 'react';\nimport ClassNames from 'classnames';\nimport RibbonGroup from './RibbonGroup';\nimport RibbonToggleButton from './RibbonToggleButton';\nimport RibbonToggleButtonData from './data/RibbonToggleButtonData';\nimport { newGUID, stderr } from './Utility';\n\nconst Current = Symbol( 'current' );\nconst Default = Symbol( 'default' );\n\n/**\n * RibbonRadioButtonGroup\n * @extends RibbonGroup\n * @class\n */\nexport default class RibbonRadioButtonGroup extends RibbonGroup {\n  /**\n   * RibbonRadioButtonGroup constructor\n   * @param {object} props - React component properties\n   */\n  constructor( props ) {\n    super( props );\n\n    this[Current] = undefined;\n    this[Default] = undefined;\n  }\n\n  /**\n   * Current actived RibbonToggleButton.\n   * @return {string} - RibbonToggleButton id.\n   */\n  get current() {\n    return this[Current];\n  }\n\n  /**\n   * Current actived RibbonToggleButton.\n   * @param {string} id - RibbonToggleButton id.\n   */\n  set current( id ) {\n    const current = this.items.find( ( item ) => item.id === id && item.enabled );\n    if( !current ) throw '[RibbonRadioButtonGroup] Input id not exists or disabled.';\n\n    current.actived = true;\n    this[Current] = id;\n\n    if( !this.default )\n      this.default = id;\n\n    this.items.map( ( item ) => {\n      if( item.id !== id ) item.actived = false;\n    });\n  }\n\n  /**\n   * Default actived RibbonToggleButton.\n   * @return {string} - RibbonToggleButton id.\n   */\n  get default() {\n    return this[Default];\n  }\n\n  /**\n   * Default actived RibbonToggleButton.\n   * @param {string} - RibbonToggleButton id.\n   */\n  set default( id ) {\n    const item = this.items.find( ( item ) => item.id === id && item.enabled );\n    if( !item ) throw '[RibbonRadioButtonGroup] Input id not exists or disabled.';\n\n    this[Default] = id;\n\n    if( !this.current )\n      this.current = id;\n  }\n\n  /**\n   * Reset current item to the default.\n   */\n  resetCurrent() {\n    this.current = this.default;\n  }\n\n  /**\n   * Add new RibbonToggleButton by given data.\n   * @param {RibbonToggleButtonData} itemData - Ribbon button data for creating new item in the RibbonRadioButtonGroup.\n   * @return {RibbonToggleButton} - Rendered RibbonToggleButton component.\n   * @override\n   */\n  addItem( itemData ) {\n    if( !(itemData instanceof RibbonToggleButtonData) )\n      return stderr( '%c[RibbonGroup] Input itemData is invalid or duplicate.', 'color:red;' );\n\n    const item = super.addItem( itemData );\n\n    if( !this.default )\n      this.default = item.id;\n\n    return item;\n  }\n\n  render() {\n    const scope = this;\n    const items = this.state.items;\n\n    const updateCurrentItem = ( id ) => {\n      if( typeof id !== 'string' ) return;\n\n      scope.current = id;\n    };\n\n    const updateItem = ( id, data ) => {\n      let items = scope.state.items;\n      const item = items.find( ( item ) => item.id === id );\n      if( !item ) return;\n\n      Object.assign( item, data );\n\n      const prop = { items };\n      const onStateChange = scope.props.onStateChange;\n      onStateChange && onStateChange( scope.id, prop );\n\n      scope.setState( prop );\n    };\n\n    const createItem = ( item ) => {\n      return (\n        <RibbonToggleButton\n          key={ item.id }\n          id={ item.id }\n          name={ item.name }\n          displayName={ item.displayName }\n          enabled={ item.enabled }\n          hidden={ item.hidden }\n          type={ item.type }\n          actived={ item.actived }\n          icon={ item.icon }\n          tooltip={ item.tooltip }\n          toggleable={ item.toggleable }\n          clickHandler={ item.clickHandler }\n          onGroupCurrentChange={ () => { updateCurrentItem( item.id ); } }\n          onStateChange={ updateItem }\n          ref={ ( c ) => { if( c ) scope.items.push( c ); } } />\n      );\n    };\n\n    const dynCSS = ClassNames({\n      'ui-ribbon-disabled': ( this.enabled === false ),\n      'ui-ribbon-invisible': this.hidden\n    });\n\n    return (\n      <div\n        key={ this.id }\n        id={ this.id }\n        className={ 'ui-ribbon-group ui-ribbon-inline ' + dynCSS }>\n\n        { items.map( createItem ) }\n      </div>\n    );\n  }\n}\n\nRibbonGroup.propTypes = {\n  id: React.PropTypes.string.isRequired,\n  items: React.PropTypes.arrayOf( React.PropTypes.instanceOf( RibbonToggleButtonData ) ),\n  onStateChange: React.PropTypes.func\n};\n\nRibbonGroup.defaultProps = {\n  id: newGUID(),\n  items: []\n};\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport RibbonItemData from './RibbonItemData';\n\nconst Items = Symbol( 'items' );\n\n/**\n * RibbonGroupData\n * @extends RibbonItemData\n * @class\n */\nexport default class RibbonGroupData extends RibbonItemData {\n  /**\n   * RibbonGroupData constructor\n   * @param {string} name - The name of this instance used by the internal mechanism.\n   * @param {string} displayName - The name of this instance shown on the user interface, might be a localized string.\n   */\n  constructor( name, displayName ) {\n    super( name, displayName );\n\n    this[Items] = [];\n  }\n\n  /**\n   * Button type.\n   * @return {string} -\tButton type for identification.\n   * @override\n   */\n  get type() {\n    return 'ui-ribbon-group';\n  }\n\n  /**\n   * Panel's children items.\n   * @return {RibbonItemData[]} - Ribbon item data.\n   */\n  get items() {\n    return this[Items];\n  }\n\n  /**\n   * Panel's children items.\n   * @return {RibbonItemData[]} [items = []]- Ribbon item data.\n   */\n  set items( items = [] ) {\n    this[Items] = items;\n  }\n}\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport RibbonGroupData from './RibbonGroupData';\n\n/**\n * RibbonRadioButtonGroupData\n * @extends RibbonGroupData\n * @class\n */\nexport default class RibbonRadioButtonGroupData extends RibbonGroupData {\n  /**\n   * RibbonRadioButtonGroupData constructor\n   * @param {string} name - The name of this instance used by the internal mechanism.\n   * @param {string} displayName - The name of this instance shown on the user interface, might be a localized string.\n   */\n  constructor( name, displayName ) {\n    super( name, displayName );\n  }\n\n  /**\n   * Button type.\n   * @return {string} -\tButton type for identification.\n   * @override\n   */\n  get type() {\n    return 'ui-ribbon-radio-group';\n  }\n}\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport React from 'react';\nimport ClassNames from 'classnames';\nimport RibbonBase from './RibbonBase';\nimport RibbonItem from './RibbonItem';\nimport RibbonButton from './RibbonButton';\nimport RibbonPushButton from './RibbonPushButton';\nimport RibbonToggleButton from './RibbonToggleButton';\nimport RibbonGroup from './RibbonGroup';\nimport RibbonRadioButtonGroup from './RibbonRadioButtonGroup';\nimport RibbonItemData from './data/RibbonItemData';\nimport RibbonButtonData from './data/RibbonButtonData';\nimport RibbonPushButtonData from './data/RibbonPushButtonData';\nimport RibbonToggleButtonData from './data/RibbonToggleButtonData';\nimport RibbonGroupData from './data/RibbonGroupData';\nimport RibbonRadioButtonGroupData from './data/RibbonRadioButtonGroupData';\nimport { newGUID, stderr } from './Utility';\n\nconst Items = Symbol( 'items' );\n\n/**\n * RibbonPanel\n * @extends RibbonBase\n * @class\n */\nexport default class RibbonPanel extends RibbonBase {\n  /**\n   * RibbonPanel constructor\n   * @param {object} props - React component properties\n   */\n  constructor( props ) {\n    super( props );\n\n    this.state = Object.assign( this.state,\n      {\n        items: [].concat( props.items )\n      });\n\n    this[Items] = [];\n  }\n\n  /**\n   * Panel has seperator or not.\n   * @return {bool} - If true, panel will be seperated with other panels by a panel seperator.\n   */\n  get seperator() {\n    return this.props.seperator;\n  }\n\n  /**\n   * Panel's children items\n   * @return {[RibbonItemData]} - Ribbon item data.\n   */\n  get items() {\n    return this[Items];\n  }\n\n  /**\n   * Instance edis/en-able status.\n   * @return {bool} - If false, make instance be disabled.\n   */\n  get enabled() {\n    return super.enabled;\n  }\n\n  /**\n   * Instance edis/en-able status.\n   * @param {bool} [enabled = true] - If false, make instance be disabled.\n   */\n  set enabled( enabled = true ) {\n    if( this.hidden ) return;\n\n    const isEnabled = ( enabled === true );\n    super.enabled = isEnabled;\n\n    // Cascaded applying changes\n    this.items.map( ( item ) => {\n      item.enabled = isEnabled;\n    });\n  }\n\n  /**\n   * Instance is hidden or not.\n   * @return {bool} - If false, instance is going to disppear on the UI.\n   */\n  get hidden() {\n    return super.hidden;\n  }\n\n  /**\n   * Instance is hidden or not.\n   * @return {bool} [hidden = false]- If false, instance is going to disppear on the UI.\n   */\n  set hidden( hidden = false ) {\n    const isHidden = ( hidden === true );\n    super.hidden = isHidden;\n\n    // Cascaded applying changes\n    this.items.map( ( item ) => {\n      item.hidden = isHidden;\n    });\n  }\n\n  /**\n   * Add new RibbonItem by given data.\n   * @param {RibbonItemData} itemData - Ribbon item data for creating new item on the panel.\n   * @return {RibbonItem} - Rendered RibbonItem component.\n   */\n  addItem( itemData ) {\n    const idx = this.items.findIndex( ( item ) => ( item.id == itemData.id || item.name === itemData.name ) );\n    if( !(itemData instanceof RibbonItemData) || idx !== -1 )\n      return stderr( '%c[RibbonPanel] Input itemData is invalid or duplicate.', 'color:red;' );\n\n    const items = this.state.items.concat( itemData );\n\n    const prop = { items };\n    const onStateChange = this.props.onStateChange;\n    onStateChange && onStateChange( this.id, prop );\n\n    this.setState( prop );\n\n    return this.items[ this.items.length -1 ];\n  }\n\n  componentWillUpdate( nextProps, nextState ) {\n    this[Items].length = 0;\n  }\n\n  render() {\n    const scope = this;\n    const items = this.state.items;\n\n    const outerDynCSS = ClassNames({\n      'ui-ribbon-disabled': ( this.enabled === false ),\n      'ui-ribbon-invisible': this.hidden,\n      'ui-ribbon-inline': ( this.hidden === false )\n    });\n\n    const innerDynCSS = ClassNames({\n      'ui-ribbon-empty': ( items.length === 0 ),\n      'ui-riibon-panel-single-btn': ( items.length === 1 ),\n    });\n\n    const legendDynCSS = ClassNames({\n      'ui-ribbon-disabled': ( this.enabled === false )\n    });\n\n    const updateItem = ( id, data ) => {\n      let items = scope.state.items;\n      const item = items.find( ( item ) => item.id === id );\n      if( !item ) return;\n\n      Object.assign( item, data );\n\n      const prop = { items };\n      const onStateChange = scope.props.onStateChange;\n      onStateChange && onStateChange( scope.id, prop );\n\n      scope.setState( prop );\n    };\n\n    const createItem = ( item ) => {\n      let result;\n      if( item.type === 'ui-ribbon-radio-group' || item.type === 'ui-ribbon-group' ) {\n        const RibbonGroupLike = ( item.type === 'ui-ribbon-group' ) ? RibbonGroup : RibbonRadioButtonGroup;\n        result = (\n          <RibbonGroupLike\n            key={ item.id }\n            id={ item.id }\n            name={ item.name }\n            displayName={ item.displayName }\n            enabled={ item.enabled }\n            hidden={ item.hidden }\n            type={ item.type }\n            items={ item.items }\n            actived={ item.actived }\n            onStateChange={ updateItem }\n            ref={ ( c ) => { if( c ) scope.items.push( c ); } } />\n          );\n      } else if ( item.type === 'ui-ribbon-button-big' ) {\n        const RibbonPushButtonLike = ( item.role === 'ui-ribbon-button-toggle' ) ? RibbonToggleButton : RibbonPushButton;\n        result = (\n          <RibbonPushButtonLike\n            key={ item.id }\n            id={ item.id }\n            name={ item.name }\n            displayName={ item.displayName }\n            enabled={ item.enabled }\n            hidden={ item.hidden }\n            type={ item.type }\n            actived={ item.actived }\n            icon={ item.icon }\n            tooltip={ item.tooltip }\n            toggleable={ item.toggleable }\n            clickHandler={ item.clickHandler }\n            onStateChange={ updateItem }\n            ref={ ( c ) => { if( c ) scope.items.push( c ); } } />\n          );\n      }\n\n      return result;\n    };\n\n    const createSeperator = ( seperator = true ) => {\n      if( seperator )\n        return(\n          <div className=\"ui-ribbon-panel-seperator ui-ribbon-relative ui-ribbon-inline\"></div>\n        );\n    };\n\n    return (\n      <div\n        key={ this.id }\n        className={ 'ui-ribbon-panel-container ui-ribbon-relative ' + outerDynCSS }>\n        { createSeperator( this.seperator ) }\n\n        <div className={ 'ui-ribbon-panel ui-ribbon-relative ui-ribbon-inline ' + innerDynCSS }>\n          <div className=\"ui-ribbon-panel-contents\">\n            { items.map( createItem ) }\n\n            <div className={ 'ui-ribbon-panel-legend ui-ribbon-absolute ' + legendDynCSS }>\n              { this.displayName }\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nRibbonPanel.propTypes = {\n  id: React.PropTypes.string.isRequired,\n  seperator: React.PropTypes.bool,\n  items: React.PropTypes.arrayOf( React.PropTypes.instanceOf( RibbonItemData ) ),\n  onStateChange: React.PropTypes.func\n};\n\nRibbonPanel.defaultProps = {\n  id: newGUID(),\n  seperator: true,\n  items: []\n};\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport RibbonBaseData from './RibbonBaseData';\n\nconst Seperator = Symbol( 'seperator' );\nconst Items = Symbol( 'items' );\n\n/**\n * RibbonPanelData\n * @extends RibbonBaseData\n * @class\n */\nexport default class RibbonPanelData extends RibbonBaseData {\n  /**\n   * RibbonPanelData constructor\n   * @param {string} name - The name of this instance used by the internal mechanism.\n   * @param {string} displayName - The name of this instance shown on the user interface, might be a localized string.\n   */\n  constructor( name, displayName ) {\n    super( name, displayName );\n\n    this[Seperator] = true;\n    this[Items] = [];\n  }\n\n  /**\n   * Panel has seperator or not.\n   * @return {bool} - If true, panel will be seperated with other panels by a panel seperator.\n   */\n  get seperator() {\n    return this[Seperator];\n  }\n\n  /**\n   * Panel has seperator or not.\n   * @param {bool} [seperator = true] - If true, panel will be seperated with other panels by a panel seperator.\n   */\n  set seperator( seperator = true ) {\n    this[Seperator] = ( seperator === true );\n  }\n\n  /**\n   * Panel's children items.\n   * @return {RibbonItemData[]} - Ribbon item data.\n   */\n  get items() {\n    return this[Items];\n  }\n\n  /**\n   * Panel's children items.\n   * @return {RibbonItemData[]} [items = []]- Ribbon item data.\n   */\n  set items( items = [] ) {\n    this[Items] = items;\n  }\n}\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport React from 'react';\nimport ClassNames from 'classnames';\nimport RibbonBase from './RibbonBase';\nimport RibbonPanel from './RibbonPanel';\nimport RibbonPanelData from './data/RibbonPanelData';\nimport { newGUID, stderr } from './Utility';\n\nconst Panels = Symbol( 'panels' );\n\n/**\n * RibbonTab\n * @extends RibbonBase\n * @class\n */\nexport default class RibbonTab extends RibbonBase {\n  /**\n   * RibbonTab constructor\n   * @param {object} props - React component properties\n   */\n  constructor( props ) {\n    super( props );\n\n    let actived = ( props.actived === true );\n\n    this.state = Object.assign( this.state,\n      {\n        actived: actived,\n        panels: [].concat( props.panels )\n      });\n\n    this[Panels] = [];\n\n    this.handleClick = this.handleClick.bind( this );\n  }\n\n  /**\n   * Tab type.\n   * @return {string} - Tab type for identification.\n   */\n  get type() {\n    return this.props.type;\n  }\n\n  /**\n   * Instance edis/en-able status.\n   * @return {bool} - If false, make instance be disabled.\n   */\n  get enabled() {\n    return super.enabled;\n  }\n\n  /**\n   * Instance edis/en-able status.\n   * @param {bool} [enabled = true] - If false, make instance be disabled.\n   */\n  set enabled( enabled = true ) {\n    if( this.hidden ) return;\n\n    const isEnabled = ( enabled === true );\n\n    const prop = { enabled: isEnabled, actived: false };\n    const onStateChange = this.props.onStateChange;\n    onStateChange && onStateChange( this.id, prop );\n\n    // Cascaded applying changes\n    this.panels.map( ( panel ) => {\n      panel.enabled = isEnabled;\n    });\n\n    this.setState( prop );\n  }\n\n  /**\n   * Instance is hidden or not.\n   * @return {bool} - If false, instance is going to disppear on the UI.\n   */\n  get hidden() {\n    return super.hidden;\n  }\n\n  /**\n   * Instance is hidden or not.\n   * @return {bool} [hidden = false]- If false, instance is going to disppear on the UI.\n   */\n  set hidden( hidden = false ) {\n    const isHidden = ( hidden === true );\n    const isEnabled = !isHidden;\n\n    const prop = { hidden: isHidden, enabled: isEnabled, actived: false };\n    const onStateChange = this.props.onStateChange;\n    onStateChange && onStateChange( this.id, prop );\n\n    // Cascaded applying changes\n    this.panels.map( ( panel ) => {\n      panel.hidden = isHidden;\n    });\n\n    this.setState( prop );\n  }\n\n  /**\n   * Tab actived state.\n   * @return {bool} - If true, it repsents tab is selected currently.\n   */\n  get actived() {\n    return this.state.actived;\n  }\n\n  /**\n   * Tab actived state.\n   * @return {bool} [actived = false] - If true, it repsents tab is selected currently.\n   */\n  set actived( actived = false ) {\n    const isActived = ( actived === true );\n    const prop = { actived: isActived };\n\n    const onStateChange = this.props.onStateChange;\n    onStateChange && onStateChange( this.id, prop );\n\n    this.setState( prop );\n  }\n\n  /**\n   * Tab's children panels\n   * @return {[RibbonPanelData]} - Ribbon panel data.\n   */\n  get panels() {\n    return this[Panels];\n  }\n\n  /**\n   * Add new panel by given data.\n   * @param {RibbonPanelData} panelData - Ribbon panel data for creating new panel.\n   * @return {RibbonPanel} - Rendered RibbonPanel component.\n   */\n  addPanel( panelData ) {\n    const idx = this.panels.findIndex( ( panel ) => ( panel.id == panelData.id || panel.name === panelData.name ) );\n    if( !(panelData instanceof RibbonPanelData) || idx !== -1 )\n      return stderr( '%c[RibbonTab] Input panelData is invalid or duplicate.', 'color:red;' );\n\n    panelData.seperator = ( this.panels.length !== 0 );\n    const panels = this.state.panels.concat( panelData );\n\n    const prop = { panels };\n    const onStateChange = this.props.onStateChange;\n    onStateChange && onStateChange( this.id, prop );\n\n    this.setState( prop );\n\n    return this.panels[ this.panels.length -1 ];\n  }\n\n  componentWillUpdate( nextProps, nextState ) {\n    this[Panels].length = 0;\n  }\n\n  /**\n   * Tab clicking event handler\n   */\n  handleClick() {\n    if( this.type === 'ui-ribbon-tab-application' ) return;\n\n    const onClick = this.props.onClick;\n    onClick && onClick( this.id );\n  }\n\n  render() {\n    const scope = this;\n    const panels = this.state.panels;\n    const dynCSS = ClassNames({\n      'ui-ribbon-active': this.actived,\n      'ui-ribbon-disabled': ( this.enabled === false ),\n      'ui-ribbon-invisible': this.hidden,\n      'ui-ribbon-inline': ( this.hidden === false )\n    });\n\n    const updatePanel = ( id, data ) => {\n      let panels = scope.state.panels;\n      const panel = panels.find( ( panel ) => panel.id === id );\n      if( !panel ) return;\n\n      Object.assign( panel, data );\n\n      const prop = { panels };\n      const onStateChange = scope.props.onStateChange;\n      onStateChange && onStateChange( scope.id, prop );\n\n      scope.setState( prop );\n    };\n\n    const createPanel = ( panel ) => {\n      return (\n        <RibbonPanel\n          key={ panel.id }\n          id={ panel.id }\n          name={ panel.name }\n          displayName={ panel.displayName }\n          enabled={ panel.enabled }\n          hidden={ panel.hidden }\n          seperator={ panel.seperator }\n          items={ panel.items }\n          onStateChange={ updatePanel }\n          ref={ ( c ) => { if( c ) scope.panels.push( c ) ;} } />\n      );\n    };\n\n    return (\n      <li\n        key={ this.id }\n        id={ this.id }\n        className={ this.type + ' ' + dynCSS }\n        role=\"ui-ribbon-tab\"\n        onClick={ this.handleClick } >\n\n        <span className=\"ui-ribbon-uppercase\">{ this.displayName }</span>\n        <div className=\"ui-ribbon-tab-contents ui-ribbon-absolute\">\n          { panels.map( createPanel ) }\n        </div>\n      </li>\n    );\n  }\n}\n\nRibbonTab.propTypes = {\n  id: React.PropTypes.string.isRequired,\n  type: React.PropTypes.string.isRequired,\n  actived: React.PropTypes.bool,\n  panels: React.PropTypes.arrayOf( React.PropTypes.instanceOf( RibbonPanelData ) ),\n  onStateChange: React.PropTypes.func\n};\n\nRibbonTab.defaultProps = {\n  id: newGUID(),\n  type: 'ui-ribbon-tab-normal',\n  actived: false,\n  panels: []\n};\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport React from 'react';\nimport { newGUID } from './Utility';\n\n/**\n * RibbonAppMenuSeperator\n * @extends RibbonBase\n * @class\n */\nexport default class RibbonAppMenuSeperator extends React.Component {\n  /**\n   * RibbonAppMenuSeperator constructor\n   * @param {object} props - React component properties\n   */\n  constructor( props ) {\n    super( props );\n  }\n\n  /**\n   * Item type.\n   * @return {string} - Item type for identification.\n   */\n  get type() {\n    return 'ui-ribbon-seperator';\n  }\n\n  render() {\n    return (\n      <li key={ this.id } id={ this.id} className=\"ui-ribbon-seperator\">\n          <div className=\"ui-ribbon-seperator\"></div>\n      </li>\n    );\n  }\n}\n\nRibbonAppMenuSeperator.propTypes = {\n  id: React.PropTypes.string.isRequired\n};\n\nRibbonAppMenuSeperator.defaultProps = {\n  id: newGUID()\n};","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport React from 'react';\nimport ClassNames from 'classnames';\nimport RibbonBase from './RibbonBase';\nimport RibbonAppMenuSeperator from './RibbonAppMenuSeperator';\nimport { newGUID } from './Utility';\n\n/**\n * RibbonAppMenuItem\n * @extends RibbonBase\n * @class\n */\nexport default class RibbonAppMenuItem extends RibbonBase {\n  /**\n   * RibbonAppMenuItem constructor\n   * @param {object} props - React component properties\n   */\n  constructor( props ) {\n    super( props );\n\n    let actived = ( props.actived === true );\n    let content = props.content;\n\n    this.state = Object.assign( this.state,\n      {\n        actived: actived,\n        content: content\n      });\n\n    this.handleClick = this.handleClick.bind( this );\n  }\n\n  /**\n   * Item type.\n   * @return {string} - Item type for identification.\n   */\n  get type() {\n    return this.props.type;\n  }\n\n  /**\n   * Panel has seperator or not.\n   * @return {bool} - If true, panel will be seperated with other panels by a panel seperator.\n   */\n  get seperator() {\n    return this.props.seperator;\n  }\n\n  /**\n   * Instance edis/en-able status.\n   * @return {bool} - If false, make instance be disabled.\n   */\n  get enabled() {\n    return super.enabled;\n  }\n\n  /**\n   * Instance edis/en-able status.\n   * @param {bool} [enabled = true] - If false, make instance be disabled.\n   */\n  set enabled( enabled = true ) {\n    if( this.hidden ) return;\n\n    const isEnabled = ( enabled === true );\n    super.enabled = isEnabled;\n  }\n\n  /**\n   * Instance is hidden or not.\n   * @return {bool} - If false, instance is going to disppear on the UI.\n   */\n  get hidden() {\n    return super.hidden;\n  }\n\n  /**\n   * Instance is hidden or not.\n   * @return {bool} [hidden = false]- If false, instance is going to disppear on the UI.\n   */\n  set hidden( hidden = false ) {\n    const isHidden = ( hidden === true );\n    super.hidden = isHidden;\n  }\n\n  /**\n   * Tab actived state.\n   * @return {bool} - If true, it repsents tab is selected currently.\n   */\n  get actived() {\n    return this.state.actived;\n  }\n\n  /**\n   * Tab actived state.\n   * @return {bool} [actived = false] - If true, it repsents tab is selected currently.\n   */\n  set actived( actived = false ) {\n    const isActived = ( actived === true );\n    const prop = { actived: isActived };\n\n    const onStateChange = this.props.onStateChange;\n    onStateChange && onStateChange( this.id, prop, true );\n\n    this.setState( prop );\n  }\n\n  /**\n   * Menu content handler for rendering app menu content.\n   * @return {Function} - Menu content handler.\n   */\n  get content() {\n    return this.state.content;\n  }\n\n  /**\n   * Menu content handler for rendering app menu content.\n   * @param {Function} [content] - Menu content handler.\n   */\n  set content( content ) {\n    if( !(content instanceof Function) ) throw 'Input content handler is invalid.';\n\n    const prop = { content };\n    const onStateChange = this.props.onStateChange;\n    onStateChange && onStateChange( this.id, prop );\n\n    this.setState( prop );\n  }\n\n  /**\n   * Tab clicking event handler\n   */\n  handleClick() {\n    const onMenuClick = this.props.onMenuClick;\n    onMenuClick && onMenuClick( this.id );\n  }\n\n  render() {\n    const scope = this;\n    const dynCSS = ClassNames({\n      'ui-ribbon-active': this.actived,\n      'ui-ribbon-disabled': ( this.enabled === false ),\n      'ui-ribbon-invisible': this.hidden\n    });\n\n    const createSeperator = ( seperator = true ) => {\n      if( seperator ) {\n        const id = newGUID();\n        return(\n          <RibbonAppMenuSeperator key={ id } id={ id } />\n        );\n      }\n    };\n\n    return (\n      <div>\n        { createSeperator( this.seperator ) }\n        <li key={ this.id } className={ dynCSS } onClick={ this.handleClick }>\n            <div> { this.displayName } </div>\n        </li>\n      </div>\n    );\n  }\n}\n\nRibbonAppMenuItem.propTypes = {\n  id: React.PropTypes.string.isRequired,\n  type: React.PropTypes.string.isRequired,\n  seperator: React.PropTypes.bool,\n  actived: React.PropTypes.bool,\n  content: React.PropTypes.func,\n  onMenuClick: React.PropTypes.func,\n  onStateChange: React.PropTypes.func\n};\n\nRibbonAppMenuItem.defaultProps = {\n  id: newGUID(),\n  type: 'ui-ribbon-app-menu-normal',\n  seperator: false,\n  actived: false\n};","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport React from 'react';\nimport RibbonAppMenuItem from './RibbonAppMenuItem';\nimport { newGUID } from './Utility';\n\n/**\n * RibbonAppMenuButton\n * @extends RibbonAppMenuItem\n * @class\n */\nexport default class RibbonAppMenuButton extends RibbonAppMenuItem {\n  /**\n   * RibbonAppMenuButton constructor\n   * @param {object} props - React component properties\n   */\n  constructor( props ) {\n    super( props );\n\n    this.handleClick = this.handleClick.bind( this );\n  }\n\n  /**\n   * Button click eveent handler.\n   * @return {Function} - Click eveent handler.\n   */\n  get clickHandler() {\n    return this.state.content;\n  }\n\n  /**\n   * Button click eveent handler.\n   * @param {Function} handler - Click eveent handler.\n   */\n  set clickHandler( handler ) {\n    if( !(handler instanceof Function) ) throw 'Input clicking handler is invalid.';\n\n    this.content = handler;\n  }\n\n  /**\n   * Menu clicking event handler\n   */\n  handleClick( event ) {\n    if( !this.enabled ) return;\n\n    const onClick = this.state.content;\n    onClick && onClick( event );\n  }\n}\n\nRibbonAppMenuButton.propTypes = {\n  id: React.PropTypes.string.isRequired,\n  type: React.PropTypes.string.isRequired,\n  seperator: React.PropTypes.bool,\n  actived: React.PropTypes.bool,\n  content: React.PropTypes.func,\n  onStateChange: React.PropTypes.func\n};\n\nRibbonAppMenuButton.defaultProps = {\n  id: newGUID(),\n  type: 'ui-ribbon-app-menu-button',\n  seperator: true,\n  actived: false\n};","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport RibbonBaseData from './RibbonBaseData';\n\nconst Seperator = Symbol( 'seperator' );\nconst\tActived = Symbol( 'actived' );\nconst Content = Symbol( 'contnet' );\n\n/**\n * RibbonAppMenuItemData\n * @extends RibbonBaseData\n * @class\n */\nexport default class RibbonAppMenuItemData extends RibbonBaseData {\n  /**\n   * RibbonAppMenuItemData constructor\n   * @param {string} name - The name of this instance used by the internal mechanism.\n   * @param {string} displayName - The name of this instance shown on the user interface, might be a localized string.\n   */\n  constructor( name, displayName ) {\n    super( name, displayName );\n\n    this[Seperator] = false;\n    this[Actived] = false;\n    this[Content] = undefined;\n  }\n\n  /**\n   * Menu type.\n   * @return {string} -\tButton type for identification.\n   * @override\n   */\n  get type() {\n    return 'ui-ribbon-app-menu-normal';\n  }\n\n  /**\n   * Panel has seperator or not.\n   * @return {bool} - If true, panel will be seperated with other panels by a panel seperator.\n   */\n  get seperator() {\n    return this[Seperator];\n  }\n\n  /**\n   * Panel has seperator or not.\n   * @param {bool} [seperator = true] - If true, panel will be seperated with other panels by a panel seperator.\n   */\n  set seperator( seperator = true ) {\n    this[Seperator] = ( seperator === true );\n  }\n\n  /**\n   * Tab actived state.\n   * @return {bool} - If true, it repsents tab is selected currently.\n   */\n  get actived() {\n    return this[Actived];\n  }\n\n  /**\n   * Tab actived state.\n   * @return {bool} [actived = false] - If true, it repsents tab is selected currently.\n   */\n  set actived( actived = false ) {\n    this[Actived] = ( actived === true );\n  }\n\n  /**\n   * Menu content handler for rendering app menu content.\n   * @return {Function} - Menu content handler.\n   */\n  get content() {\n    return this[Content];\n  }\n\n  /**\n   * Menu content handler for rendering app menu content.\n   * @param {Function} [content] - Menu content handler.\n   */\n  set content( content ) {\n    if( !(content instanceof Function) ) throw 'Input content handler is invalid.';\n\n    this[Content] = content;\n  }\n}\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport RibbonAppMenuItemData from './RibbonAppMenuItemData';\n\n/**\n * RibbonAppMenuButtonData\n * @extends RibbonAppMenuItemData\n * @class\n */\nexport default class RibbonAppMenuButtonData extends RibbonAppMenuItemData {\n  /**\n   * RibbonAppMenuButtonData constructor\n   * @param {string} name - The name of this instance used by the internal mechanism.\n   * @param {string} displayName - The name of this instance shown on the user interface, might be a localized string.\n   */\n  constructor( name, displayName ) {\n    super( name, displayName );\n  }\n\n  /**\n   * Menu type.\n   * @return {string} -\tButton type for identification.\n   * @override\n   */\n  get type() {\n    return 'ui-ribbon-app-menu-button';\n  }\n}\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport React from 'react';\nimport ClassNames from 'classnames';\nimport RibbonBase from './RibbonBase';\nimport RibbonAppMenuItem from './RibbonAppMenuItem';\nimport RibbonAppMenuButton from './RibbonAppMenuButton';\nimport RibbonAppMenuItemData from './data/RibbonAppMenuItemData';\nimport RibbonAppMenuButtonData from './data/RibbonAppMenuButtonData';\nimport { newGUID, stderr } from './Utility';\n\nconst Items = Symbol( 'items' );\nconst Current = Symbol( 'current' );\nconst Default = Symbol( 'default' );\n\n/**\n * RibbonAppTab\n * @extends RibbonBase\n * @class\n */\nexport default class RibbonAppTab extends RibbonBase {\n  /**\n   * RibbonAppTab constructor\n   * @param {object} props - React component properties\n   */\n  constructor( props ) {\n    super( props );\n\n    this.state = Object.assign( this.state,\n      {\n        items: [].concat( props.items )\n      });\n\n    this[Items] = [];\n    this[Current] = undefined;\n    this[Default] = undefined;\n\n    this.handleClick = this.handleClick.bind( this );\n    this.handleClose = this.handleClose.bind( this );\n    this.handleItemClick = this.handleItemClick.bind( this );\n  }\n\n  /**\n   * Tab type.\n   * @return {string} - Tab type for identification.\n   */\n  get type() {\n    return this.props.type;\n  }\n\n  /**\n   * Panel's children items\n   * @return {[RibbonItemData]} - Ribbon item data.\n   */\n  get items() {\n    return this[Items];\n  }\n\n  /**\n   * Current actived RibbonAppMenuItem.\n   * @return {string} - RibbonAppMenuItem id.\n   */\n  get current() {\n    return this[Current];\n  }\n\n  /**\n   * Current actived RibbonAppMenuItem.\n   * @param {string} id - RibbonAppMenuItem id.\n   */\n  set current( id ) {\n    const current = this.items.find( ( item ) => item.id === id && item.type !== 'ui-ribbon-app-menu-button' && item.enabled );\n    if( !current ) throw '[RibbonAppTab] Input id not exists or disabled.';\n\n    current.actived = true;\n    this[Current] = id;\n\n    if( !this.default )\n      this.default = id;\n\n    this.items.map( ( item ) => {\n      if( item.id !== id ) item.actived = false;\n    });\n  }\n\n  /**\n   * Default actived RibbonAppMenuItem.\n   * @return {string} - RibbonAppMenuItem id.\n   */\n  get default() {\n    return this[Default];\n  }\n\n  /**\n   * Default actived RibbonAppMenuItem.\n   * @param {string} - RibbonAppMenuItem id.\n   */\n  set default( id ) {\n    const item = this.items.find( ( item ) => item.id === id && item.type !== 'ui-ribbon-app-menu-button' && item.enabled );\n    if( !item ) throw '[RibbonAppTab] Input id not exists or disabled.';\n\n    this[Default] = id;\n\n    if( !this.current )\n      this.current = id;\n  }\n\n  /**\n   * Reset current item to the default.\n   */\n  resetCurrent() {\n    this.current = this.default;\n  }\n\n  /**\n   * Instance edis/en-able status.\n   * @return {bool} - If false, make instance be disabled.\n   */\n  get enabled() {\n    return super.enabled;\n  }\n\n  /**\n   * Instance edis/en-able status.\n   * @param {bool} [enabled = true] - If false, make instance be disabled.\n   */\n  set enabled( enabled = true ) {\n    if( this.hidden ) return;\n\n    const isEnabled = ( enabled === true );\n\n    const prop = { enabled: isEnabled, actived: false };\n    const onStateChange = this.props.onStateChange;\n    onStateChange && onStateChange( this.id, prop, true );\n\n    this.setState( prop );\n\n    // Cascaded applying changes\n    this.items.map( ( item ) => {\n      item.enabled = isEnabled;\n    });\n  }\n\n  /**\n   * Instance is hidden or not.\n   * @return {bool} - If false, instance is going to disppear on the UI.\n   */\n  get hidden() {\n    return super.hidden;\n  }\n\n  /**\n   * Instance is hidden or not.\n   * @return {bool} [hidden = false]- If false, instance is going to disppear on the UI.\n   */\n  set hidden( hidden = false ) {\n    const isHidden = ( hidden === true );\n    const isEnabled = !isHidden;\n\n    const prop = { hidden: isHidden, enabled: isEnabled, actived: false };\n    const onStateChange = this.props.onStateChange;\n    onStateChange && onStateChange( this.id, prop, true );\n\n    this.setState( prop );\n\n    // Cascaded applying changes\n    this.items.map( ( item ) => {\n      item.hidden = isHidden;\n    });\n  }\n\n  /**\n   * Tab actived state.\n   * @return {bool} - If true, it repsents tab is selected currently.\n   */\n  get actived() {\n    return this.state.actived;\n  }\n\n  /**\n   * Tab actived state.\n   * @return {bool} [actived = false] - If true, it repsents tab is selected currently.\n   */\n  set actived( actived = false ) {\n    const isActived = ( actived === true );\n    const prop = { actived: isActived };\n\n    const onStateChange = this.props.onStateChange;\n    onStateChange && onStateChange( this.id, prop, true );\n\n    this.setState( prop );\n  }\n\n  /**\n   * Add new RibbonAppMenuItem by given data.\n   * @param {RibbonAppMenuItemData} itemData - Ribbon item data for creating new item on the app menu.\n   * @return {RibbonAppMenuItem} - Rendered RibbonAppMenuItem component.\n   */\n  addItem( itemData ) {\n    const idx = this.items.findIndex( ( item ) => ( item.id === itemData.id || item.name === itemData.name ) );\n    if( !(itemData instanceof RibbonAppMenuItemData) || idx !== -1 )\n      return stderr( '%c[RibbonAppTab] Input itemData is invalid or duplicate.', 'color:red;' );\n\n    const items = this.state.items.concat( itemData );\n\n    const prop = { items };\n    const onStateChange = this.props.onStateChange;\n    onStateChange && onStateChange( this.id, prop, true );\n\n    this.setState( prop );\n\n    const item = this.items[ this.items.length -1 ];\n    if( !(item instanceof RibbonAppMenuButton) && !this.default )\n      this.default = item.id;\n\n    return item;\n  }\n\n  /**\n   * Active target item by given id.\n   * @param {string} itemId - Item Id.\n   */\n  activeItemById( itemId ) {\n    if( typeof itemId !== 'string' ) return stderr( '%c[RibbonAppTab] ItemId should be a string.', 'color:red;' );\n\n    const item = this.items.find( ( item ) => item.id === itemId );\n    if( !item ) throw '[RibbonAppTab] Input item id not exists.';\n\n    item.actived = true;\n  }\n\n  componentWillUpdate() {\n    this[Items].length = 0;\n  }\n\n  /**\n   * Tab clicking event handler\n   */\n  handleClick() {\n    const onClick = this.props.onClick;\n    onClick && onClick( this.id );\n  }\n\n  handleClose( event ) {\n    event.stopPropagation();\n\n    this.actived = false;\n  }\n\n  /**\n   * Tab clicking event handler\n   */\n  handleItemClick( itemId ) {\n    this.activeItemById( itemId );\n  }\n\n  render() {\n    const scope = this;\n    const dynCSS = ClassNames({\n      'ui-ribbon-active': this.actived,\n      'ui-ribbon-disabled': ( this.enabled === false ),\n      'ui-ribbon-invisible': this.hidden,\n      'ui-ribbon-inline': ( this.hidden === false )\n    });\n\n    const updateCurrentItem = ( id ) => {\n      if( typeof id !== 'string' ) return;\n\n      scope[Current] = id;\n    };\n\n    const createItem = ( item ) => {\n      if( item.type === 'ui-ribbon-app-menu-button' ) {\n        return (\n          <RibbonAppMenuButton\n            key={ item.id }\n            id={ item.id }\n            name={ item.name }\n            displayName={ item.displayName }\n            enabled={ item.enabled }\n            hidden={ item.hidden }\n            type={ item.type }\n            actived={ item.actived }\n            content={ item.content }\n            seperator={ item.seperator }\n            onStateChange={ updateItem }\n            ref={ ( c ) => { if( c ) scope.items.push( c ); } } />\n        );\n      } else {\n        return (\n          <RibbonAppMenuItem\n            key={ item.id }\n            id={ item.id }\n            name={ item.name }\n            displayName={ item.displayName }\n            enabled={ item.enabled }\n            hidden={ item.hidden }\n            type={ item.type }\n            actived={ item.actived }\n            content={ item.content }\n            seperator={ item.seperator }\n            onMenuClick={ scope.handleItemClick }\n            onStateChange={ updateItem }\n            ref={ ( c ) => { if( c ) scope.items.push( c ); } } />\n        );\n      }\n    };\n\n    const nextOpt = ( id, data ) => {\n      // For de/activating menu by changing menu's actived property.\n      if( data.hasOwnProperty( 'actived' ) ) {\n        if( data.actived === true ) {\n          scope.items.map( ( item ) => {\n            if( item.id !== id ) item.actived = false;\n          });\n\n          updateCurrentItem( id );\n        } else {\n          // For activing other menu while current menu is diabled.\n          if( data.hasOwnProperty( 'enabled' ) && ( data.enabled === false ) ) {\n            const item = scope.items.find( ( item ) => ( item.id !== id && item.enabled === true && item.type !== 'ui-ribbon-app-menu-button' ) );\n            if( !item ) return;\n\n            item.actived = true;\n            updateCurrentItem( id );\n          }\n        }\n      }\n    };\n\n    const updateItem = ( id, data ) => {\n      let items = scope.state.items;\n      const item = items.find( ( item ) => item.id === id );\n      if( !item ) return;\n\n      Object.assign( item, data );\n\n      const prop = { items };\n      const onStateChange = scope.props.onStateChange;\n      onStateChange && onStateChange( scope.id, prop );\n\n      scope.setState( prop );\n\n      if( item.type === 'ui-ribbon-app-menu-button' ) return;\n\n      nextOpt( id, data );\n    };\n\n    const renderItemContent = ( id ) => {\n      if( !id ) return;\n\n      let items = scope.state.items;\n      const item = items.find( ( item ) => item.id === id );\n      if( !item ) return;\n\n      const content = item.content;\n      if( !content ) return;\n\n      return content();\n    };\n\n    return (\n      <li\n        key={ this.id }\n        id={ this.id }\n        className={ this.type + ' ' + dynCSS }\n        role=\"ui-ribbon-tab\"\n        onClick={ this.handleClick } >\n\n        <span className=\"ui-ribbon-uppercase\">{ this.displayName }</span>\n        <div className=\"ui-ribbon-tab-application-contents ui-ribbon-absolute\">\n          <div id=\"ribbon-nav-application-menu\">\n            <div className=\"ribbon-nav-back-arrow\" onClick={ this.handleClose }></div>\n            <ul role=\"ribbon-nav-application-menu-items\">\n              { this.state.items.map( createItem ) }\n            </ul>\n          </div>\n          <div role=\"ribbon-nav-application-menu-content\">\n            <div className=\"ribbon-content-area\">\n              { renderItemContent( this.current ) }\n            </div>\n          </div>\n        </div>\n      </li>\n    );\n  }\n}\n\nRibbonAppTab.propTypes = {\n  id: React.PropTypes.string.isRequired,\n  type: React.PropTypes.string.isRequired,\n  actived: React.PropTypes.bool,\n  items: React.PropTypes.arrayOf( React.PropTypes.instanceOf( RibbonAppMenuItemData ) ),\n  onStateChange: React.PropTypes.func\n};\n\nRibbonAppTab.defaultProps = {\n  id: newGUID(),\n  type: 'ui-ribbon-tab-application',\n  actived: false,\n  items: []\n};","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport React from 'react';\nimport RibbonTabData from './data/RibbonTabData';\nimport RibbonAppTabData from './data/RibbonAppTabData';\nimport RibbonTitlebarData from './data/RibbonTitlebarData';\nimport RibbonTitlebar from './RibbonTitlebar';\nimport RibbonTab from './RibbonTab';\nimport RibbonAppTab from './RibbonAppTab';\nimport { newGUID, stderr } from './Utility';\n\nconst Tabs = Symbol( 'tabs' );\n\n/**\n * Ribbon\n * @extends React.Component\n * @class\n */\nexport default class Ribbon extends React.Component {\n  /**\n   * RibbonBase constructor\n   * @param {object} props - React component properties\n   */\n  constructor( props ) {\n    super( props );\n\n    let appTab = new RibbonAppTabData();\n    let tabs = [ appTab ].concat( props.tabs );\n    let titlebar = new RibbonTitlebarData();\n\n    this.state = {\n      tabs: tabs,\n      titlebar: titlebar\n    };\n\n    this[Tabs] = [];\n\n    this.handleTabClick = this.handleTabClick.bind( this );\n  }\n\n  /**\n   * Content tabs\n   * @return {RibbonTab[]} - Array of RibbonTabs.\n   */\n  get tabs() {\n    return this[Tabs];\n  }\n\n  /**\n   * Toggle to show or hide app titlebar.\n   */\n  toggleAppTitle() {\n    this.refs.titlebar.toggleDisplay();\n  }\n\n  /**\n   * Add new tab by given data.\n   * @param {RibbonTabData} tabData - Ribbon tab data for creating new tab.\n   * @return {RibbonTab} - Rendered RibbonTab component.\n   */\n  addTab( tabData ) {\n    const idx = this.tabs.findIndex( ( tab ) => ( tab.id == tabData.id || tab.name === tabData.name ) );\n    if( !(tabData instanceof RibbonTabData) || idx !== -1 )\n      return stderr( '%c[Ribbon] Input tabData is invalid or duplicate.', 'color:red;' );\n\n    tabData.actived = ( this.tabs.length === 1 );\n    const tabs = this.state.tabs.concat( tabData );\n    this.setState({ tabs });\n\n    return this.tabs[ this.tabs.length - 1 ];\n  }\n\n  /**\n   * Active target tab by given id.\n   * @param {string} tabId - Tab Id.\n   */\n  activeTabById( tabId ) {\n    if( typeof tabId !== 'string' ) return stderr( '%c[Ribbon] TabId should be a string.', 'color:red;' );\n\n    const tab = this.tabs.find( ( tab ) => tab.id === tabId );\n    if( !tab ) throw '[Ribbon] Input tab id not exists.';\n\n    tab.actived = true;\n  }\n\n  /**\n   * Tab clicking event handler\n   */\n  handleTabClick( tabId ) {\n    this.activeTabById( tabId );\n  }\n\n  componentWillUpdate() {\n    this[Tabs].length = 0;\n  }\n\n  render() {\n    const scope = this;\n    const otherTabs = this.state.tabs;\n\n    const updateTitlebar = ( id, data ) => {\n      let titlebar = scope.state.titlebar;\n\n      if( titlebar.id !== id ) return;\n\n      Object.assign( titlebar, data );\n      scope.setState({ titlebar });\n    };\n\n    const createTitleBar = () => {\n      const data = scope.state.titlebar;\n      return (\n        <RibbonTitlebar\n          key={ data.id }\n          id={ data.id }\n          name={ data.name }\n          displayName={ data.title }\n          enabled={ data.enabled }\n          hidden={ data.hidden }\n          ref=\"titlebar\"\n          onStateChange={ updateTitlebar } />\n      );\n    };\n\n    const nextOpt = ( id, data ) => {\n      // For de/activating tab by changing tab's actived property.\n      if( data.hasOwnProperty( 'actived' ) ) {\n        if( data.actived === true ) {\n          scope.tabs.map( ( tab ) => {\n            if( tab.id !== id ) tab.actived = false;\n          });\n        } else {\n          // For activing other tab while current tab is diabled.\n          if( data.hasOwnProperty( 'enabled' ) && ( data.enabled === false ) ) {\n            const tab = scope.tabs.find( ( tab ) => ( tab.id !== id && tab.enabled === true && tab.type !== 'ui-ribbon-tab-application' ) );\n            if( !tab ) return;\n\n            tab.actived = true;\n          }\n        }\n      }\n    };\n\n    const updateTab = ( id, data, stopPropagation = false ) => {\n      let tabs = scope.state.tabs;\n      const tab = tabs.find( ( tab ) => tab.id === id );\n      if( !tab ) return;\n\n      Object.assign( tab, data );\n      scope.setState({ tabs });\n\n      if( !stopPropagation ) nextOpt( id, data );\n    };\n\n    const createTab = ( tab ) => {\n      if( tab.type === 'ui-ribbon-tab-application' ) {\n        return (\n          <RibbonAppTab\n            key={ tab.id }\n            id={ tab.id }\n            name={ tab.name }\n            displayName={ tab.displayName }\n            type={ tab.type }\n            enabled={ tab.enabled }\n            hidden={ tab.hidden }\n            actived={ tab.actived }\n            items={ tab.items }\n            onClick={ scope.handleTabClick }\n            onStateChange={ updateTab }\n            ref={ ( c ) => { if( c ) scope.tabs.push( c ); } } />\n        );\n      } else {\n        return (\n          <RibbonTab\n            key={ tab.id }\n            id={ tab.id }\n            name={ tab.name }\n            displayName={ tab.displayName }\n            type={ tab.type }\n            enabled={ tab.enabled }\n            hidden={ tab.hidden }\n            actived={ tab.actived }\n            panels={ tab.panels }\n            onClick={ scope.handleTabClick }\n            onStateChange={ updateTab }\n            ref={ ( c ) => { if( c ) scope.tabs.push( c ); } } />\n        );\n      }\n    };\n\n    return (\n      <div id=\"RibbonUI\">\n        { createTitleBar() }\n        <div className=\"ui-ribbon-window\">\n          <div id=\"ui-ribbon-main\" className=\"ui-ribbon-main ui-ribbon-border-bottom\">\n            <div className=\"ui-ribbon-tab-container ui-ribbon-border-bottom\">\n              <ul role=\"ui-ribbon-tabs\" className=\"ui-ribbon-nowrap ui-ribbon-nopadding ui-ribbon-nomargin\">\n                { otherTabs.map( createTab ) }\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nRibbon.propTypes = {\n  id: React.PropTypes.string.isRequired,\n  tabs: React.PropTypes.arrayOf( React.PropTypes.instanceOf( RibbonTabData ) )\n};\n\nRibbon.defaultProps = {\n  id: newGUID(),\n  tabs: []\n};\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport Ribbon from './Ribbon';\n\nconst RibbonInst = Symbol( 'ribbon' );\nconst Options = Symbol( 'options' );\n\n/**\n * RibbonTask\n * @class\n * @classdesc For bulk creating or modifying Ribbon contents.\n */\nexport default class RibbonTask {\n  /**\n   * RibbonTask constructor.\n   * @param {Ribbon} ribbon - Rendered Ribbon component.\n   * @param {object} options - Task options.\n   */\n  constructor( ribbon, options ) {\n    if( !(ribbon instanceof Ribbon ) ) throw 'No Ribbon instance available.';\n\n    this[RibbonInst] = ribbon;\n    this[Options] = options;\n  }\n\n  /**\n   * Rendered Ribbon component.\n   * @return {Ribbon}\n   */\n  get ribbon() {\n    return this[RibbonInst];\n  }\n\n  /**\n   * Task options.\n   * @return {object}\n   */\n  get options() {\n    return this[Options];\n  }\n\n  /**\n   * Execute task content.\n   * @return {bool} If true, it represents this task was executed by the Ribbon.\n   */\n  execute() {\n    return true;\n  }\n\n  /**\n   * Discard all changes.\n   * @return {bool} If true, it represents changes made by this task was removed from the Ribbon.\n   */\n  discard() {\n    return true;\n  }\n}\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport RibbonTask from './RibbonTask';\n\n/**\n * Registered RibbonTask.\n * @private {RibbonTask[]}\n */\nconst Tasks = Symbol( 'tasks' );\n\n/**\n * Check wether input class is instance of RibbonTask or not.\n * @param {RibbonTask} task\n * @return {bool} - If true, it reprents task is a instance of the RibbonTask.\n */\nconst checkTaskType = ( task ) => {\n  if( task.prototype instanceof RibbonTask ) return true;\n  \n  return false;\n};\n\n/**\n * RibbonTaskManager\n * @class\n * @classdesc Task manager class for Ribbon UI.\n */\nexport default class RibbonTaskManager {\n  /**\n   * RibbonTaskManager constructor\n   */\n  constructor() {\n    this[Tasks] = {};\n\n    checkTaskType.bind( this );\n  }\n\n  /**\n   * All registered RibbonTask.\n   * @return {RibbonTask[]}\n   */\n  get tasks() {\n    return this[Tasks];\n  }\n\n  /**\n   * Register RibbonTask.\n   * @param {string} taskId - Task Identification.\n   * @param {RibbonTask} task - Content instance of RibbonTask.\n   * @return {bool} - If task is not type of RibbonTask or registered, it will return false.\n   */\n  register( taskId, task ) {\n    if( !checkTaskType( task ) || this.getTask( taskId ) ) return false;\n\n    this[Tasks][taskId] = task;\n\n    return true;\n  }\n\n  /**\n   * Unregister RibbonTask.\n   * @param {string} taskId - Task Identification.\n   * @return {bool} - If task is not registered, it will return false.\n   */\n  unregister( taskId ) {\n    if( !this.getTask( taskId ) ) return false;\n\n    delete this[Tasks][taskId];\n\n    return true;\n  }\n\n  /**\n   * Get registered task by given id.\n   * @param {string} taskId - Task Identification.\n   * @return {null | RibbonTask} - Return task definition if task is existed.\n   */\n  getTask( taskId ) {\n    if( this.tasks.hasOwnProperty( taskId ) ) {\n      return this.tasks[ taskId ];\n    }\n    return null;\n  }\n}\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport Ribbon from './Ribbon';\nimport RibbonTaskManager from './RibbonTaskManager';\nimport { stderr } from './Utility';\n\nconst RibbonInst = Symbol( 'ribbon' );\nconst Tasks = Symbol( 'tasks' );\nconst TaskManager = Symbol( 'taskManager' );\n\n/**\n * RibbonTaskExecuter\n * @class\n * @classdesc\tClass for executing tasks to create or modify Ribbon contents.\n */\nexport default class RibbonTaskExecuter {\n  /**\n   * RibbonTaskExecuter constructor.\n   * @param {Ribbon} ribbon - Rendered Ribbon component.\n   * @param {RibbonTaskManager} taskManager -\tRibbonTaskManager instance.\n   */\n  constructor( ribbon, taskManager ) {\n    if( !(ribbon instanceof Ribbon ) ) throw 'No Ribbon instance available.';\n    if( !(taskManager instanceof RibbonTaskManager ) ) throw 'No RibbonTaskManager instance available.';\n\n    this[RibbonInst] = ribbon;\n    this[TaskManager] = taskManager;\n    this[Tasks] = {};\n  }\n\n  /**\n   * Rendered Ribbon component.\n   * @return {Ribbon}\n   */\n  get ribbon() {\n    return this[RibbonInst];\n  }\n\n  /**\n   * Task\tmanager instance.\n   * @return {RibbonTaskManager}\n   */\n  get manager() {\n    return this[TaskManager];\n  }\n\n  /**\n   * All executed tasks.\n   * @return {RibbonTask[]}\n   */\n  get tasks() {\n    return this[Tasks];\n  }\n\n  /**\n   * Execute registered task.\n   * @param {string} taskId - Task Identification.\n   * @return {bool} - If task is not registered or failed to execute, it will return false.\n   */\n  execute( taskId, options ) {\n    let result = false;\n\n    if( !this.getTask( taskId ) ) {\n      const taskClass = this.manager.getTask( taskId );\n\n      if( taskClass ) {\n        const task = new taskClass( this.ribbon, options );\n        result = task.execute();\n\n        if( result === true ) {\n          this[Tasks][taskId] = task;\n\n          stderr( '[RibbonTaskExecuter] Task executed: `%s`.', taskId );\n        }\n      } else {\n        stderr( '[RibbonTaskExecuter] Task not found: `%s`.', taskId );\n      }\n    } else {\n      stderr( '[RibbonTaskExecuter] Task already executed: `%s`.', taskId );\n    }\n\n    return result;\n  }\n\n  /**\n   * Discard executed task.\n   * @param {string} taskId - Task Identification.\n   * @return {bool} - If task is not registered or failed to discard changes, it will return false.\n   */\n  discard( taskId ) {\n    let result = false;\n    const task = this.getTask( taskId );\n\n    if( !task ) {\n      stderr( '[RibbonTaskExecuter] Task not found: `%s`.', taskId );\n    } else {\n      result = task.discard();\n      if( !result ) throw 'Failed to discard chnages in task: `' + taskId + '`.';\n\n      delete this[Tasks][taskId];\n      stderr( '[RibbonTaskExecuter] Task content discarded: `%s`.', taskId );\n    }\n\n    return result;\n  }\n\n  /**\n   * Get executed task by given id.\n   * @param {string} taskId - Task Identification.\n   * @return {null | RibbonTask} - Return task definition if task is existed.\n   */\n  getTask( taskId ) {\n    if( this.tasks.hasOwnProperty( taskId ) ) {\n      return this.tasks[ taskId ];\n    }\n\n    return null;\n  }\n}\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Ribbon from './Ribbon';\nimport RibbonTaskManager from './RibbonTaskManager';\nimport RibbonTaskExecuter from './RibbonTaskExecuter';\n\nconst Container = Symbol( 'container' );\nconst MainRibbon = Symbol( 'mainRibbon' );\nconst TaskManager = Symbol( 'taskManager' );\nconst TaskExecuter = Symbol( 'taskExecuter' );\n\n/**\n * RibbonCtrl\n * @class\n */\nexport default class RibbonCtrl {\n  /**\n   * RibbonCtrl constructor\n   */\n  constructor() {\n    this[TaskManager] = new RibbonTaskManager();\n    this[Container] = undefined;\n    this[MainRibbon] = undefined;\n    this[TaskExecuter] = undefined;\n  }\n\n  /**\n   * Ribbon instance.\n   * @return {Ribbon} - Rendered Ribbon component.\n   */\n  get mainRibbon() {\n    return this[MainRibbon];\n  }\n\n  /**\n   * Ribbon container\n   * @return {HTMLElement} - React render target DOM element.\n   */\n  get container() {\n    return this[Container];\n  }\n\n  /**\n   * Ribbon container\n   * @param {HTMLElement} container - React render target DOM element.\n   */\n  set container( container ) {\n    if( !(container instanceof HTMLElement) ) throw '[RibbonCtrl] Input container must be a HTML DOM element.';\n\n    this[Container] = container;\n  }\n\n  /**\n   * RibbonTaskManager instance.\n   * @return {RibbonTaskManager}\n   */\n  get taskManager() {\n    return this[TaskManager];\n  }\n\n  /**\n   * RibbonTaskExecuter instance.\n   * @return {RibbonTaskExecuter}\n   */\n  get taskExecuter() {\n    return this[TaskExecuter];\n  }\n\n  /**\n   * Register RibbonTask.\n   * @param {string} taskId - Task Identification.\n   * @param {RibbonTask} task - Content instance of RibbonTask.\n   * @return {bool} - If task is not type of RibbonTask or registered, it will return false.\n   */\n  registerTask( taskId, task ) {\n    if( !this.taskManager ) return false;\n\n    return this.taskManager.register( taskId, task );\n  }\n\n  /**\n   * Unregister RibbonTask.\n   * @param {string} taskId - Task Identification.\n   * @return {bool} - If task is not registered, it will return false.\n   */\n  unregisterTask( taskId ) {\n    if( !this.taskManager ) return false;\n\n    return this.taskManager.unregister( taskId );\n  }\n\n  /**\n   * Execute registered RibbonTask.\n   * @param {string} taskId - Task Identification.\n   * @return {bool} - If task is not registered or failed to execute, it will return false.\n   */\n  executeTask( taskId, options ) {\n    if( !this.taskExecuter ) return false;\n\n    return this.taskExecuter.execute( taskId, options );\n  }\n\n  /**\n   * Discard executed RibbonTask.\n   * @param {string} taskId - Task Identification.\n   * @return {bool} - If task is not registered or failed to discard changes, it will return false.\n   */\n  discardTask( taskId ) {\n    if( !this.taskExecuter ) return false;\n\n    return this.taskExecuter.discard( taskId );\n  }\n\n  /**\n   * Start UI rendering.\n   * @return {Promise} - Result.\n   * @resolve {RibbonCtrl} - Self RibbonCtrl instance.\n   * @reject {object} - Errors.\n   */\n  run() {\n    const scope = this;\n\n    return new Promise( ( resolve, reject ) => {\n      try {\n        const container = scope.container;\n        const taskManager = scope.taskManager;\n\n        scope[MainRibbon] = ReactDOM.render( <Ribbon />, container );\n        scope[TaskExecuter] = new RibbonTaskExecuter( scope.mainRibbon, taskManager );\n\n        resolve( scope );\n      } catch( error ) {\n        reject( error );\n      }\n    });\n  }\n}\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport RibbonBaseData from './RibbonBaseData';\nimport RibbonTitlebarData from './RibbonTitlebarData';\nimport RibbonTabData from './RibbonTabData';\nimport RibbonAppTabData from './RibbonAppTabData';\nimport RibbonPanelData from './RibbonPanelData';\nimport RibbonAppMenuItemData from './RibbonAppMenuItemData';\nimport RibbonAppMenuButtonData from './RibbonAppMenuButtonData';\nimport RibbonItemData from './RibbonItemData';\nimport RibbonButtonData from './RibbonButtonData';\nimport RibbonPushButtonData from './RibbonPushButtonData';\nimport RibbonToggleButtonData from './RibbonToggleButtonData';\nimport RibbonTooltipData from './RibbonTooltipData';\nimport RibbonGroupData from './RibbonGroupData';\nimport RibbonRadioButtonGroupData from './RibbonRadioButtonGroupData';\n\nconst Data = {\n  RibbonBaseData,\n  RibbonTitlebarData,\n  RibbonTabData,\n  RibbonAppTabData,\n  RibbonPanelData,\n  RibbonAppMenuItemData,\n  RibbonAppMenuButtonData,\n  RibbonItemData,\n  RibbonButtonData,\n  RibbonPushButtonData,\n  RibbonToggleButtonData,\n  RibbonTooltipData,\n  RibbonGroupData,\n  RibbonRadioButtonGroupData\n};\n\nexport default Data;\n","/**\n * @author yiskang / http://github.com/yiskang\n */\n\n'use strict';\n\nimport Ribbon from './Ribbon';\nimport RibbonBase from './RibbonBase';\nimport RibbonTab from './RibbonTab';\nimport RibbonAppTab from './RibbonAppTab';\nimport RibbonAppMenuItem from './RibbonAppMenuItem';\nimport RibbonAppMenuButton from './RibbonAppMenuButton';\nimport RibbonPanel from './RibbonPanel';\nimport RibbonTitlebar from './RibbonTitlebar';\nimport RibbonItem from './RibbonItem';\nimport RibbonButton from './RibbonButton';\nimport RibbonTooltip from './RibbonTooltip';\nimport RibbonPushButton from './RibbonPushButton';\nimport RibbonToggleButton from './RibbonToggleButton';\nimport RibbonGroup from './RibbonGroup';\nimport RibbonRadioButtonGroup from './RibbonRadioButtonGroup';\nimport RibbonCtrl from './RibbonCtrl';\nimport RibbonTask from './RibbonTask';\nimport RibbonTaskManager from './RibbonTaskManager';\nimport RibbonTaskExecuter from './RibbonTaskExecuter';\nimport Utility from './Utility';\nimport Data from './data';\n\nconst ReactRibbon = {\n  Ribbon,\n  RibbonBase,\n  RibbonTab,\n  RibbonAppTab,\n  RibbonAppMenuItem,\n  RibbonAppMenuButton,\n  RibbonPanel,\n  RibbonTitlebar,\n  RibbonItem,\n  RibbonButton,\n  RibbonTooltip,\n  RibbonPushButton,\n  RibbonToggleButton,\n  RibbonGroup,\n  RibbonRadioButtonGroup,\n  RibbonCtrl,\n  RibbonTask,\n  RibbonTaskManager,\n  RibbonTaskExecuter,\n  Utility,\n  Data\n};\n\n/**\n * Module exposure.\n */\nexport default ReactRibbon;"],"names":["newGUID","d","Date","getTime","guid","replace","c","r","Math","random","floor","toString","isGUID","pattern","test","findItem","items","predicate","Function","item","i","length","namespace","s","ns","window","self","parts","split","stderr","debug","log","console","bind","utility","Id","Symbol","Name","DisplayName","Enabled","Hidden","RibbonBaseData","name","displayName","enabled","hidden","Actived","Panels","RibbonTabData","actived","panels","Items","RibbonAppTabData","RibbonTitlebarData","title","RibbonBase","props","state","id","prop","onStateChange","setState","isEnabled","isHidden","React","Component","propTypes","PropTypes","string","isRequired","bool","func","defaultProps","RibbonTitlebar","dynCSS","ClassNames","RibbonItem","Object","assign","type","isActived","RibbonTooltip","content","createTitle","createContent","Content","RibbonTooltipData","undefined","RibbonButton","icon","tooltip","toggleable","clickHandler","handleClick","handleMouseOver","handleMouseOut","scope","data","updateTooltip","event","show","hide","outerDynCSS","innerDynCSS","formatLegend","legend","texts","result","map","txt","role","createTooltip","isToggleable","handler","refs","instanceOf","RibbonPushButton","RibbonToggleButton","onGroupCurrentChange","RibbonItemData","Icon","Tooltip","Toggleable","ClickHandler","RibbonButtonData","RibbonPushButtonData","RibbonToggleButtonData","RibbonGroup","concat","itemData","idx","findIndex","nextProps","nextState","updateItem","find","createItem","RibbonPushButtonLike","push","arrayOf","Current","Default","RibbonRadioButtonGroup","current","default","updateCurrentItem","RibbonGroupData","RibbonRadioButtonGroupData","RibbonPanel","legendDynCSS","RibbonGroupLike","createSeperator","seperator","Seperator","RibbonPanelData","RibbonTab","panelData","panel","onClick","updatePanel","createPanel","RibbonAppMenuSeperator","RibbonAppMenuItem","onMenuClick","RibbonAppMenuButton","RibbonAppMenuItemData","RibbonAppMenuButtonData","RibbonAppTab","handleClose","handleItemClick","itemId","stopPropagation","activeItemById","nextOpt","hasOwnProperty","renderItemContent","Tabs","Ribbon","appTab","tabs","titlebar","handleTabClick","toggleDisplay","tabData","tab","tabId","activeTabById","otherTabs","updateTitlebar","createTitleBar","updateTab","createTab","RibbonInst","Options","RibbonTask","ribbon","options","Tasks","checkTaskType","task","prototype","RibbonTaskManager","taskId","getTask","tasks","TaskManager","RibbonTaskExecuter","taskManager","taskClass","manager","execute","discard","Container","MainRibbon","TaskExecuter","RibbonCtrl","register","unregister","taskExecuter","Promise","resolve","reject","container","ReactDOM","render","mainRibbon","error","HTMLElement","Data","ReactRibbon"],"mappings":"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"}